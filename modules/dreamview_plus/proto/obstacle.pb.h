// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview_plus/proto/obstacle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/dreamview/proto/simulation_world.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto;
namespace apollo {
namespace dreamview {
class Obstacles;
class ObstaclesDefaultTypeInternal;
extern ObstaclesDefaultTypeInternal _Obstacles_default_instance_;
class Obstacles_SensorMeasurementsEntry_DoNotUse;
class Obstacles_SensorMeasurementsEntry_DoNotUseDefaultTypeInternal;
extern Obstacles_SensorMeasurementsEntry_DoNotUseDefaultTypeInternal _Obstacles_SensorMeasurementsEntry_DoNotUse_default_instance_;
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::dreamview::Obstacles* Arena::CreateMaybeMessage<::apollo::dreamview::Obstacles>(Arena*);
template<> ::apollo::dreamview::Obstacles_SensorMeasurementsEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::Obstacles_SensorMeasurementsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace dreamview {

// ===================================================================

class Obstacles_SensorMeasurementsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Obstacles_SensorMeasurementsEntry_DoNotUse, 
    std::string, ::apollo::dreamview::SensorMeasurements,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Obstacles_SensorMeasurementsEntry_DoNotUse, 
    std::string, ::apollo::dreamview::SensorMeasurements,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Obstacles_SensorMeasurementsEntry_DoNotUse();
  explicit Obstacles_SensorMeasurementsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Obstacles_SensorMeasurementsEntry_DoNotUse& other);
  static const Obstacles_SensorMeasurementsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Obstacles_SensorMeasurementsEntry_DoNotUse*>(&_Obstacles_SensorMeasurementsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.Obstacles.SensorMeasurementsEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto);
    return ::descriptor_table_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class Obstacles PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Obstacles) */ {
 public:
  inline Obstacles() : Obstacles(nullptr) {}
  virtual ~Obstacles();

  Obstacles(const Obstacles& from);
  Obstacles(Obstacles&& from) noexcept
    : Obstacles() {
    *this = ::std::move(from);
  }

  inline Obstacles& operator=(const Obstacles& from) {
    CopyFrom(from);
    return *this;
  }
  inline Obstacles& operator=(Obstacles&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Obstacles& default_instance();

  static inline const Obstacles* internal_default_instance() {
    return reinterpret_cast<const Obstacles*>(
               &_Obstacles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Obstacles& a, Obstacles& b) {
    a.Swap(&b);
  }
  inline void Swap(Obstacles* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Obstacles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Obstacles* New() const final {
    return CreateMaybeMessage<Obstacles>(nullptr);
  }

  Obstacles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Obstacles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Obstacles& from);
  void MergeFrom(const Obstacles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obstacles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.Obstacles";
  }
  protected:
  explicit Obstacles(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto);
    return ::descriptor_table_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kObstacleFieldNumber = 1,
    kSensorMeasurementsFieldNumber = 3,
    kAutoDrivingCarFieldNumber = 2,
  };
  // repeated .apollo.dreamview.Object obstacle = 1;
  int obstacle_size() const;
  private:
  int _internal_obstacle_size() const;
  public:
  void clear_obstacle();
  ::apollo::dreamview::Object* mutable_obstacle(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Object >*
      mutable_obstacle();
  private:
  const ::apollo::dreamview::Object& _internal_obstacle(int index) const;
  ::apollo::dreamview::Object* _internal_add_obstacle();
  public:
  const ::apollo::dreamview::Object& obstacle(int index) const;
  ::apollo::dreamview::Object* add_obstacle();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Object >&
      obstacle() const;

  // map<string, .apollo.dreamview.SensorMeasurements> sensor_measurements = 3;
  int sensor_measurements_size() const;
  private:
  int _internal_sensor_measurements_size() const;
  public:
  void clear_sensor_measurements();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::SensorMeasurements >&
      _internal_sensor_measurements() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::SensorMeasurements >*
      _internal_mutable_sensor_measurements();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::SensorMeasurements >&
      sensor_measurements() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::SensorMeasurements >*
      mutable_sensor_measurements();

  // optional .apollo.dreamview.Object auto_driving_car = 2;
  bool has_auto_driving_car() const;
  private:
  bool _internal_has_auto_driving_car() const;
  public:
  void clear_auto_driving_car();
  const ::apollo::dreamview::Object& auto_driving_car() const;
  ::apollo::dreamview::Object* release_auto_driving_car();
  ::apollo::dreamview::Object* mutable_auto_driving_car();
  void set_allocated_auto_driving_car(::apollo::dreamview::Object* auto_driving_car);
  private:
  const ::apollo::dreamview::Object& _internal_auto_driving_car() const;
  ::apollo::dreamview::Object* _internal_mutable_auto_driving_car();
  public:
  void unsafe_arena_set_allocated_auto_driving_car(
      ::apollo::dreamview::Object* auto_driving_car);
  ::apollo::dreamview::Object* unsafe_arena_release_auto_driving_car();

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Obstacles)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Object > obstacle_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Obstacles_SensorMeasurementsEntry_DoNotUse,
      std::string, ::apollo::dreamview::SensorMeasurements,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> sensor_measurements_;
  ::apollo::dreamview::Object* auto_driving_car_;
  friend struct ::TableStruct_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Obstacles

// repeated .apollo.dreamview.Object obstacle = 1;
inline int Obstacles::_internal_obstacle_size() const {
  return obstacle_.size();
}
inline int Obstacles::obstacle_size() const {
  return _internal_obstacle_size();
}
inline ::apollo::dreamview::Object* Obstacles::mutable_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Obstacles.obstacle)
  return obstacle_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Object >*
Obstacles::mutable_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Obstacles.obstacle)
  return &obstacle_;
}
inline const ::apollo::dreamview::Object& Obstacles::_internal_obstacle(int index) const {
  return obstacle_.Get(index);
}
inline const ::apollo::dreamview::Object& Obstacles::obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Obstacles.obstacle)
  return _internal_obstacle(index);
}
inline ::apollo::dreamview::Object* Obstacles::_internal_add_obstacle() {
  return obstacle_.Add();
}
inline ::apollo::dreamview::Object* Obstacles::add_obstacle() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.Obstacles.obstacle)
  return _internal_add_obstacle();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Object >&
Obstacles::obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Obstacles.obstacle)
  return obstacle_;
}

// optional .apollo.dreamview.Object auto_driving_car = 2;
inline bool Obstacles::_internal_has_auto_driving_car() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || auto_driving_car_ != nullptr);
  return value;
}
inline bool Obstacles::has_auto_driving_car() const {
  return _internal_has_auto_driving_car();
}
inline const ::apollo::dreamview::Object& Obstacles::_internal_auto_driving_car() const {
  const ::apollo::dreamview::Object* p = auto_driving_car_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::dreamview::Object&>(
      ::apollo::dreamview::_Object_default_instance_);
}
inline const ::apollo::dreamview::Object& Obstacles::auto_driving_car() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Obstacles.auto_driving_car)
  return _internal_auto_driving_car();
}
inline void Obstacles::unsafe_arena_set_allocated_auto_driving_car(
    ::apollo::dreamview::Object* auto_driving_car) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_driving_car_);
  }
  auto_driving_car_ = auto_driving_car;
  if (auto_driving_car) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.dreamview.Obstacles.auto_driving_car)
}
inline ::apollo::dreamview::Object* Obstacles::release_auto_driving_car() {
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::dreamview::Object* temp = auto_driving_car_;
  auto_driving_car_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::dreamview::Object* Obstacles::unsafe_arena_release_auto_driving_car() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Obstacles.auto_driving_car)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::dreamview::Object* temp = auto_driving_car_;
  auto_driving_car_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::Object* Obstacles::_internal_mutable_auto_driving_car() {
  _has_bits_[0] |= 0x00000001u;
  if (auto_driving_car_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::Object>(GetArena());
    auto_driving_car_ = p;
  }
  return auto_driving_car_;
}
inline ::apollo::dreamview::Object* Obstacles::mutable_auto_driving_car() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Obstacles.auto_driving_car)
  return _internal_mutable_auto_driving_car();
}
inline void Obstacles::set_allocated_auto_driving_car(::apollo::dreamview::Object* auto_driving_car) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_driving_car_);
  }
  if (auto_driving_car) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_driving_car)->GetArena();
    if (message_arena != submessage_arena) {
      auto_driving_car = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_driving_car, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  auto_driving_car_ = auto_driving_car;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Obstacles.auto_driving_car)
}

// map<string, .apollo.dreamview.SensorMeasurements> sensor_measurements = 3;
inline int Obstacles::_internal_sensor_measurements_size() const {
  return sensor_measurements_.size();
}
inline int Obstacles::sensor_measurements_size() const {
  return _internal_sensor_measurements_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::SensorMeasurements >&
Obstacles::_internal_sensor_measurements() const {
  return sensor_measurements_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::SensorMeasurements >&
Obstacles::sensor_measurements() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.Obstacles.sensor_measurements)
  return _internal_sensor_measurements();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::SensorMeasurements >*
Obstacles::_internal_mutable_sensor_measurements() {
  return sensor_measurements_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::SensorMeasurements >*
Obstacles::mutable_sensor_measurements() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.Obstacles.sensor_measurements)
  return _internal_mutable_sensor_measurements();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto
