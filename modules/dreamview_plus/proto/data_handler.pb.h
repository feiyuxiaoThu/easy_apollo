// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview_plus/proto/data_handler.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto;
namespace apollo {
namespace dreamview {
class ChannelInfo;
class ChannelInfoDefaultTypeInternal;
extern ChannelInfoDefaultTypeInternal _ChannelInfo_default_instance_;
class DataHandlerConf;
class DataHandlerConfDefaultTypeInternal;
extern DataHandlerConfDefaultTypeInternal _DataHandlerConf_default_instance_;
class DataHandlerConf_DataHandlerInfoEntry_DoNotUse;
class DataHandlerConf_DataHandlerInfoEntry_DoNotUseDefaultTypeInternal;
extern DataHandlerConf_DataHandlerInfoEntry_DoNotUseDefaultTypeInternal _DataHandlerConf_DataHandlerInfoEntry_DoNotUse_default_instance_;
class DataHandlerInfo;
class DataHandlerInfoDefaultTypeInternal;
extern DataHandlerInfoDefaultTypeInternal _DataHandlerInfo_default_instance_;
class StreamData;
class StreamDataDefaultTypeInternal;
extern StreamDataDefaultTypeInternal _StreamData_default_instance_;
class WebsocketInfo;
class WebsocketInfoDefaultTypeInternal;
extern WebsocketInfoDefaultTypeInternal _WebsocketInfo_default_instance_;
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::dreamview::ChannelInfo* Arena::CreateMaybeMessage<::apollo::dreamview::ChannelInfo>(Arena*);
template<> ::apollo::dreamview::DataHandlerConf* Arena::CreateMaybeMessage<::apollo::dreamview::DataHandlerConf>(Arena*);
template<> ::apollo::dreamview::DataHandlerConf_DataHandlerInfoEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::DataHandlerConf_DataHandlerInfoEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::DataHandlerInfo* Arena::CreateMaybeMessage<::apollo::dreamview::DataHandlerInfo>(Arena*);
template<> ::apollo::dreamview::StreamData* Arena::CreateMaybeMessage<::apollo::dreamview::StreamData>(Arena*);
template<> ::apollo::dreamview::WebsocketInfo* Arena::CreateMaybeMessage<::apollo::dreamview::WebsocketInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace dreamview {

// ===================================================================

class WebsocketInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.WebsocketInfo) */ {
 public:
  inline WebsocketInfo() : WebsocketInfo(nullptr) {}
  virtual ~WebsocketInfo();

  WebsocketInfo(const WebsocketInfo& from);
  WebsocketInfo(WebsocketInfo&& from) noexcept
    : WebsocketInfo() {
    *this = ::std::move(from);
  }

  inline WebsocketInfo& operator=(const WebsocketInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebsocketInfo& operator=(WebsocketInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WebsocketInfo& default_instance();

  static inline const WebsocketInfo* internal_default_instance() {
    return reinterpret_cast<const WebsocketInfo*>(
               &_WebsocketInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WebsocketInfo& a, WebsocketInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WebsocketInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WebsocketInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WebsocketInfo* New() const final {
    return CreateMaybeMessage<WebsocketInfo>(nullptr);
  }

  WebsocketInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WebsocketInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WebsocketInfo& from);
  void MergeFrom(const WebsocketInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WebsocketInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.WebsocketInfo";
  }
  protected:
  explicit WebsocketInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto);
    return ::descriptor_table_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWebsocketNameFieldNumber = 1,
    kWebsocketPipeFieldNumber = 2,
  };
  // optional string websocket_name = 1;
  bool has_websocket_name() const;
  private:
  bool _internal_has_websocket_name() const;
  public:
  void clear_websocket_name();
  const std::string& websocket_name() const;
  void set_websocket_name(const std::string& value);
  void set_websocket_name(std::string&& value);
  void set_websocket_name(const char* value);
  void set_websocket_name(const char* value, size_t size);
  std::string* mutable_websocket_name();
  std::string* release_websocket_name();
  void set_allocated_websocket_name(std::string* websocket_name);
  private:
  const std::string& _internal_websocket_name() const;
  void _internal_set_websocket_name(const std::string& value);
  std::string* _internal_mutable_websocket_name();
  public:

  // optional string websocket_pipe = 2;
  bool has_websocket_pipe() const;
  private:
  bool _internal_has_websocket_pipe() const;
  public:
  void clear_websocket_pipe();
  const std::string& websocket_pipe() const;
  void set_websocket_pipe(const std::string& value);
  void set_websocket_pipe(std::string&& value);
  void set_websocket_pipe(const char* value);
  void set_websocket_pipe(const char* value, size_t size);
  std::string* mutable_websocket_pipe();
  std::string* release_websocket_pipe();
  void set_allocated_websocket_pipe(std::string* websocket_pipe);
  private:
  const std::string& _internal_websocket_pipe() const;
  void _internal_set_websocket_pipe(const std::string& value);
  std::string* _internal_mutable_websocket_pipe();
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.WebsocketInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr websocket_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr websocket_pipe_;
  friend struct ::TableStruct_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto;
};
// -------------------------------------------------------------------

class ChannelInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.ChannelInfo) */ {
 public:
  inline ChannelInfo() : ChannelInfo(nullptr) {}
  virtual ~ChannelInfo();

  ChannelInfo(const ChannelInfo& from);
  ChannelInfo(ChannelInfo&& from) noexcept
    : ChannelInfo() {
    *this = ::std::move(from);
  }

  inline ChannelInfo& operator=(const ChannelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelInfo& operator=(ChannelInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelInfo& default_instance();

  static inline const ChannelInfo* internal_default_instance() {
    return reinterpret_cast<const ChannelInfo*>(
               &_ChannelInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChannelInfo& a, ChannelInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelInfo* New() const final {
    return CreateMaybeMessage<ChannelInfo>(nullptr);
  }

  ChannelInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelInfo& from);
  void MergeFrom(const ChannelInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.ChannelInfo";
  }
  protected:
  explicit ChannelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto);
    return ::descriptor_table_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNameFieldNumber = 1,
    kProtoPathFieldNumber = 2,
    kMsgTypeFieldNumber = 3,
  };
  // optional string channel_name = 1;
  bool has_channel_name() const;
  private:
  bool _internal_has_channel_name() const;
  public:
  void clear_channel_name();
  const std::string& channel_name() const;
  void set_channel_name(const std::string& value);
  void set_channel_name(std::string&& value);
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  std::string* mutable_channel_name();
  std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // optional string proto_path = 2;
  bool has_proto_path() const;
  private:
  bool _internal_has_proto_path() const;
  public:
  void clear_proto_path();
  const std::string& proto_path() const;
  void set_proto_path(const std::string& value);
  void set_proto_path(std::string&& value);
  void set_proto_path(const char* value);
  void set_proto_path(const char* value, size_t size);
  std::string* mutable_proto_path();
  std::string* release_proto_path();
  void set_allocated_proto_path(std::string* proto_path);
  private:
  const std::string& _internal_proto_path() const;
  void _internal_set_proto_path(const std::string& value);
  std::string* _internal_mutable_proto_path();
  public:

  // optional string msg_type = 3;
  bool has_msg_type() const;
  private:
  bool _internal_has_msg_type() const;
  public:
  void clear_msg_type();
  const std::string& msg_type() const;
  void set_msg_type(const std::string& value);
  void set_msg_type(std::string&& value);
  void set_msg_type(const char* value);
  void set_msg_type(const char* value, size_t size);
  std::string* mutable_msg_type();
  std::string* release_msg_type();
  void set_allocated_msg_type(std::string* msg_type);
  private:
  const std::string& _internal_msg_type() const;
  void _internal_set_msg_type(const std::string& value);
  std::string* _internal_mutable_msg_type();
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.ChannelInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_type_;
  friend struct ::TableStruct_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto;
};
// -------------------------------------------------------------------

class DataHandlerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.DataHandlerInfo) */ {
 public:
  inline DataHandlerInfo() : DataHandlerInfo(nullptr) {}
  virtual ~DataHandlerInfo();

  DataHandlerInfo(const DataHandlerInfo& from);
  DataHandlerInfo(DataHandlerInfo&& from) noexcept
    : DataHandlerInfo() {
    *this = ::std::move(from);
  }

  inline DataHandlerInfo& operator=(const DataHandlerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataHandlerInfo& operator=(DataHandlerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataHandlerInfo& default_instance();

  static inline const DataHandlerInfo* internal_default_instance() {
    return reinterpret_cast<const DataHandlerInfo*>(
               &_DataHandlerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DataHandlerInfo& a, DataHandlerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DataHandlerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataHandlerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataHandlerInfo* New() const final {
    return CreateMaybeMessage<DataHandlerInfo>(nullptr);
  }

  DataHandlerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataHandlerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataHandlerInfo& from);
  void MergeFrom(const DataHandlerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataHandlerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.DataHandlerInfo";
  }
  protected:
  explicit DataHandlerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto);
    return ::descriptor_table_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 6,
    kDataNameFieldNumber = 1,
    kProtoPathFieldNumber = 2,
    kMsgTypeFieldNumber = 3,
    kWebsocketInfoFieldNumber = 4,
    kDifferentForChannelsFieldNumber = 5,
  };
  // repeated .apollo.dreamview.ChannelInfo channels = 6;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::apollo::dreamview::ChannelInfo* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ChannelInfo >*
      mutable_channels();
  private:
  const ::apollo::dreamview::ChannelInfo& _internal_channels(int index) const;
  ::apollo::dreamview::ChannelInfo* _internal_add_channels();
  public:
  const ::apollo::dreamview::ChannelInfo& channels(int index) const;
  ::apollo::dreamview::ChannelInfo* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ChannelInfo >&
      channels() const;

  // optional string data_name = 1;
  bool has_data_name() const;
  private:
  bool _internal_has_data_name() const;
  public:
  void clear_data_name();
  const std::string& data_name() const;
  void set_data_name(const std::string& value);
  void set_data_name(std::string&& value);
  void set_data_name(const char* value);
  void set_data_name(const char* value, size_t size);
  std::string* mutable_data_name();
  std::string* release_data_name();
  void set_allocated_data_name(std::string* data_name);
  private:
  const std::string& _internal_data_name() const;
  void _internal_set_data_name(const std::string& value);
  std::string* _internal_mutable_data_name();
  public:

  // optional string proto_path = 2;
  bool has_proto_path() const;
  private:
  bool _internal_has_proto_path() const;
  public:
  void clear_proto_path();
  const std::string& proto_path() const;
  void set_proto_path(const std::string& value);
  void set_proto_path(std::string&& value);
  void set_proto_path(const char* value);
  void set_proto_path(const char* value, size_t size);
  std::string* mutable_proto_path();
  std::string* release_proto_path();
  void set_allocated_proto_path(std::string* proto_path);
  private:
  const std::string& _internal_proto_path() const;
  void _internal_set_proto_path(const std::string& value);
  std::string* _internal_mutable_proto_path();
  public:

  // optional string msg_type = 3;
  bool has_msg_type() const;
  private:
  bool _internal_has_msg_type() const;
  public:
  void clear_msg_type();
  const std::string& msg_type() const;
  void set_msg_type(const std::string& value);
  void set_msg_type(std::string&& value);
  void set_msg_type(const char* value);
  void set_msg_type(const char* value, size_t size);
  std::string* mutable_msg_type();
  std::string* release_msg_type();
  void set_allocated_msg_type(std::string* msg_type);
  private:
  const std::string& _internal_msg_type() const;
  void _internal_set_msg_type(const std::string& value);
  std::string* _internal_mutable_msg_type();
  public:

  // optional .apollo.dreamview.WebsocketInfo websocket_info = 4;
  bool has_websocket_info() const;
  private:
  bool _internal_has_websocket_info() const;
  public:
  void clear_websocket_info();
  const ::apollo::dreamview::WebsocketInfo& websocket_info() const;
  ::apollo::dreamview::WebsocketInfo* release_websocket_info();
  ::apollo::dreamview::WebsocketInfo* mutable_websocket_info();
  void set_allocated_websocket_info(::apollo::dreamview::WebsocketInfo* websocket_info);
  private:
  const ::apollo::dreamview::WebsocketInfo& _internal_websocket_info() const;
  ::apollo::dreamview::WebsocketInfo* _internal_mutable_websocket_info();
  public:
  void unsafe_arena_set_allocated_websocket_info(
      ::apollo::dreamview::WebsocketInfo* websocket_info);
  ::apollo::dreamview::WebsocketInfo* unsafe_arena_release_websocket_info();

  // optional bool different_for_channels = 5 [default = false];
  bool has_different_for_channels() const;
  private:
  bool _internal_has_different_for_channels() const;
  public:
  void clear_different_for_channels();
  bool different_for_channels() const;
  void set_different_for_channels(bool value);
  private:
  bool _internal_different_for_channels() const;
  void _internal_set_different_for_channels(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.DataHandlerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ChannelInfo > channels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_type_;
  ::apollo::dreamview::WebsocketInfo* websocket_info_;
  bool different_for_channels_;
  friend struct ::TableStruct_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto;
};
// -------------------------------------------------------------------

class DataHandlerConf_DataHandlerInfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DataHandlerConf_DataHandlerInfoEntry_DoNotUse, 
    std::string, ::apollo::dreamview::DataHandlerInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DataHandlerConf_DataHandlerInfoEntry_DoNotUse, 
    std::string, ::apollo::dreamview::DataHandlerInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  DataHandlerConf_DataHandlerInfoEntry_DoNotUse();
  explicit DataHandlerConf_DataHandlerInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DataHandlerConf_DataHandlerInfoEntry_DoNotUse& other);
  static const DataHandlerConf_DataHandlerInfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DataHandlerConf_DataHandlerInfoEntry_DoNotUse*>(&_DataHandlerConf_DataHandlerInfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.DataHandlerConf.DataHandlerInfoEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto);
    return ::descriptor_table_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class DataHandlerConf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.DataHandlerConf) */ {
 public:
  inline DataHandlerConf() : DataHandlerConf(nullptr) {}
  virtual ~DataHandlerConf();

  DataHandlerConf(const DataHandlerConf& from);
  DataHandlerConf(DataHandlerConf&& from) noexcept
    : DataHandlerConf() {
    *this = ::std::move(from);
  }

  inline DataHandlerConf& operator=(const DataHandlerConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataHandlerConf& operator=(DataHandlerConf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataHandlerConf& default_instance();

  static inline const DataHandlerConf* internal_default_instance() {
    return reinterpret_cast<const DataHandlerConf*>(
               &_DataHandlerConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DataHandlerConf& a, DataHandlerConf& b) {
    a.Swap(&b);
  }
  inline void Swap(DataHandlerConf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataHandlerConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataHandlerConf* New() const final {
    return CreateMaybeMessage<DataHandlerConf>(nullptr);
  }

  DataHandlerConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataHandlerConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataHandlerConf& from);
  void MergeFrom(const DataHandlerConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataHandlerConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.DataHandlerConf";
  }
  protected:
  explicit DataHandlerConf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto);
    return ::descriptor_table_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDataHandlerInfoFieldNumber = 1,
  };
  // map<string, .apollo.dreamview.DataHandlerInfo> data_handler_info = 1;
  int data_handler_info_size() const;
  private:
  int _internal_data_handler_info_size() const;
  public:
  void clear_data_handler_info();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::DataHandlerInfo >&
      _internal_data_handler_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::DataHandlerInfo >*
      _internal_mutable_data_handler_info();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::DataHandlerInfo >&
      data_handler_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::DataHandlerInfo >*
      mutable_data_handler_info();

  // @@protoc_insertion_point(class_scope:apollo.dreamview.DataHandlerConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DataHandlerConf_DataHandlerInfoEntry_DoNotUse,
      std::string, ::apollo::dreamview::DataHandlerInfo,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> data_handler_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto;
};
// -------------------------------------------------------------------

class StreamData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.StreamData) */ {
 public:
  inline StreamData() : StreamData(nullptr) {}
  virtual ~StreamData();

  StreamData(const StreamData& from);
  StreamData(StreamData&& from) noexcept
    : StreamData() {
    *this = ::std::move(from);
  }

  inline StreamData& operator=(const StreamData& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamData& operator=(StreamData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamData& default_instance();

  static inline const StreamData* internal_default_instance() {
    return reinterpret_cast<const StreamData*>(
               &_StreamData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StreamData& a, StreamData& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamData* New() const final {
    return CreateMaybeMessage<StreamData>(nullptr);
  }

  StreamData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamData& from);
  void MergeFrom(const StreamData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.StreamData";
  }
  protected:
  explicit StreamData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto);
    return ::descriptor_table_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kActionFieldNumber = 2,
    kDataNameFieldNumber = 3,
    kChannelNameFieldNumber = 4,
    kDataFieldNumber = 5,
  };
  // optional string type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string action = 2;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // optional string data_name = 3;
  bool has_data_name() const;
  private:
  bool _internal_has_data_name() const;
  public:
  void clear_data_name();
  const std::string& data_name() const;
  void set_data_name(const std::string& value);
  void set_data_name(std::string&& value);
  void set_data_name(const char* value);
  void set_data_name(const char* value, size_t size);
  std::string* mutable_data_name();
  std::string* release_data_name();
  void set_allocated_data_name(std::string* data_name);
  private:
  const std::string& _internal_data_name() const;
  void _internal_set_data_name(const std::string& value);
  std::string* _internal_mutable_data_name();
  public:

  // optional string channel_name = 4;
  bool has_channel_name() const;
  private:
  bool _internal_has_channel_name() const;
  public:
  void clear_channel_name();
  const std::string& channel_name() const;
  void set_channel_name(const std::string& value);
  void set_channel_name(std::string&& value);
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  std::string* mutable_channel_name();
  std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // optional bytes data = 5;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.StreamData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WebsocketInfo

// optional string websocket_name = 1;
inline bool WebsocketInfo::_internal_has_websocket_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WebsocketInfo::has_websocket_name() const {
  return _internal_has_websocket_name();
}
inline void WebsocketInfo::clear_websocket_name() {
  websocket_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WebsocketInfo::websocket_name() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.WebsocketInfo.websocket_name)
  return _internal_websocket_name();
}
inline void WebsocketInfo::set_websocket_name(const std::string& value) {
  _internal_set_websocket_name(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.WebsocketInfo.websocket_name)
}
inline std::string* WebsocketInfo::mutable_websocket_name() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.WebsocketInfo.websocket_name)
  return _internal_mutable_websocket_name();
}
inline const std::string& WebsocketInfo::_internal_websocket_name() const {
  return websocket_name_.Get();
}
inline void WebsocketInfo::_internal_set_websocket_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  websocket_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WebsocketInfo::set_websocket_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  websocket_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.WebsocketInfo.websocket_name)
}
inline void WebsocketInfo::set_websocket_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  websocket_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.WebsocketInfo.websocket_name)
}
inline void WebsocketInfo::set_websocket_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  websocket_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.WebsocketInfo.websocket_name)
}
inline std::string* WebsocketInfo::_internal_mutable_websocket_name() {
  _has_bits_[0] |= 0x00000001u;
  return websocket_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WebsocketInfo::release_websocket_name() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.WebsocketInfo.websocket_name)
  if (!_internal_has_websocket_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return websocket_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WebsocketInfo::set_allocated_websocket_name(std::string* websocket_name) {
  if (websocket_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  websocket_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), websocket_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.WebsocketInfo.websocket_name)
}

// optional string websocket_pipe = 2;
inline bool WebsocketInfo::_internal_has_websocket_pipe() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WebsocketInfo::has_websocket_pipe() const {
  return _internal_has_websocket_pipe();
}
inline void WebsocketInfo::clear_websocket_pipe() {
  websocket_pipe_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WebsocketInfo::websocket_pipe() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.WebsocketInfo.websocket_pipe)
  return _internal_websocket_pipe();
}
inline void WebsocketInfo::set_websocket_pipe(const std::string& value) {
  _internal_set_websocket_pipe(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.WebsocketInfo.websocket_pipe)
}
inline std::string* WebsocketInfo::mutable_websocket_pipe() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.WebsocketInfo.websocket_pipe)
  return _internal_mutable_websocket_pipe();
}
inline const std::string& WebsocketInfo::_internal_websocket_pipe() const {
  return websocket_pipe_.Get();
}
inline void WebsocketInfo::_internal_set_websocket_pipe(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  websocket_pipe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WebsocketInfo::set_websocket_pipe(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  websocket_pipe_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.WebsocketInfo.websocket_pipe)
}
inline void WebsocketInfo::set_websocket_pipe(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  websocket_pipe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.WebsocketInfo.websocket_pipe)
}
inline void WebsocketInfo::set_websocket_pipe(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  websocket_pipe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.WebsocketInfo.websocket_pipe)
}
inline std::string* WebsocketInfo::_internal_mutable_websocket_pipe() {
  _has_bits_[0] |= 0x00000002u;
  return websocket_pipe_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WebsocketInfo::release_websocket_pipe() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.WebsocketInfo.websocket_pipe)
  if (!_internal_has_websocket_pipe()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return websocket_pipe_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WebsocketInfo::set_allocated_websocket_pipe(std::string* websocket_pipe) {
  if (websocket_pipe != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  websocket_pipe_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), websocket_pipe,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.WebsocketInfo.websocket_pipe)
}

// -------------------------------------------------------------------

// ChannelInfo

// optional string channel_name = 1;
inline bool ChannelInfo::_internal_has_channel_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChannelInfo::has_channel_name() const {
  return _internal_has_channel_name();
}
inline void ChannelInfo::clear_channel_name() {
  channel_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChannelInfo::channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ChannelInfo.channel_name)
  return _internal_channel_name();
}
inline void ChannelInfo::set_channel_name(const std::string& value) {
  _internal_set_channel_name(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ChannelInfo.channel_name)
}
inline std::string* ChannelInfo::mutable_channel_name() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ChannelInfo.channel_name)
  return _internal_mutable_channel_name();
}
inline const std::string& ChannelInfo::_internal_channel_name() const {
  return channel_name_.Get();
}
inline void ChannelInfo::_internal_set_channel_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChannelInfo::set_channel_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.ChannelInfo.channel_name)
}
inline void ChannelInfo::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.ChannelInfo.channel_name)
}
inline void ChannelInfo::set_channel_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.ChannelInfo.channel_name)
}
inline std::string* ChannelInfo::_internal_mutable_channel_name() {
  _has_bits_[0] |= 0x00000001u;
  return channel_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChannelInfo::release_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.ChannelInfo.channel_name)
  if (!_internal_has_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return channel_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChannelInfo::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.ChannelInfo.channel_name)
}

// optional string proto_path = 2;
inline bool ChannelInfo::_internal_has_proto_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChannelInfo::has_proto_path() const {
  return _internal_has_proto_path();
}
inline void ChannelInfo::clear_proto_path() {
  proto_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChannelInfo::proto_path() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ChannelInfo.proto_path)
  return _internal_proto_path();
}
inline void ChannelInfo::set_proto_path(const std::string& value) {
  _internal_set_proto_path(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ChannelInfo.proto_path)
}
inline std::string* ChannelInfo::mutable_proto_path() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ChannelInfo.proto_path)
  return _internal_mutable_proto_path();
}
inline const std::string& ChannelInfo::_internal_proto_path() const {
  return proto_path_.Get();
}
inline void ChannelInfo::_internal_set_proto_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  proto_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChannelInfo::set_proto_path(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  proto_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.ChannelInfo.proto_path)
}
inline void ChannelInfo::set_proto_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  proto_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.ChannelInfo.proto_path)
}
inline void ChannelInfo::set_proto_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  proto_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.ChannelInfo.proto_path)
}
inline std::string* ChannelInfo::_internal_mutable_proto_path() {
  _has_bits_[0] |= 0x00000002u;
  return proto_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChannelInfo::release_proto_path() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.ChannelInfo.proto_path)
  if (!_internal_has_proto_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return proto_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChannelInfo::set_allocated_proto_path(std::string* proto_path) {
  if (proto_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  proto_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proto_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.ChannelInfo.proto_path)
}

// optional string msg_type = 3;
inline bool ChannelInfo::_internal_has_msg_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChannelInfo::has_msg_type() const {
  return _internal_has_msg_type();
}
inline void ChannelInfo::clear_msg_type() {
  msg_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ChannelInfo::msg_type() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ChannelInfo.msg_type)
  return _internal_msg_type();
}
inline void ChannelInfo::set_msg_type(const std::string& value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ChannelInfo.msg_type)
}
inline std::string* ChannelInfo::mutable_msg_type() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ChannelInfo.msg_type)
  return _internal_mutable_msg_type();
}
inline const std::string& ChannelInfo::_internal_msg_type() const {
  return msg_type_.Get();
}
inline void ChannelInfo::_internal_set_msg_type(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  msg_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChannelInfo::set_msg_type(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  msg_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.ChannelInfo.msg_type)
}
inline void ChannelInfo::set_msg_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  msg_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.ChannelInfo.msg_type)
}
inline void ChannelInfo::set_msg_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  msg_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.ChannelInfo.msg_type)
}
inline std::string* ChannelInfo::_internal_mutable_msg_type() {
  _has_bits_[0] |= 0x00000004u;
  return msg_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChannelInfo::release_msg_type() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.ChannelInfo.msg_type)
  if (!_internal_has_msg_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return msg_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChannelInfo::set_allocated_msg_type(std::string* msg_type) {
  if (msg_type != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  msg_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.ChannelInfo.msg_type)
}

// -------------------------------------------------------------------

// DataHandlerInfo

// optional string data_name = 1;
inline bool DataHandlerInfo::_internal_has_data_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DataHandlerInfo::has_data_name() const {
  return _internal_has_data_name();
}
inline void DataHandlerInfo::clear_data_name() {
  data_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataHandlerInfo::data_name() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DataHandlerInfo.data_name)
  return _internal_data_name();
}
inline void DataHandlerInfo::set_data_name(const std::string& value) {
  _internal_set_data_name(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.DataHandlerInfo.data_name)
}
inline std::string* DataHandlerInfo::mutable_data_name() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.DataHandlerInfo.data_name)
  return _internal_mutable_data_name();
}
inline const std::string& DataHandlerInfo::_internal_data_name() const {
  return data_name_.Get();
}
inline void DataHandlerInfo::_internal_set_data_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DataHandlerInfo::set_data_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.DataHandlerInfo.data_name)
}
inline void DataHandlerInfo::set_data_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.DataHandlerInfo.data_name)
}
inline void DataHandlerInfo::set_data_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.DataHandlerInfo.data_name)
}
inline std::string* DataHandlerInfo::_internal_mutable_data_name() {
  _has_bits_[0] |= 0x00000001u;
  return data_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DataHandlerInfo::release_data_name() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.DataHandlerInfo.data_name)
  if (!_internal_has_data_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataHandlerInfo::set_allocated_data_name(std::string* data_name) {
  if (data_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.DataHandlerInfo.data_name)
}

// optional string proto_path = 2;
inline bool DataHandlerInfo::_internal_has_proto_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DataHandlerInfo::has_proto_path() const {
  return _internal_has_proto_path();
}
inline void DataHandlerInfo::clear_proto_path() {
  proto_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DataHandlerInfo::proto_path() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DataHandlerInfo.proto_path)
  return _internal_proto_path();
}
inline void DataHandlerInfo::set_proto_path(const std::string& value) {
  _internal_set_proto_path(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.DataHandlerInfo.proto_path)
}
inline std::string* DataHandlerInfo::mutable_proto_path() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.DataHandlerInfo.proto_path)
  return _internal_mutable_proto_path();
}
inline const std::string& DataHandlerInfo::_internal_proto_path() const {
  return proto_path_.Get();
}
inline void DataHandlerInfo::_internal_set_proto_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  proto_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DataHandlerInfo::set_proto_path(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  proto_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.DataHandlerInfo.proto_path)
}
inline void DataHandlerInfo::set_proto_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  proto_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.DataHandlerInfo.proto_path)
}
inline void DataHandlerInfo::set_proto_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  proto_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.DataHandlerInfo.proto_path)
}
inline std::string* DataHandlerInfo::_internal_mutable_proto_path() {
  _has_bits_[0] |= 0x00000002u;
  return proto_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DataHandlerInfo::release_proto_path() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.DataHandlerInfo.proto_path)
  if (!_internal_has_proto_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return proto_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataHandlerInfo::set_allocated_proto_path(std::string* proto_path) {
  if (proto_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  proto_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proto_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.DataHandlerInfo.proto_path)
}

// optional string msg_type = 3;
inline bool DataHandlerInfo::_internal_has_msg_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DataHandlerInfo::has_msg_type() const {
  return _internal_has_msg_type();
}
inline void DataHandlerInfo::clear_msg_type() {
  msg_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DataHandlerInfo::msg_type() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DataHandlerInfo.msg_type)
  return _internal_msg_type();
}
inline void DataHandlerInfo::set_msg_type(const std::string& value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.DataHandlerInfo.msg_type)
}
inline std::string* DataHandlerInfo::mutable_msg_type() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.DataHandlerInfo.msg_type)
  return _internal_mutable_msg_type();
}
inline const std::string& DataHandlerInfo::_internal_msg_type() const {
  return msg_type_.Get();
}
inline void DataHandlerInfo::_internal_set_msg_type(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  msg_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DataHandlerInfo::set_msg_type(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  msg_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.DataHandlerInfo.msg_type)
}
inline void DataHandlerInfo::set_msg_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  msg_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.DataHandlerInfo.msg_type)
}
inline void DataHandlerInfo::set_msg_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  msg_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.DataHandlerInfo.msg_type)
}
inline std::string* DataHandlerInfo::_internal_mutable_msg_type() {
  _has_bits_[0] |= 0x00000004u;
  return msg_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DataHandlerInfo::release_msg_type() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.DataHandlerInfo.msg_type)
  if (!_internal_has_msg_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return msg_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataHandlerInfo::set_allocated_msg_type(std::string* msg_type) {
  if (msg_type != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  msg_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.DataHandlerInfo.msg_type)
}

// optional .apollo.dreamview.WebsocketInfo websocket_info = 4;
inline bool DataHandlerInfo::_internal_has_websocket_info() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || websocket_info_ != nullptr);
  return value;
}
inline bool DataHandlerInfo::has_websocket_info() const {
  return _internal_has_websocket_info();
}
inline void DataHandlerInfo::clear_websocket_info() {
  if (websocket_info_ != nullptr) websocket_info_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::dreamview::WebsocketInfo& DataHandlerInfo::_internal_websocket_info() const {
  const ::apollo::dreamview::WebsocketInfo* p = websocket_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::dreamview::WebsocketInfo&>(
      ::apollo::dreamview::_WebsocketInfo_default_instance_);
}
inline const ::apollo::dreamview::WebsocketInfo& DataHandlerInfo::websocket_info() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DataHandlerInfo.websocket_info)
  return _internal_websocket_info();
}
inline void DataHandlerInfo::unsafe_arena_set_allocated_websocket_info(
    ::apollo::dreamview::WebsocketInfo* websocket_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(websocket_info_);
  }
  websocket_info_ = websocket_info;
  if (websocket_info) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.dreamview.DataHandlerInfo.websocket_info)
}
inline ::apollo::dreamview::WebsocketInfo* DataHandlerInfo::release_websocket_info() {
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::dreamview::WebsocketInfo* temp = websocket_info_;
  websocket_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::dreamview::WebsocketInfo* DataHandlerInfo::unsafe_arena_release_websocket_info() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.DataHandlerInfo.websocket_info)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::dreamview::WebsocketInfo* temp = websocket_info_;
  websocket_info_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::WebsocketInfo* DataHandlerInfo::_internal_mutable_websocket_info() {
  _has_bits_[0] |= 0x00000008u;
  if (websocket_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::WebsocketInfo>(GetArena());
    websocket_info_ = p;
  }
  return websocket_info_;
}
inline ::apollo::dreamview::WebsocketInfo* DataHandlerInfo::mutable_websocket_info() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.DataHandlerInfo.websocket_info)
  return _internal_mutable_websocket_info();
}
inline void DataHandlerInfo::set_allocated_websocket_info(::apollo::dreamview::WebsocketInfo* websocket_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete websocket_info_;
  }
  if (websocket_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(websocket_info);
    if (message_arena != submessage_arena) {
      websocket_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, websocket_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  websocket_info_ = websocket_info;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.DataHandlerInfo.websocket_info)
}

// optional bool different_for_channels = 5 [default = false];
inline bool DataHandlerInfo::_internal_has_different_for_channels() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DataHandlerInfo::has_different_for_channels() const {
  return _internal_has_different_for_channels();
}
inline void DataHandlerInfo::clear_different_for_channels() {
  different_for_channels_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool DataHandlerInfo::_internal_different_for_channels() const {
  return different_for_channels_;
}
inline bool DataHandlerInfo::different_for_channels() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DataHandlerInfo.different_for_channels)
  return _internal_different_for_channels();
}
inline void DataHandlerInfo::_internal_set_different_for_channels(bool value) {
  _has_bits_[0] |= 0x00000010u;
  different_for_channels_ = value;
}
inline void DataHandlerInfo::set_different_for_channels(bool value) {
  _internal_set_different_for_channels(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.DataHandlerInfo.different_for_channels)
}

// repeated .apollo.dreamview.ChannelInfo channels = 6;
inline int DataHandlerInfo::_internal_channels_size() const {
  return channels_.size();
}
inline int DataHandlerInfo::channels_size() const {
  return _internal_channels_size();
}
inline void DataHandlerInfo::clear_channels() {
  channels_.Clear();
}
inline ::apollo::dreamview::ChannelInfo* DataHandlerInfo::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.DataHandlerInfo.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ChannelInfo >*
DataHandlerInfo::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.DataHandlerInfo.channels)
  return &channels_;
}
inline const ::apollo::dreamview::ChannelInfo& DataHandlerInfo::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::apollo::dreamview::ChannelInfo& DataHandlerInfo::channels(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DataHandlerInfo.channels)
  return _internal_channels(index);
}
inline ::apollo::dreamview::ChannelInfo* DataHandlerInfo::_internal_add_channels() {
  return channels_.Add();
}
inline ::apollo::dreamview::ChannelInfo* DataHandlerInfo::add_channels() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.DataHandlerInfo.channels)
  return _internal_add_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ChannelInfo >&
DataHandlerInfo::channels() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.DataHandlerInfo.channels)
  return channels_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DataHandlerConf

// map<string, .apollo.dreamview.DataHandlerInfo> data_handler_info = 1;
inline int DataHandlerConf::_internal_data_handler_info_size() const {
  return data_handler_info_.size();
}
inline int DataHandlerConf::data_handler_info_size() const {
  return _internal_data_handler_info_size();
}
inline void DataHandlerConf::clear_data_handler_info() {
  data_handler_info_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::DataHandlerInfo >&
DataHandlerConf::_internal_data_handler_info() const {
  return data_handler_info_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::DataHandlerInfo >&
DataHandlerConf::data_handler_info() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.DataHandlerConf.data_handler_info)
  return _internal_data_handler_info();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::DataHandlerInfo >*
DataHandlerConf::_internal_mutable_data_handler_info() {
  return data_handler_info_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::DataHandlerInfo >*
DataHandlerConf::mutable_data_handler_info() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.DataHandlerConf.data_handler_info)
  return _internal_mutable_data_handler_info();
}

// -------------------------------------------------------------------

// StreamData

// optional string type = 1;
inline bool StreamData::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StreamData::has_type() const {
  return _internal_has_type();
}
inline void StreamData::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StreamData::type() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.StreamData.type)
  return _internal_type();
}
inline void StreamData::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.StreamData.type)
}
inline std::string* StreamData::mutable_type() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.StreamData.type)
  return _internal_mutable_type();
}
inline const std::string& StreamData::_internal_type() const {
  return type_.Get();
}
inline void StreamData::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StreamData::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.StreamData.type)
}
inline void StreamData::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.StreamData.type)
}
inline void StreamData::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.StreamData.type)
}
inline std::string* StreamData::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StreamData::release_type() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.StreamData.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamData::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.StreamData.type)
}

// optional string action = 2;
inline bool StreamData::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StreamData::has_action() const {
  return _internal_has_action();
}
inline void StreamData::clear_action() {
  action_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StreamData::action() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.StreamData.action)
  return _internal_action();
}
inline void StreamData::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.StreamData.action)
}
inline std::string* StreamData::mutable_action() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.StreamData.action)
  return _internal_mutable_action();
}
inline const std::string& StreamData::_internal_action() const {
  return action_.Get();
}
inline void StreamData::_internal_set_action(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StreamData::set_action(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  action_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.StreamData.action)
}
inline void StreamData::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.StreamData.action)
}
inline void StreamData::set_action(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.StreamData.action)
}
inline std::string* StreamData::_internal_mutable_action() {
  _has_bits_[0] |= 0x00000002u;
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StreamData::release_action() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.StreamData.action)
  if (!_internal_has_action()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return action_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamData::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.StreamData.action)
}

// optional string data_name = 3;
inline bool StreamData::_internal_has_data_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StreamData::has_data_name() const {
  return _internal_has_data_name();
}
inline void StreamData::clear_data_name() {
  data_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& StreamData::data_name() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.StreamData.data_name)
  return _internal_data_name();
}
inline void StreamData::set_data_name(const std::string& value) {
  _internal_set_data_name(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.StreamData.data_name)
}
inline std::string* StreamData::mutable_data_name() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.StreamData.data_name)
  return _internal_mutable_data_name();
}
inline const std::string& StreamData::_internal_data_name() const {
  return data_name_.Get();
}
inline void StreamData::_internal_set_data_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  data_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StreamData::set_data_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  data_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.StreamData.data_name)
}
inline void StreamData::set_data_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  data_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.StreamData.data_name)
}
inline void StreamData::set_data_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  data_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.StreamData.data_name)
}
inline std::string* StreamData::_internal_mutable_data_name() {
  _has_bits_[0] |= 0x00000004u;
  return data_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StreamData::release_data_name() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.StreamData.data_name)
  if (!_internal_has_data_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return data_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamData::set_allocated_data_name(std::string* data_name) {
  if (data_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.StreamData.data_name)
}

// optional string channel_name = 4;
inline bool StreamData::_internal_has_channel_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StreamData::has_channel_name() const {
  return _internal_has_channel_name();
}
inline void StreamData::clear_channel_name() {
  channel_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& StreamData::channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.StreamData.channel_name)
  return _internal_channel_name();
}
inline void StreamData::set_channel_name(const std::string& value) {
  _internal_set_channel_name(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.StreamData.channel_name)
}
inline std::string* StreamData::mutable_channel_name() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.StreamData.channel_name)
  return _internal_mutable_channel_name();
}
inline const std::string& StreamData::_internal_channel_name() const {
  return channel_name_.Get();
}
inline void StreamData::_internal_set_channel_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StreamData::set_channel_name(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  channel_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.StreamData.channel_name)
}
inline void StreamData::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.StreamData.channel_name)
}
inline void StreamData::set_channel_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.StreamData.channel_name)
}
inline std::string* StreamData::_internal_mutable_channel_name() {
  _has_bits_[0] |= 0x00000008u;
  return channel_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StreamData::release_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.StreamData.channel_name)
  if (!_internal_has_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return channel_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamData::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.StreamData.channel_name)
}

// optional bytes data = 5;
inline bool StreamData::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StreamData::has_data() const {
  return _internal_has_data();
}
inline void StreamData::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& StreamData::data() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.StreamData.data)
  return _internal_data();
}
inline void StreamData::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.StreamData.data)
}
inline std::string* StreamData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.StreamData.data)
  return _internal_mutable_data();
}
inline const std::string& StreamData::_internal_data() const {
  return data_.Get();
}
inline void StreamData::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StreamData::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.StreamData.data)
}
inline void StreamData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.StreamData.data)
}
inline void StreamData::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.StreamData.data)
}
inline std::string* StreamData::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000010u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StreamData::release_data() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.StreamData.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.StreamData.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto
