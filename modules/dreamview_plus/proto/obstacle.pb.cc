// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview_plus/proto/obstacle.proto

#include "modules/dreamview_plus/proto/obstacle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Object_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Obstacles_SensorMeasurementsEntry_DoNotUse_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorMeasurements_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto;
namespace apollo {
namespace dreamview {
class Obstacles_SensorMeasurementsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Obstacles_SensorMeasurementsEntry_DoNotUse> _instance;
} _Obstacles_SensorMeasurementsEntry_DoNotUse_default_instance_;
class ObstaclesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Obstacles> _instance;
} _Obstacles_default_instance_;
}  // namespace dreamview
}  // namespace apollo
static void InitDefaultsscc_info_Obstacles_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Obstacles_default_instance_;
    new (ptr) ::apollo::dreamview::Obstacles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Obstacles_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Obstacles_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto}, {
      &scc_info_Object_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,
      &scc_info_Obstacles_SensorMeasurementsEntry_DoNotUse_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto.base,}};

static void InitDefaultsscc_info_Obstacles_SensorMeasurementsEntry_DoNotUse_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Obstacles_SensorMeasurementsEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::dreamview::Obstacles_SensorMeasurementsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Obstacles_SensorMeasurementsEntry_DoNotUse_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Obstacles_SensorMeasurementsEntry_DoNotUse_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto}, {
      &scc_info_SensorMeasurements_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Obstacles_SensorMeasurementsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Obstacles_SensorMeasurementsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Obstacles_SensorMeasurementsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Obstacles_SensorMeasurementsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Obstacles, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Obstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Obstacles, obstacle_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Obstacles, auto_driving_car_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Obstacles, sensor_measurements_),
  ~0u,
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::dreamview::Obstacles_SensorMeasurementsEntry_DoNotUse)},
  { 9, 17, sizeof(::apollo::dreamview::Obstacles)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_Obstacles_SensorMeasurementsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_Obstacles_default_instance_),
};

const char descriptor_table_protodef_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+modules/dreamview_plus/proto/obstacle."
  "proto\022\020apollo.dreamview\032.modules/dreamvi"
  "ew/proto/simulation_world.proto\"\236\002\n\tObst"
  "acles\022*\n\010obstacle\030\001 \003(\0132\030.apollo.dreamvi"
  "ew.Object\0222\n\020auto_driving_car\030\002 \001(\0132\030.ap"
  "ollo.dreamview.Object\022P\n\023sensor_measurem"
  "ents\030\003 \003(\01323.apollo.dreamview.Obstacles."
  "SensorMeasurementsEntry\032_\n\027SensorMeasure"
  "mentsEntry\022\013\n\003key\030\001 \001(\t\0223\n\005value\030\002 \001(\0132$"
  ".apollo.dreamview.SensorMeasurements:\0028\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto_deps[1] = {
  &::descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto_sccs[2] = {
  &scc_info_Obstacles_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto.base,
  &scc_info_Obstacles_SensorMeasurementsEntry_DoNotUse_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto = {
  false, false, descriptor_table_protodef_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto, "modules/dreamview_plus/proto/obstacle.proto", 400,
  &descriptor_table_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto_once, descriptor_table_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto_sccs, descriptor_table_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto::offsets,
  file_level_metadata_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto, 2, file_level_enum_descriptors_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto, file_level_service_descriptors_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto)), true);
namespace apollo {
namespace dreamview {

// ===================================================================

Obstacles_SensorMeasurementsEntry_DoNotUse::Obstacles_SensorMeasurementsEntry_DoNotUse() {}
Obstacles_SensorMeasurementsEntry_DoNotUse::Obstacles_SensorMeasurementsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Obstacles_SensorMeasurementsEntry_DoNotUse::MergeFrom(const Obstacles_SensorMeasurementsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Obstacles_SensorMeasurementsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Obstacles_SensorMeasurementsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class Obstacles::_Internal {
 public:
  using HasBits = decltype(std::declval<Obstacles>()._has_bits_);
  static const ::apollo::dreamview::Object& auto_driving_car(const Obstacles* msg);
  static void set_has_auto_driving_car(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::dreamview::Object&
Obstacles::_Internal::auto_driving_car(const Obstacles* msg) {
  return *msg->auto_driving_car_;
}
void Obstacles::clear_obstacle() {
  obstacle_.Clear();
}
void Obstacles::clear_auto_driving_car() {
  if (auto_driving_car_ != nullptr) auto_driving_car_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Obstacles::clear_sensor_measurements() {
  sensor_measurements_.Clear();
}
Obstacles::Obstacles(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  obstacle_(arena),
  sensor_measurements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.Obstacles)
}
Obstacles::Obstacles(const Obstacles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      obstacle_(from.obstacle_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sensor_measurements_.MergeFrom(from.sensor_measurements_);
  if (from._internal_has_auto_driving_car()) {
    auto_driving_car_ = new ::apollo::dreamview::Object(*from.auto_driving_car_);
  } else {
    auto_driving_car_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Obstacles)
}

void Obstacles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Obstacles_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto.base);
  auto_driving_car_ = nullptr;
}

Obstacles::~Obstacles() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Obstacles)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Obstacles::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete auto_driving_car_;
}

void Obstacles::ArenaDtor(void* object) {
  Obstacles* _this = reinterpret_cast< Obstacles* >(object);
  (void)_this;
}
void Obstacles::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Obstacles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Obstacles& Obstacles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Obstacles_modules_2fdreamview_5fplus_2fproto_2fobstacle_2eproto.base);
  return *internal_default_instance();
}


void Obstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Obstacles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacle_.Clear();
  sensor_measurements_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(auto_driving_car_ != nullptr);
    auto_driving_car_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Obstacles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.dreamview.Object obstacle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.dreamview.Object auto_driving_car = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_auto_driving_car(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .apollo.dreamview.SensorMeasurements> sensor_measurements = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&sensor_measurements_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Obstacles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Obstacles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dreamview.Object obstacle = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obstacle_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_obstacle(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.dreamview.Object auto_driving_car = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::auto_driving_car(this), target, stream);
  }

  // map<string, .apollo.dreamview.SensorMeasurements> sensor_measurements = 3;
  if (!this->_internal_sensor_measurements().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::SensorMeasurements >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.Obstacles.SensorMeasurementsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_sensor_measurements().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_sensor_measurements().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::SensorMeasurements >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::SensorMeasurements >::const_iterator
          it = this->_internal_sensor_measurements().begin();
          it != this->_internal_sensor_measurements().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Obstacles_SensorMeasurementsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::SensorMeasurements >::const_iterator
          it = this->_internal_sensor_measurements().begin();
          it != this->_internal_sensor_measurements().end(); ++it) {
        target = Obstacles_SensorMeasurementsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Obstacles)
  return target;
}

size_t Obstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Obstacles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dreamview.Object obstacle = 1;
  total_size += 1UL * this->_internal_obstacle_size();
  for (const auto& msg : this->obstacle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .apollo.dreamview.SensorMeasurements> sensor_measurements = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sensor_measurements_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::SensorMeasurements >::const_iterator
      it = this->_internal_sensor_measurements().begin();
      it != this->_internal_sensor_measurements().end(); ++it) {
    total_size += Obstacles_SensorMeasurementsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional .apollo.dreamview.Object auto_driving_car = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auto_driving_car_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Obstacles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Obstacles)
  GOOGLE_DCHECK_NE(&from, this);
  const Obstacles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Obstacles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Obstacles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Obstacles)
    MergeFrom(*source);
  }
}

void Obstacles::MergeFrom(const Obstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Obstacles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacle_.MergeFrom(from.obstacle_);
  sensor_measurements_.MergeFrom(from.sensor_measurements_);
  if (from._internal_has_auto_driving_car()) {
    _internal_mutable_auto_driving_car()->::apollo::dreamview::Object::MergeFrom(from._internal_auto_driving_car());
  }
}

void Obstacles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Obstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacles::CopyFrom(const Obstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Obstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacles::IsInitialized() const {
  return true;
}

void Obstacles::InternalSwap(Obstacles* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obstacle_.InternalSwap(&other->obstacle_);
  sensor_measurements_.Swap(&other->sensor_measurements_);
  swap(auto_driving_car_, other->auto_driving_car_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Obstacles::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Obstacles_SensorMeasurementsEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::dreamview::Obstacles_SensorMeasurementsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::Obstacles_SensorMeasurementsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Obstacles* Arena::CreateMaybeMessage< ::apollo::dreamview::Obstacles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::Obstacles >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
