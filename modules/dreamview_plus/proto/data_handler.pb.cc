// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview_plus/proto/data_handler.proto

#include "modules/dreamview_plus/proto/data_handler.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelInfo_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataHandlerConf_DataHandlerInfoEntry_DoNotUse_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataHandlerInfo_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WebsocketInfo_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto;
namespace apollo {
namespace dreamview {
class WebsocketInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WebsocketInfo> _instance;
} _WebsocketInfo_default_instance_;
class ChannelInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelInfo> _instance;
} _ChannelInfo_default_instance_;
class DataHandlerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataHandlerInfo> _instance;
} _DataHandlerInfo_default_instance_;
class DataHandlerConf_DataHandlerInfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataHandlerConf_DataHandlerInfoEntry_DoNotUse> _instance;
} _DataHandlerConf_DataHandlerInfoEntry_DoNotUse_default_instance_;
class DataHandlerConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataHandlerConf> _instance;
} _DataHandlerConf_default_instance_;
class StreamDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamData> _instance;
} _StreamData_default_instance_;
}  // namespace dreamview
}  // namespace apollo
static void InitDefaultsscc_info_ChannelInfo_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_ChannelInfo_default_instance_;
    new (ptr) ::apollo::dreamview::ChannelInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelInfo_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelInfo_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto}, {}};

static void InitDefaultsscc_info_DataHandlerConf_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_DataHandlerConf_default_instance_;
    new (ptr) ::apollo::dreamview::DataHandlerConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataHandlerConf_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DataHandlerConf_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto}, {
      &scc_info_DataHandlerConf_DataHandlerInfoEntry_DoNotUse_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto.base,}};

static void InitDefaultsscc_info_DataHandlerConf_DataHandlerInfoEntry_DoNotUse_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_DataHandlerConf_DataHandlerInfoEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::dreamview::DataHandlerConf_DataHandlerInfoEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataHandlerConf_DataHandlerInfoEntry_DoNotUse_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DataHandlerConf_DataHandlerInfoEntry_DoNotUse_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto}, {
      &scc_info_DataHandlerInfo_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto.base,}};

static void InitDefaultsscc_info_DataHandlerInfo_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_DataHandlerInfo_default_instance_;
    new (ptr) ::apollo::dreamview::DataHandlerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataHandlerInfo_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DataHandlerInfo_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto}, {
      &scc_info_WebsocketInfo_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto.base,
      &scc_info_ChannelInfo_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto.base,}};

static void InitDefaultsscc_info_StreamData_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_StreamData_default_instance_;
    new (ptr) ::apollo::dreamview::StreamData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamData_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamData_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto}, {}};

static void InitDefaultsscc_info_WebsocketInfo_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_WebsocketInfo_default_instance_;
    new (ptr) ::apollo::dreamview::WebsocketInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WebsocketInfo_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WebsocketInfo_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::WebsocketInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::WebsocketInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::WebsocketInfo, websocket_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::WebsocketInfo, websocket_pipe_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ChannelInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ChannelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ChannelInfo, channel_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ChannelInfo, proto_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ChannelInfo, msg_type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataHandlerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataHandlerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataHandlerInfo, data_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataHandlerInfo, proto_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataHandlerInfo, msg_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataHandlerInfo, websocket_info_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataHandlerInfo, different_for_channels_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataHandlerInfo, channels_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataHandlerConf_DataHandlerInfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataHandlerConf_DataHandlerInfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataHandlerConf_DataHandlerInfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataHandlerConf_DataHandlerInfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataHandlerConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataHandlerConf, data_handler_info_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::StreamData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::StreamData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::StreamData, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::StreamData, action_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::StreamData, data_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::StreamData, channel_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::StreamData, data_),
  0,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::dreamview::WebsocketInfo)},
  { 9, 17, sizeof(::apollo::dreamview::ChannelInfo)},
  { 20, 31, sizeof(::apollo::dreamview::DataHandlerInfo)},
  { 37, 44, sizeof(::apollo::dreamview::DataHandlerConf_DataHandlerInfoEntry_DoNotUse)},
  { 46, -1, sizeof(::apollo::dreamview::DataHandlerConf)},
  { 52, 62, sizeof(::apollo::dreamview::StreamData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_WebsocketInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_ChannelInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_DataHandlerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_DataHandlerConf_DataHandlerInfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_DataHandlerConf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_StreamData_default_instance_),
};

const char descriptor_table_protodef_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/modules/dreamview_plus/proto/data_hand"
  "ler.proto\022\020apollo.dreamview\"\?\n\rWebsocket"
  "Info\022\026\n\016websocket_name\030\001 \001(\t\022\026\n\016websocke"
  "t_pipe\030\002 \001(\t\"I\n\013ChannelInfo\022\024\n\014channel_n"
  "ame\030\001 \001(\t\022\022\n\nproto_path\030\002 \001(\t\022\020\n\010msg_typ"
  "e\030\003 \001(\t\"\333\001\n\017DataHandlerInfo\022\021\n\tdata_name"
  "\030\001 \001(\t\022\022\n\nproto_path\030\002 \001(\t\022\020\n\010msg_type\030\003"
  " \001(\t\0227\n\016websocket_info\030\004 \001(\0132\037.apollo.dr"
  "eamview.WebsocketInfo\022%\n\026different_for_c"
  "hannels\030\005 \001(\010:\005false\022/\n\010channels\030\006 \003(\0132\035"
  ".apollo.dreamview.ChannelInfo\"\277\001\n\017DataHa"
  "ndlerConf\022Q\n\021data_handler_info\030\001 \003(\01326.a"
  "pollo.dreamview.DataHandlerConf.DataHand"
  "lerInfoEntry\032Y\n\024DataHandlerInfoEntry\022\013\n\003"
  "key\030\001 \001(\t\0220\n\005value\030\002 \001(\0132!.apollo.dreamv"
  "iew.DataHandlerInfo:\0028\001\"a\n\nStreamData\022\014\n"
  "\004type\030\001 \001(\t\022\016\n\006action\030\002 \001(\t\022\021\n\tdata_name"
  "\030\003 \001(\t\022\024\n\014channel_name\030\004 \001(\t\022\014\n\004data\030\005 \001"
  "(\014"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto_sccs[6] = {
  &scc_info_ChannelInfo_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto.base,
  &scc_info_DataHandlerConf_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto.base,
  &scc_info_DataHandlerConf_DataHandlerInfoEntry_DoNotUse_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto.base,
  &scc_info_DataHandlerInfo_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto.base,
  &scc_info_StreamData_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto.base,
  &scc_info_WebsocketInfo_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto = {
  false, false, descriptor_table_protodef_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto, "modules/dreamview_plus/proto/data_handler.proto", 722,
  &descriptor_table_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto_once, descriptor_table_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto_sccs, descriptor_table_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto::offsets,
  file_level_metadata_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto, 6, file_level_enum_descriptors_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto, file_level_service_descriptors_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto)), true);
namespace apollo {
namespace dreamview {

// ===================================================================

class WebsocketInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<WebsocketInfo>()._has_bits_);
  static void set_has_websocket_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_websocket_pipe(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WebsocketInfo::WebsocketInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.WebsocketInfo)
}
WebsocketInfo::WebsocketInfo(const WebsocketInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  websocket_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_websocket_name()) {
    websocket_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_websocket_name(), 
      GetArena());
  }
  websocket_pipe_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_websocket_pipe()) {
    websocket_pipe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_websocket_pipe(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.WebsocketInfo)
}

void WebsocketInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WebsocketInfo_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto.base);
  websocket_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  websocket_pipe_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WebsocketInfo::~WebsocketInfo() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.WebsocketInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WebsocketInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  websocket_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  websocket_pipe_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WebsocketInfo::ArenaDtor(void* object) {
  WebsocketInfo* _this = reinterpret_cast< WebsocketInfo* >(object);
  (void)_this;
}
void WebsocketInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WebsocketInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WebsocketInfo& WebsocketInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WebsocketInfo_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto.base);
  return *internal_default_instance();
}


void WebsocketInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.WebsocketInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      websocket_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      websocket_pipe_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WebsocketInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string websocket_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_websocket_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.WebsocketInfo.websocket_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string websocket_pipe = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_websocket_pipe();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.WebsocketInfo.websocket_pipe");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WebsocketInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.WebsocketInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string websocket_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_websocket_name().data(), static_cast<int>(this->_internal_websocket_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.WebsocketInfo.websocket_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_websocket_name(), target);
  }

  // optional string websocket_pipe = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_websocket_pipe().data(), static_cast<int>(this->_internal_websocket_pipe().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.WebsocketInfo.websocket_pipe");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_websocket_pipe(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.WebsocketInfo)
  return target;
}

size_t WebsocketInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.WebsocketInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string websocket_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_websocket_name());
    }

    // optional string websocket_pipe = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_websocket_pipe());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebsocketInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.WebsocketInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WebsocketInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WebsocketInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.WebsocketInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.WebsocketInfo)
    MergeFrom(*source);
  }
}

void WebsocketInfo::MergeFrom(const WebsocketInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.WebsocketInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_websocket_name(from._internal_websocket_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_websocket_pipe(from._internal_websocket_pipe());
    }
  }
}

void WebsocketInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.WebsocketInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebsocketInfo::CopyFrom(const WebsocketInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.WebsocketInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebsocketInfo::IsInitialized() const {
  return true;
}

void WebsocketInfo::InternalSwap(WebsocketInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  websocket_name_.Swap(&other->websocket_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  websocket_pipe_.Swap(&other->websocket_pipe_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata WebsocketInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChannelInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelInfo>()._has_bits_);
  static void set_has_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_proto_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_msg_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ChannelInfo::ChannelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.ChannelInfo)
}
ChannelInfo::ChannelInfo(const ChannelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_channel_name()) {
    channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_channel_name(), 
      GetArena());
  }
  proto_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_proto_path()) {
    proto_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proto_path(), 
      GetArena());
  }
  msg_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_msg_type()) {
    msg_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg_type(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.ChannelInfo)
}

void ChannelInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelInfo_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto.base);
  channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proto_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChannelInfo::~ChannelInfo() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.ChannelInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proto_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelInfo::ArenaDtor(void* object) {
  ChannelInfo* _this = reinterpret_cast< ChannelInfo* >(object);
  (void)_this;
}
void ChannelInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelInfo& ChannelInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelInfo_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto.base);
  return *internal_default_instance();
}


void ChannelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.ChannelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      channel_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      proto_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      msg_type_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.ChannelInfo.channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string proto_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_proto_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.ChannelInfo.proto_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string msg_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.ChannelInfo.msg_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.ChannelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.ChannelInfo.channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel_name(), target);
  }

  // optional string proto_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_proto_path().data(), static_cast<int>(this->_internal_proto_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.ChannelInfo.proto_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_proto_path(), target);
  }

  // optional string msg_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg_type().data(), static_cast<int>(this->_internal_msg_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.ChannelInfo.msg_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.ChannelInfo)
  return target;
}

size_t ChannelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.ChannelInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_channel_name());
    }

    // optional string proto_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_proto_path());
    }

    // optional string msg_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msg_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.ChannelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.ChannelInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.ChannelInfo)
    MergeFrom(*source);
  }
}

void ChannelInfo::MergeFrom(const ChannelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.ChannelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_channel_name(from._internal_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_proto_path(from._internal_proto_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_msg_type(from._internal_msg_type());
    }
  }
}

void ChannelInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.ChannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelInfo::CopyFrom(const ChannelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.ChannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelInfo::IsInitialized() const {
  return true;
}

void ChannelInfo::InternalSwap(ChannelInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  channel_name_.Swap(&other->channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  proto_path_.Swap(&other->proto_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  msg_type_.Swap(&other->msg_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DataHandlerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DataHandlerInfo>()._has_bits_);
  static void set_has_data_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_proto_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_msg_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::dreamview::WebsocketInfo& websocket_info(const DataHandlerInfo* msg);
  static void set_has_websocket_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_different_for_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::dreamview::WebsocketInfo&
DataHandlerInfo::_Internal::websocket_info(const DataHandlerInfo* msg) {
  return *msg->websocket_info_;
}
DataHandlerInfo::DataHandlerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  channels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.DataHandlerInfo)
}
DataHandlerInfo::DataHandlerInfo(const DataHandlerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data_name()) {
    data_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data_name(), 
      GetArena());
  }
  proto_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_proto_path()) {
    proto_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proto_path(), 
      GetArena());
  }
  msg_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_msg_type()) {
    msg_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg_type(), 
      GetArena());
  }
  if (from._internal_has_websocket_info()) {
    websocket_info_ = new ::apollo::dreamview::WebsocketInfo(*from.websocket_info_);
  } else {
    websocket_info_ = nullptr;
  }
  different_for_channels_ = from.different_for_channels_;
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.DataHandlerInfo)
}

void DataHandlerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataHandlerInfo_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto.base);
  data_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proto_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&websocket_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&different_for_channels_) -
      reinterpret_cast<char*>(&websocket_info_)) + sizeof(different_for_channels_));
}

DataHandlerInfo::~DataHandlerInfo() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.DataHandlerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataHandlerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proto_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete websocket_info_;
}

void DataHandlerInfo::ArenaDtor(void* object) {
  DataHandlerInfo* _this = reinterpret_cast< DataHandlerInfo* >(object);
  (void)_this;
}
void DataHandlerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataHandlerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataHandlerInfo& DataHandlerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataHandlerInfo_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto.base);
  return *internal_default_instance();
}


void DataHandlerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.DataHandlerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      data_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      proto_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      msg_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(websocket_info_ != nullptr);
      websocket_info_->Clear();
    }
  }
  different_for_channels_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataHandlerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string data_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.DataHandlerInfo.data_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string proto_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_proto_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.DataHandlerInfo.proto_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string msg_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.DataHandlerInfo.msg_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.dreamview.WebsocketInfo websocket_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_websocket_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool different_for_channels = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_different_for_channels(&has_bits);
          different_for_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.ChannelInfo channels = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataHandlerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.DataHandlerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string data_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_data_name().data(), static_cast<int>(this->_internal_data_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.DataHandlerInfo.data_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data_name(), target);
  }

  // optional string proto_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_proto_path().data(), static_cast<int>(this->_internal_proto_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.DataHandlerInfo.proto_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_proto_path(), target);
  }

  // optional string msg_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg_type().data(), static_cast<int>(this->_internal_msg_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.DataHandlerInfo.msg_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg_type(), target);
  }

  // optional .apollo.dreamview.WebsocketInfo websocket_info = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::websocket_info(this), target, stream);
  }

  // optional bool different_for_channels = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_different_for_channels(), target);
  }

  // repeated .apollo.dreamview.ChannelInfo channels = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_channels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.DataHandlerInfo)
  return target;
}

size_t DataHandlerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.DataHandlerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dreamview.ChannelInfo channels = 6;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string data_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_data_name());
    }

    // optional string proto_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_proto_path());
    }

    // optional string msg_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msg_type());
    }

    // optional .apollo.dreamview.WebsocketInfo websocket_info = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *websocket_info_);
    }

    // optional bool different_for_channels = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataHandlerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.DataHandlerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DataHandlerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataHandlerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.DataHandlerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.DataHandlerInfo)
    MergeFrom(*source);
  }
}

void DataHandlerInfo::MergeFrom(const DataHandlerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.DataHandlerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data_name(from._internal_data_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_proto_path(from._internal_proto_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_msg_type(from._internal_msg_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_websocket_info()->::apollo::dreamview::WebsocketInfo::MergeFrom(from._internal_websocket_info());
    }
    if (cached_has_bits & 0x00000010u) {
      different_for_channels_ = from.different_for_channels_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataHandlerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.DataHandlerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataHandlerInfo::CopyFrom(const DataHandlerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.DataHandlerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataHandlerInfo::IsInitialized() const {
  return true;
}

void DataHandlerInfo::InternalSwap(DataHandlerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  channels_.InternalSwap(&other->channels_);
  data_name_.Swap(&other->data_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  proto_path_.Swap(&other->proto_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  msg_type_.Swap(&other->msg_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataHandlerInfo, different_for_channels_)
      + sizeof(DataHandlerInfo::different_for_channels_)
      - PROTOBUF_FIELD_OFFSET(DataHandlerInfo, websocket_info_)>(
          reinterpret_cast<char*>(&websocket_info_),
          reinterpret_cast<char*>(&other->websocket_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataHandlerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

DataHandlerConf_DataHandlerInfoEntry_DoNotUse::DataHandlerConf_DataHandlerInfoEntry_DoNotUse() {}
DataHandlerConf_DataHandlerInfoEntry_DoNotUse::DataHandlerConf_DataHandlerInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DataHandlerConf_DataHandlerInfoEntry_DoNotUse::MergeFrom(const DataHandlerConf_DataHandlerInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DataHandlerConf_DataHandlerInfoEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void DataHandlerConf_DataHandlerInfoEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class DataHandlerConf::_Internal {
 public:
};

DataHandlerConf::DataHandlerConf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_handler_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.DataHandlerConf)
}
DataHandlerConf::DataHandlerConf(const DataHandlerConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_handler_info_.MergeFrom(from.data_handler_info_);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.DataHandlerConf)
}

void DataHandlerConf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataHandlerConf_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto.base);
}

DataHandlerConf::~DataHandlerConf() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.DataHandlerConf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataHandlerConf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DataHandlerConf::ArenaDtor(void* object) {
  DataHandlerConf* _this = reinterpret_cast< DataHandlerConf* >(object);
  (void)_this;
}
void DataHandlerConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataHandlerConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataHandlerConf& DataHandlerConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataHandlerConf_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto.base);
  return *internal_default_instance();
}


void DataHandlerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.DataHandlerConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_handler_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataHandlerConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .apollo.dreamview.DataHandlerInfo> data_handler_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&data_handler_info_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataHandlerConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.DataHandlerConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .apollo.dreamview.DataHandlerInfo> data_handler_info = 1;
  if (!this->_internal_data_handler_info().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::DataHandlerInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.DataHandlerConf.DataHandlerInfoEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_data_handler_info().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_data_handler_info().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::DataHandlerInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::DataHandlerInfo >::const_iterator
          it = this->_internal_data_handler_info().begin();
          it != this->_internal_data_handler_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DataHandlerConf_DataHandlerInfoEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::DataHandlerInfo >::const_iterator
          it = this->_internal_data_handler_info().begin();
          it != this->_internal_data_handler_info().end(); ++it) {
        target = DataHandlerConf_DataHandlerInfoEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.DataHandlerConf)
  return target;
}

size_t DataHandlerConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.DataHandlerConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .apollo.dreamview.DataHandlerInfo> data_handler_info = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_handler_info_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::DataHandlerInfo >::const_iterator
      it = this->_internal_data_handler_info().begin();
      it != this->_internal_data_handler_info().end(); ++it) {
    total_size += DataHandlerConf_DataHandlerInfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataHandlerConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.DataHandlerConf)
  GOOGLE_DCHECK_NE(&from, this);
  const DataHandlerConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataHandlerConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.DataHandlerConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.DataHandlerConf)
    MergeFrom(*source);
  }
}

void DataHandlerConf::MergeFrom(const DataHandlerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.DataHandlerConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_handler_info_.MergeFrom(from.data_handler_info_);
}

void DataHandlerConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.DataHandlerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataHandlerConf::CopyFrom(const DataHandlerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.DataHandlerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataHandlerConf::IsInitialized() const {
  return true;
}

void DataHandlerConf::InternalSwap(DataHandlerConf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_handler_info_.Swap(&other->data_handler_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataHandlerConf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StreamData::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamData>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

StreamData::StreamData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.StreamData)
}
StreamData::StreamData(const StreamData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_action()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArena());
  }
  data_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data_name()) {
    data_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data_name(), 
      GetArena());
  }
  channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_channel_name()) {
    channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_channel_name(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.StreamData)
}

void StreamData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamData_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StreamData::~StreamData() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.StreamData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamData::ArenaDtor(void* object) {
  StreamData* _this = reinterpret_cast< StreamData* >(object);
  (void)_this;
}
void StreamData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamData& StreamData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamData_modules_2fdreamview_5fplus_2fproto_2fdata_5fhandler_2eproto.base);
  return *internal_default_instance();
}


void StreamData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.StreamData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      action_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      data_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      channel_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      data_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.StreamData.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.StreamData.action");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string data_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.StreamData.data_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string channel_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.StreamData.channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.StreamData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.StreamData.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional string action = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.StreamData.action");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_action(), target);
  }

  // optional string data_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_data_name().data(), static_cast<int>(this->_internal_data_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.StreamData.data_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_data_name(), target);
  }

  // optional string channel_name = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.StreamData.channel_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_channel_name(), target);
  }

  // optional bytes data = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.StreamData)
  return target;
}

size_t StreamData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.StreamData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string action = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_action());
    }

    // optional string data_name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_data_name());
    }

    // optional string channel_name = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_channel_name());
    }

    // optional bytes data = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.StreamData)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.StreamData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.StreamData)
    MergeFrom(*source);
  }
}

void StreamData::MergeFrom(const StreamData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.StreamData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_action(from._internal_action());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_data_name(from._internal_data_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_channel_name(from._internal_channel_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_data(from._internal_data());
    }
  }
}

void StreamData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.StreamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamData::CopyFrom(const StreamData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.StreamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamData::IsInitialized() const {
  return true;
}

void StreamData::InternalSwap(StreamData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_name_.Swap(&other->data_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  channel_name_.Swap(&other->channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::dreamview::WebsocketInfo* Arena::CreateMaybeMessage< ::apollo::dreamview::WebsocketInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::WebsocketInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::ChannelInfo* Arena::CreateMaybeMessage< ::apollo::dreamview::ChannelInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::ChannelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::DataHandlerInfo* Arena::CreateMaybeMessage< ::apollo::dreamview::DataHandlerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::DataHandlerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::DataHandlerConf_DataHandlerInfoEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::dreamview::DataHandlerConf_DataHandlerInfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::DataHandlerConf_DataHandlerInfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::DataHandlerConf* Arena::CreateMaybeMessage< ::apollo::dreamview::DataHandlerConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::DataHandlerConf >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::StreamData* Arena::CreateMaybeMessage< ::apollo::dreamview::StreamData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::StreamData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
