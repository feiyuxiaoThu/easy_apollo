// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/backend/sim_control_manager/proto/dynamic_model_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fdynamic_5fmodel_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fdynamic_5fmodel_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fdynamic_5fmodel_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fdynamic_5fmodel_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fdynamic_5fmodel_5fconf_2eproto;
namespace apollo {
namespace dreamview {
class DynamicModelConf;
class DynamicModelConfDefaultTypeInternal;
extern DynamicModelConfDefaultTypeInternal _DynamicModelConf_default_instance_;
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::dreamview::DynamicModelConf* Arena::CreateMaybeMessage<::apollo::dreamview::DynamicModelConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace dreamview {

// ===================================================================

class DynamicModelConf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.DynamicModelConf) */ {
 public:
  inline DynamicModelConf() : DynamicModelConf(nullptr) {}
  virtual ~DynamicModelConf();

  DynamicModelConf(const DynamicModelConf& from);
  DynamicModelConf(DynamicModelConf&& from) noexcept
    : DynamicModelConf() {
    *this = ::std::move(from);
  }

  inline DynamicModelConf& operator=(const DynamicModelConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynamicModelConf& operator=(DynamicModelConf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DynamicModelConf& default_instance();

  static inline const DynamicModelConf* internal_default_instance() {
    return reinterpret_cast<const DynamicModelConf*>(
               &_DynamicModelConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DynamicModelConf& a, DynamicModelConf& b) {
    a.Swap(&b);
  }
  inline void Swap(DynamicModelConf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DynamicModelConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DynamicModelConf* New() const final {
    return CreateMaybeMessage<DynamicModelConf>(nullptr);
  }

  DynamicModelConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DynamicModelConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DynamicModelConf& from);
  void MergeFrom(const DynamicModelConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicModelConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.DynamicModelConf";
  }
  protected:
  explicit DynamicModelConf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fdynamic_5fmodel_5fconf_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fdynamic_5fmodel_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDynamicModelFilesFieldNumber = 3,
    kDynamicModelNameFieldNumber = 1,
    kLibraryNameFieldNumber = 2,
    kDependModelPackageFieldNumber = 4,
  };
  // repeated string dynamic_model_files = 3;
  int dynamic_model_files_size() const;
  private:
  int _internal_dynamic_model_files_size() const;
  public:
  void clear_dynamic_model_files();
  const std::string& dynamic_model_files(int index) const;
  std::string* mutable_dynamic_model_files(int index);
  void set_dynamic_model_files(int index, const std::string& value);
  void set_dynamic_model_files(int index, std::string&& value);
  void set_dynamic_model_files(int index, const char* value);
  void set_dynamic_model_files(int index, const char* value, size_t size);
  std::string* add_dynamic_model_files();
  void add_dynamic_model_files(const std::string& value);
  void add_dynamic_model_files(std::string&& value);
  void add_dynamic_model_files(const char* value);
  void add_dynamic_model_files(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dynamic_model_files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dynamic_model_files();
  private:
  const std::string& _internal_dynamic_model_files(int index) const;
  std::string* _internal_add_dynamic_model_files();
  public:

  // optional string dynamic_model_name = 1;
  bool has_dynamic_model_name() const;
  private:
  bool _internal_has_dynamic_model_name() const;
  public:
  void clear_dynamic_model_name();
  const std::string& dynamic_model_name() const;
  void set_dynamic_model_name(const std::string& value);
  void set_dynamic_model_name(std::string&& value);
  void set_dynamic_model_name(const char* value);
  void set_dynamic_model_name(const char* value, size_t size);
  std::string* mutable_dynamic_model_name();
  std::string* release_dynamic_model_name();
  void set_allocated_dynamic_model_name(std::string* dynamic_model_name);
  private:
  const std::string& _internal_dynamic_model_name() const;
  void _internal_set_dynamic_model_name(const std::string& value);
  std::string* _internal_mutable_dynamic_model_name();
  public:

  // optional string library_name = 2;
  bool has_library_name() const;
  private:
  bool _internal_has_library_name() const;
  public:
  void clear_library_name();
  const std::string& library_name() const;
  void set_library_name(const std::string& value);
  void set_library_name(std::string&& value);
  void set_library_name(const char* value);
  void set_library_name(const char* value, size_t size);
  std::string* mutable_library_name();
  std::string* release_library_name();
  void set_allocated_library_name(std::string* library_name);
  private:
  const std::string& _internal_library_name() const;
  void _internal_set_library_name(const std::string& value);
  std::string* _internal_mutable_library_name();
  public:

  // optional string depend_model_package = 4;
  bool has_depend_model_package() const;
  private:
  bool _internal_has_depend_model_package() const;
  public:
  void clear_depend_model_package();
  const std::string& depend_model_package() const;
  void set_depend_model_package(const std::string& value);
  void set_depend_model_package(std::string&& value);
  void set_depend_model_package(const char* value);
  void set_depend_model_package(const char* value, size_t size);
  std::string* mutable_depend_model_package();
  std::string* release_depend_model_package();
  void set_allocated_depend_model_package(std::string* depend_model_package);
  private:
  const std::string& _internal_depend_model_package() const;
  void _internal_set_depend_model_package(const std::string& value);
  std::string* _internal_mutable_depend_model_package();
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.DynamicModelConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dynamic_model_files_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dynamic_model_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr library_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr depend_model_package_;
  friend struct ::TableStruct_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fdynamic_5fmodel_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DynamicModelConf

// optional string dynamic_model_name = 1;
inline bool DynamicModelConf::_internal_has_dynamic_model_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DynamicModelConf::has_dynamic_model_name() const {
  return _internal_has_dynamic_model_name();
}
inline void DynamicModelConf::clear_dynamic_model_name() {
  dynamic_model_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DynamicModelConf::dynamic_model_name() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DynamicModelConf.dynamic_model_name)
  return _internal_dynamic_model_name();
}
inline void DynamicModelConf::set_dynamic_model_name(const std::string& value) {
  _internal_set_dynamic_model_name(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.DynamicModelConf.dynamic_model_name)
}
inline std::string* DynamicModelConf::mutable_dynamic_model_name() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.DynamicModelConf.dynamic_model_name)
  return _internal_mutable_dynamic_model_name();
}
inline const std::string& DynamicModelConf::_internal_dynamic_model_name() const {
  return dynamic_model_name_.Get();
}
inline void DynamicModelConf::_internal_set_dynamic_model_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  dynamic_model_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DynamicModelConf::set_dynamic_model_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  dynamic_model_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.DynamicModelConf.dynamic_model_name)
}
inline void DynamicModelConf::set_dynamic_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  dynamic_model_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.DynamicModelConf.dynamic_model_name)
}
inline void DynamicModelConf::set_dynamic_model_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  dynamic_model_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.DynamicModelConf.dynamic_model_name)
}
inline std::string* DynamicModelConf::_internal_mutable_dynamic_model_name() {
  _has_bits_[0] |= 0x00000001u;
  return dynamic_model_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DynamicModelConf::release_dynamic_model_name() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.DynamicModelConf.dynamic_model_name)
  if (!_internal_has_dynamic_model_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return dynamic_model_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DynamicModelConf::set_allocated_dynamic_model_name(std::string* dynamic_model_name) {
  if (dynamic_model_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dynamic_model_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dynamic_model_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.DynamicModelConf.dynamic_model_name)
}

// optional string library_name = 2;
inline bool DynamicModelConf::_internal_has_library_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DynamicModelConf::has_library_name() const {
  return _internal_has_library_name();
}
inline void DynamicModelConf::clear_library_name() {
  library_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DynamicModelConf::library_name() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DynamicModelConf.library_name)
  return _internal_library_name();
}
inline void DynamicModelConf::set_library_name(const std::string& value) {
  _internal_set_library_name(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.DynamicModelConf.library_name)
}
inline std::string* DynamicModelConf::mutable_library_name() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.DynamicModelConf.library_name)
  return _internal_mutable_library_name();
}
inline const std::string& DynamicModelConf::_internal_library_name() const {
  return library_name_.Get();
}
inline void DynamicModelConf::_internal_set_library_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  library_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DynamicModelConf::set_library_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  library_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.DynamicModelConf.library_name)
}
inline void DynamicModelConf::set_library_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  library_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.DynamicModelConf.library_name)
}
inline void DynamicModelConf::set_library_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  library_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.DynamicModelConf.library_name)
}
inline std::string* DynamicModelConf::_internal_mutable_library_name() {
  _has_bits_[0] |= 0x00000002u;
  return library_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DynamicModelConf::release_library_name() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.DynamicModelConf.library_name)
  if (!_internal_has_library_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return library_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DynamicModelConf::set_allocated_library_name(std::string* library_name) {
  if (library_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  library_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), library_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.DynamicModelConf.library_name)
}

// repeated string dynamic_model_files = 3;
inline int DynamicModelConf::_internal_dynamic_model_files_size() const {
  return dynamic_model_files_.size();
}
inline int DynamicModelConf::dynamic_model_files_size() const {
  return _internal_dynamic_model_files_size();
}
inline void DynamicModelConf::clear_dynamic_model_files() {
  dynamic_model_files_.Clear();
}
inline std::string* DynamicModelConf::add_dynamic_model_files() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.DynamicModelConf.dynamic_model_files)
  return _internal_add_dynamic_model_files();
}
inline const std::string& DynamicModelConf::_internal_dynamic_model_files(int index) const {
  return dynamic_model_files_.Get(index);
}
inline const std::string& DynamicModelConf::dynamic_model_files(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DynamicModelConf.dynamic_model_files)
  return _internal_dynamic_model_files(index);
}
inline std::string* DynamicModelConf::mutable_dynamic_model_files(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.DynamicModelConf.dynamic_model_files)
  return dynamic_model_files_.Mutable(index);
}
inline void DynamicModelConf::set_dynamic_model_files(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.DynamicModelConf.dynamic_model_files)
  dynamic_model_files_.Mutable(index)->assign(value);
}
inline void DynamicModelConf::set_dynamic_model_files(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.DynamicModelConf.dynamic_model_files)
  dynamic_model_files_.Mutable(index)->assign(std::move(value));
}
inline void DynamicModelConf::set_dynamic_model_files(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dynamic_model_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.DynamicModelConf.dynamic_model_files)
}
inline void DynamicModelConf::set_dynamic_model_files(int index, const char* value, size_t size) {
  dynamic_model_files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.DynamicModelConf.dynamic_model_files)
}
inline std::string* DynamicModelConf::_internal_add_dynamic_model_files() {
  return dynamic_model_files_.Add();
}
inline void DynamicModelConf::add_dynamic_model_files(const std::string& value) {
  dynamic_model_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.DynamicModelConf.dynamic_model_files)
}
inline void DynamicModelConf::add_dynamic_model_files(std::string&& value) {
  dynamic_model_files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.DynamicModelConf.dynamic_model_files)
}
inline void DynamicModelConf::add_dynamic_model_files(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dynamic_model_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.DynamicModelConf.dynamic_model_files)
}
inline void DynamicModelConf::add_dynamic_model_files(const char* value, size_t size) {
  dynamic_model_files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.DynamicModelConf.dynamic_model_files)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DynamicModelConf::dynamic_model_files() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.DynamicModelConf.dynamic_model_files)
  return dynamic_model_files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DynamicModelConf::mutable_dynamic_model_files() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.DynamicModelConf.dynamic_model_files)
  return &dynamic_model_files_;
}

// optional string depend_model_package = 4;
inline bool DynamicModelConf::_internal_has_depend_model_package() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DynamicModelConf::has_depend_model_package() const {
  return _internal_has_depend_model_package();
}
inline void DynamicModelConf::clear_depend_model_package() {
  depend_model_package_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DynamicModelConf::depend_model_package() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DynamicModelConf.depend_model_package)
  return _internal_depend_model_package();
}
inline void DynamicModelConf::set_depend_model_package(const std::string& value) {
  _internal_set_depend_model_package(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.DynamicModelConf.depend_model_package)
}
inline std::string* DynamicModelConf::mutable_depend_model_package() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.DynamicModelConf.depend_model_package)
  return _internal_mutable_depend_model_package();
}
inline const std::string& DynamicModelConf::_internal_depend_model_package() const {
  return depend_model_package_.Get();
}
inline void DynamicModelConf::_internal_set_depend_model_package(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  depend_model_package_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DynamicModelConf::set_depend_model_package(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  depend_model_package_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.DynamicModelConf.depend_model_package)
}
inline void DynamicModelConf::set_depend_model_package(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  depend_model_package_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.DynamicModelConf.depend_model_package)
}
inline void DynamicModelConf::set_depend_model_package(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  depend_model_package_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.DynamicModelConf.depend_model_package)
}
inline std::string* DynamicModelConf::_internal_mutable_depend_model_package() {
  _has_bits_[0] |= 0x00000004u;
  return depend_model_package_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DynamicModelConf::release_depend_model_package() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.DynamicModelConf.depend_model_package)
  if (!_internal_has_depend_model_package()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return depend_model_package_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DynamicModelConf::set_allocated_depend_model_package(std::string* depend_model_package) {
  if (depend_model_package != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  depend_model_package_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), depend_model_package,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.DynamicModelConf.depend_model_package)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fdynamic_5fmodel_5fconf_2eproto
