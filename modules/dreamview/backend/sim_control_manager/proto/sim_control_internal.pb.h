// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/backend/sim_control_manager/proto/sim_control_internal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto;
namespace apollo {
namespace sim_control {
class SimCarStatus;
class SimCarStatusDefaultTypeInternal;
extern SimCarStatusDefaultTypeInternal _SimCarStatus_default_instance_;
class SimControlData;
class SimControlDataDefaultTypeInternal;
extern SimControlDataDefaultTypeInternal _SimControlData_default_instance_;
}  // namespace sim_control
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::sim_control::SimCarStatus* Arena::CreateMaybeMessage<::apollo::sim_control::SimCarStatus>(Arena*);
template<> ::apollo::sim_control::SimControlData* Arena::CreateMaybeMessage<::apollo::sim_control::SimControlData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace sim_control {

// ===================================================================

class SimCarStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.sim_control.SimCarStatus) */ {
 public:
  inline SimCarStatus() : SimCarStatus(nullptr) {}
  virtual ~SimCarStatus();

  SimCarStatus(const SimCarStatus& from);
  SimCarStatus(SimCarStatus&& from) noexcept
    : SimCarStatus() {
    *this = ::std::move(from);
  }

  inline SimCarStatus& operator=(const SimCarStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimCarStatus& operator=(SimCarStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimCarStatus& default_instance();

  static inline const SimCarStatus* internal_default_instance() {
    return reinterpret_cast<const SimCarStatus*>(
               &_SimCarStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SimCarStatus& a, SimCarStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SimCarStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimCarStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimCarStatus* New() const final {
    return CreateMaybeMessage<SimCarStatus>(nullptr);
  }

  SimCarStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimCarStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimCarStatus& from);
  void MergeFrom(const SimCarStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimCarStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.sim_control.SimCarStatus";
  }
  protected:
  explicit SimCarStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kSFieldNumber = 4,
    kLFieldNumber = 5,
    kSpeedFieldNumber = 6,
    kAccelerationSFieldNumber = 7,
    kCurvatureFieldNumber = 8,
    kCurvatureChangeRateFieldNumber = 9,
    kRelativeTimeFieldNumber = 10,
    kThetaFieldNumber = 11,
    kAccumulatedSFieldNumber = 12,
    kAngularSpeedFieldNumber = 14,
    kOdometerFieldNumber = 13,
    kGearPositionFieldNumber = 15,
  };
  // optional double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // optional double s = 4;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  double s() const;
  void set_s(double value);
  private:
  double _internal_s() const;
  void _internal_set_s(double value);
  public:

  // optional double l = 5;
  bool has_l() const;
  private:
  bool _internal_has_l() const;
  public:
  void clear_l();
  double l() const;
  void set_l(double value);
  private:
  double _internal_l() const;
  void _internal_set_l(double value);
  public:

  // optional double speed = 6;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // optional double acceleration_s = 7;
  bool has_acceleration_s() const;
  private:
  bool _internal_has_acceleration_s() const;
  public:
  void clear_acceleration_s();
  double acceleration_s() const;
  void set_acceleration_s(double value);
  private:
  double _internal_acceleration_s() const;
  void _internal_set_acceleration_s(double value);
  public:

  // optional double curvature = 8;
  bool has_curvature() const;
  private:
  bool _internal_has_curvature() const;
  public:
  void clear_curvature();
  double curvature() const;
  void set_curvature(double value);
  private:
  double _internal_curvature() const;
  void _internal_set_curvature(double value);
  public:

  // optional double curvature_change_rate = 9;
  bool has_curvature_change_rate() const;
  private:
  bool _internal_has_curvature_change_rate() const;
  public:
  void clear_curvature_change_rate();
  double curvature_change_rate() const;
  void set_curvature_change_rate(double value);
  private:
  double _internal_curvature_change_rate() const;
  void _internal_set_curvature_change_rate(double value);
  public:

  // optional double relative_time = 10;
  bool has_relative_time() const;
  private:
  bool _internal_has_relative_time() const;
  public:
  void clear_relative_time();
  double relative_time() const;
  void set_relative_time(double value);
  private:
  double _internal_relative_time() const;
  void _internal_set_relative_time(double value);
  public:

  // optional double theta = 11;
  bool has_theta() const;
  private:
  bool _internal_has_theta() const;
  public:
  void clear_theta();
  double theta() const;
  void set_theta(double value);
  private:
  double _internal_theta() const;
  void _internal_set_theta(double value);
  public:

  // optional double accumulated_s = 12;
  bool has_accumulated_s() const;
  private:
  bool _internal_has_accumulated_s() const;
  public:
  void clear_accumulated_s();
  double accumulated_s() const;
  void set_accumulated_s(double value);
  private:
  double _internal_accumulated_s() const;
  void _internal_set_accumulated_s(double value);
  public:

  // optional double angular_speed = 14;
  bool has_angular_speed() const;
  private:
  bool _internal_has_angular_speed() const;
  public:
  void clear_angular_speed();
  double angular_speed() const;
  void set_angular_speed(double value);
  private:
  double _internal_angular_speed() const;
  void _internal_set_angular_speed(double value);
  public:

  // optional float odometer = 13;
  bool has_odometer() const;
  private:
  bool _internal_has_odometer() const;
  public:
  void clear_odometer();
  float odometer() const;
  void set_odometer(float value);
  private:
  float _internal_odometer() const;
  void _internal_set_odometer(float value);
  public:

  // optional int32 gear_position = 15;
  bool has_gear_position() const;
  private:
  bool _internal_has_gear_position() const;
  public:
  void clear_gear_position();
  ::PROTOBUF_NAMESPACE_ID::int32 gear_position() const;
  void set_gear_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gear_position() const;
  void _internal_set_gear_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.sim_control.SimCarStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double z_;
  double s_;
  double l_;
  double speed_;
  double acceleration_s_;
  double curvature_;
  double curvature_change_rate_;
  double relative_time_;
  double theta_;
  double accumulated_s_;
  double angular_speed_;
  float odometer_;
  ::PROTOBUF_NAMESPACE_ID::int32 gear_position_;
  friend struct ::TableStruct_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto;
};
// -------------------------------------------------------------------

class SimControlData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.sim_control.SimControlData) */ {
 public:
  inline SimControlData() : SimControlData(nullptr) {}
  virtual ~SimControlData();

  SimControlData(const SimControlData& from);
  SimControlData(SimControlData&& from) noexcept
    : SimControlData() {
    *this = ::std::move(from);
  }

  inline SimControlData& operator=(const SimControlData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimControlData& operator=(SimControlData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimControlData& default_instance();

  static inline const SimControlData* internal_default_instance() {
    return reinterpret_cast<const SimControlData*>(
               &_SimControlData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SimControlData& a, SimControlData& b) {
    a.Swap(&b);
  }
  inline void Swap(SimControlData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimControlData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimControlData* New() const final {
    return CreateMaybeMessage<SimControlData>(nullptr);
  }

  SimControlData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimControlData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimControlData& from);
  void MergeFrom(const SimControlData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimControlData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.sim_control.SimControlData";
  }
  protected:
  explicit SimControlData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kSimCarStatusFieldNumber = 2,
  };
  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional .apollo.sim_control.SimCarStatus sim_car_status = 2;
  bool has_sim_car_status() const;
  private:
  bool _internal_has_sim_car_status() const;
  public:
  void clear_sim_car_status();
  const ::apollo::sim_control::SimCarStatus& sim_car_status() const;
  ::apollo::sim_control::SimCarStatus* release_sim_car_status();
  ::apollo::sim_control::SimCarStatus* mutable_sim_car_status();
  void set_allocated_sim_car_status(::apollo::sim_control::SimCarStatus* sim_car_status);
  private:
  const ::apollo::sim_control::SimCarStatus& _internal_sim_car_status() const;
  ::apollo::sim_control::SimCarStatus* _internal_mutable_sim_car_status();
  public:
  void unsafe_arena_set_allocated_sim_car_status(
      ::apollo::sim_control::SimCarStatus* sim_car_status);
  ::apollo::sim_control::SimCarStatus* unsafe_arena_release_sim_car_status();

  // @@protoc_insertion_point(class_scope:apollo.sim_control.SimControlData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::common::Header* header_;
  ::apollo::sim_control::SimCarStatus* sim_car_status_;
  friend struct ::TableStruct_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SimCarStatus

// optional double x = 1;
inline bool SimCarStatus::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SimCarStatus::has_x() const {
  return _internal_has_x();
}
inline void SimCarStatus::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double SimCarStatus::_internal_x() const {
  return x_;
}
inline double SimCarStatus::x() const {
  // @@protoc_insertion_point(field_get:apollo.sim_control.SimCarStatus.x)
  return _internal_x();
}
inline void SimCarStatus::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void SimCarStatus::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:apollo.sim_control.SimCarStatus.x)
}

// optional double y = 2;
inline bool SimCarStatus::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SimCarStatus::has_y() const {
  return _internal_has_y();
}
inline void SimCarStatus::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double SimCarStatus::_internal_y() const {
  return y_;
}
inline double SimCarStatus::y() const {
  // @@protoc_insertion_point(field_get:apollo.sim_control.SimCarStatus.y)
  return _internal_y();
}
inline void SimCarStatus::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void SimCarStatus::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:apollo.sim_control.SimCarStatus.y)
}

// optional double z = 3;
inline bool SimCarStatus::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SimCarStatus::has_z() const {
  return _internal_has_z();
}
inline void SimCarStatus::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double SimCarStatus::_internal_z() const {
  return z_;
}
inline double SimCarStatus::z() const {
  // @@protoc_insertion_point(field_get:apollo.sim_control.SimCarStatus.z)
  return _internal_z();
}
inline void SimCarStatus::_internal_set_z(double value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void SimCarStatus::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:apollo.sim_control.SimCarStatus.z)
}

// optional double s = 4;
inline bool SimCarStatus::_internal_has_s() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SimCarStatus::has_s() const {
  return _internal_has_s();
}
inline void SimCarStatus::clear_s() {
  s_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double SimCarStatus::_internal_s() const {
  return s_;
}
inline double SimCarStatus::s() const {
  // @@protoc_insertion_point(field_get:apollo.sim_control.SimCarStatus.s)
  return _internal_s();
}
inline void SimCarStatus::_internal_set_s(double value) {
  _has_bits_[0] |= 0x00000008u;
  s_ = value;
}
inline void SimCarStatus::set_s(double value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:apollo.sim_control.SimCarStatus.s)
}

// optional double l = 5;
inline bool SimCarStatus::_internal_has_l() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SimCarStatus::has_l() const {
  return _internal_has_l();
}
inline void SimCarStatus::clear_l() {
  l_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double SimCarStatus::_internal_l() const {
  return l_;
}
inline double SimCarStatus::l() const {
  // @@protoc_insertion_point(field_get:apollo.sim_control.SimCarStatus.l)
  return _internal_l();
}
inline void SimCarStatus::_internal_set_l(double value) {
  _has_bits_[0] |= 0x00000010u;
  l_ = value;
}
inline void SimCarStatus::set_l(double value) {
  _internal_set_l(value);
  // @@protoc_insertion_point(field_set:apollo.sim_control.SimCarStatus.l)
}

// optional double speed = 6;
inline bool SimCarStatus::_internal_has_speed() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SimCarStatus::has_speed() const {
  return _internal_has_speed();
}
inline void SimCarStatus::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double SimCarStatus::_internal_speed() const {
  return speed_;
}
inline double SimCarStatus::speed() const {
  // @@protoc_insertion_point(field_get:apollo.sim_control.SimCarStatus.speed)
  return _internal_speed();
}
inline void SimCarStatus::_internal_set_speed(double value) {
  _has_bits_[0] |= 0x00000020u;
  speed_ = value;
}
inline void SimCarStatus::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:apollo.sim_control.SimCarStatus.speed)
}

// optional double acceleration_s = 7;
inline bool SimCarStatus::_internal_has_acceleration_s() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SimCarStatus::has_acceleration_s() const {
  return _internal_has_acceleration_s();
}
inline void SimCarStatus::clear_acceleration_s() {
  acceleration_s_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double SimCarStatus::_internal_acceleration_s() const {
  return acceleration_s_;
}
inline double SimCarStatus::acceleration_s() const {
  // @@protoc_insertion_point(field_get:apollo.sim_control.SimCarStatus.acceleration_s)
  return _internal_acceleration_s();
}
inline void SimCarStatus::_internal_set_acceleration_s(double value) {
  _has_bits_[0] |= 0x00000040u;
  acceleration_s_ = value;
}
inline void SimCarStatus::set_acceleration_s(double value) {
  _internal_set_acceleration_s(value);
  // @@protoc_insertion_point(field_set:apollo.sim_control.SimCarStatus.acceleration_s)
}

// optional double curvature = 8;
inline bool SimCarStatus::_internal_has_curvature() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SimCarStatus::has_curvature() const {
  return _internal_has_curvature();
}
inline void SimCarStatus::clear_curvature() {
  curvature_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double SimCarStatus::_internal_curvature() const {
  return curvature_;
}
inline double SimCarStatus::curvature() const {
  // @@protoc_insertion_point(field_get:apollo.sim_control.SimCarStatus.curvature)
  return _internal_curvature();
}
inline void SimCarStatus::_internal_set_curvature(double value) {
  _has_bits_[0] |= 0x00000080u;
  curvature_ = value;
}
inline void SimCarStatus::set_curvature(double value) {
  _internal_set_curvature(value);
  // @@protoc_insertion_point(field_set:apollo.sim_control.SimCarStatus.curvature)
}

// optional double curvature_change_rate = 9;
inline bool SimCarStatus::_internal_has_curvature_change_rate() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SimCarStatus::has_curvature_change_rate() const {
  return _internal_has_curvature_change_rate();
}
inline void SimCarStatus::clear_curvature_change_rate() {
  curvature_change_rate_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double SimCarStatus::_internal_curvature_change_rate() const {
  return curvature_change_rate_;
}
inline double SimCarStatus::curvature_change_rate() const {
  // @@protoc_insertion_point(field_get:apollo.sim_control.SimCarStatus.curvature_change_rate)
  return _internal_curvature_change_rate();
}
inline void SimCarStatus::_internal_set_curvature_change_rate(double value) {
  _has_bits_[0] |= 0x00000100u;
  curvature_change_rate_ = value;
}
inline void SimCarStatus::set_curvature_change_rate(double value) {
  _internal_set_curvature_change_rate(value);
  // @@protoc_insertion_point(field_set:apollo.sim_control.SimCarStatus.curvature_change_rate)
}

// optional double relative_time = 10;
inline bool SimCarStatus::_internal_has_relative_time() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SimCarStatus::has_relative_time() const {
  return _internal_has_relative_time();
}
inline void SimCarStatus::clear_relative_time() {
  relative_time_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double SimCarStatus::_internal_relative_time() const {
  return relative_time_;
}
inline double SimCarStatus::relative_time() const {
  // @@protoc_insertion_point(field_get:apollo.sim_control.SimCarStatus.relative_time)
  return _internal_relative_time();
}
inline void SimCarStatus::_internal_set_relative_time(double value) {
  _has_bits_[0] |= 0x00000200u;
  relative_time_ = value;
}
inline void SimCarStatus::set_relative_time(double value) {
  _internal_set_relative_time(value);
  // @@protoc_insertion_point(field_set:apollo.sim_control.SimCarStatus.relative_time)
}

// optional double theta = 11;
inline bool SimCarStatus::_internal_has_theta() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SimCarStatus::has_theta() const {
  return _internal_has_theta();
}
inline void SimCarStatus::clear_theta() {
  theta_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double SimCarStatus::_internal_theta() const {
  return theta_;
}
inline double SimCarStatus::theta() const {
  // @@protoc_insertion_point(field_get:apollo.sim_control.SimCarStatus.theta)
  return _internal_theta();
}
inline void SimCarStatus::_internal_set_theta(double value) {
  _has_bits_[0] |= 0x00000400u;
  theta_ = value;
}
inline void SimCarStatus::set_theta(double value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:apollo.sim_control.SimCarStatus.theta)
}

// optional double accumulated_s = 12;
inline bool SimCarStatus::_internal_has_accumulated_s() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SimCarStatus::has_accumulated_s() const {
  return _internal_has_accumulated_s();
}
inline void SimCarStatus::clear_accumulated_s() {
  accumulated_s_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double SimCarStatus::_internal_accumulated_s() const {
  return accumulated_s_;
}
inline double SimCarStatus::accumulated_s() const {
  // @@protoc_insertion_point(field_get:apollo.sim_control.SimCarStatus.accumulated_s)
  return _internal_accumulated_s();
}
inline void SimCarStatus::_internal_set_accumulated_s(double value) {
  _has_bits_[0] |= 0x00000800u;
  accumulated_s_ = value;
}
inline void SimCarStatus::set_accumulated_s(double value) {
  _internal_set_accumulated_s(value);
  // @@protoc_insertion_point(field_set:apollo.sim_control.SimCarStatus.accumulated_s)
}

// optional float odometer = 13;
inline bool SimCarStatus::_internal_has_odometer() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SimCarStatus::has_odometer() const {
  return _internal_has_odometer();
}
inline void SimCarStatus::clear_odometer() {
  odometer_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float SimCarStatus::_internal_odometer() const {
  return odometer_;
}
inline float SimCarStatus::odometer() const {
  // @@protoc_insertion_point(field_get:apollo.sim_control.SimCarStatus.odometer)
  return _internal_odometer();
}
inline void SimCarStatus::_internal_set_odometer(float value) {
  _has_bits_[0] |= 0x00002000u;
  odometer_ = value;
}
inline void SimCarStatus::set_odometer(float value) {
  _internal_set_odometer(value);
  // @@protoc_insertion_point(field_set:apollo.sim_control.SimCarStatus.odometer)
}

// optional double angular_speed = 14;
inline bool SimCarStatus::_internal_has_angular_speed() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SimCarStatus::has_angular_speed() const {
  return _internal_has_angular_speed();
}
inline void SimCarStatus::clear_angular_speed() {
  angular_speed_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double SimCarStatus::_internal_angular_speed() const {
  return angular_speed_;
}
inline double SimCarStatus::angular_speed() const {
  // @@protoc_insertion_point(field_get:apollo.sim_control.SimCarStatus.angular_speed)
  return _internal_angular_speed();
}
inline void SimCarStatus::_internal_set_angular_speed(double value) {
  _has_bits_[0] |= 0x00001000u;
  angular_speed_ = value;
}
inline void SimCarStatus::set_angular_speed(double value) {
  _internal_set_angular_speed(value);
  // @@protoc_insertion_point(field_set:apollo.sim_control.SimCarStatus.angular_speed)
}

// optional int32 gear_position = 15;
inline bool SimCarStatus::_internal_has_gear_position() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SimCarStatus::has_gear_position() const {
  return _internal_has_gear_position();
}
inline void SimCarStatus::clear_gear_position() {
  gear_position_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimCarStatus::_internal_gear_position() const {
  return gear_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimCarStatus::gear_position() const {
  // @@protoc_insertion_point(field_get:apollo.sim_control.SimCarStatus.gear_position)
  return _internal_gear_position();
}
inline void SimCarStatus::_internal_set_gear_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  gear_position_ = value;
}
inline void SimCarStatus::set_gear_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gear_position(value);
  // @@protoc_insertion_point(field_set:apollo.sim_control.SimCarStatus.gear_position)
}

// -------------------------------------------------------------------

// SimControlData

// optional .apollo.common.Header header = 1;
inline bool SimControlData::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool SimControlData::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& SimControlData::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& SimControlData::header() const {
  // @@protoc_insertion_point(field_get:apollo.sim_control.SimControlData.header)
  return _internal_header();
}
inline void SimControlData::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.sim_control.SimControlData.header)
}
inline ::apollo::common::Header* SimControlData::release_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::common::Header* SimControlData::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.sim_control.SimControlData.header)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* SimControlData::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* SimControlData::mutable_header() {
  // @@protoc_insertion_point(field_mutable:apollo.sim_control.SimControlData.header)
  return _internal_mutable_header();
}
inline void SimControlData::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.sim_control.SimControlData.header)
}

// optional .apollo.sim_control.SimCarStatus sim_car_status = 2;
inline bool SimControlData::_internal_has_sim_car_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || sim_car_status_ != nullptr);
  return value;
}
inline bool SimControlData::has_sim_car_status() const {
  return _internal_has_sim_car_status();
}
inline void SimControlData::clear_sim_car_status() {
  if (sim_car_status_ != nullptr) sim_car_status_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::sim_control::SimCarStatus& SimControlData::_internal_sim_car_status() const {
  const ::apollo::sim_control::SimCarStatus* p = sim_car_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::sim_control::SimCarStatus&>(
      ::apollo::sim_control::_SimCarStatus_default_instance_);
}
inline const ::apollo::sim_control::SimCarStatus& SimControlData::sim_car_status() const {
  // @@protoc_insertion_point(field_get:apollo.sim_control.SimControlData.sim_car_status)
  return _internal_sim_car_status();
}
inline void SimControlData::unsafe_arena_set_allocated_sim_car_status(
    ::apollo::sim_control::SimCarStatus* sim_car_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sim_car_status_);
  }
  sim_car_status_ = sim_car_status;
  if (sim_car_status) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.sim_control.SimControlData.sim_car_status)
}
inline ::apollo::sim_control::SimCarStatus* SimControlData::release_sim_car_status() {
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::sim_control::SimCarStatus* temp = sim_car_status_;
  sim_car_status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::sim_control::SimCarStatus* SimControlData::unsafe_arena_release_sim_car_status() {
  // @@protoc_insertion_point(field_release:apollo.sim_control.SimControlData.sim_car_status)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::sim_control::SimCarStatus* temp = sim_car_status_;
  sim_car_status_ = nullptr;
  return temp;
}
inline ::apollo::sim_control::SimCarStatus* SimControlData::_internal_mutable_sim_car_status() {
  _has_bits_[0] |= 0x00000002u;
  if (sim_car_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::sim_control::SimCarStatus>(GetArena());
    sim_car_status_ = p;
  }
  return sim_car_status_;
}
inline ::apollo::sim_control::SimCarStatus* SimControlData::mutable_sim_car_status() {
  // @@protoc_insertion_point(field_mutable:apollo.sim_control.SimControlData.sim_car_status)
  return _internal_mutable_sim_car_status();
}
inline void SimControlData::set_allocated_sim_car_status(::apollo::sim_control::SimCarStatus* sim_car_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sim_car_status_;
  }
  if (sim_car_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sim_car_status);
    if (message_arena != submessage_arena) {
      sim_car_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sim_car_status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sim_car_status_ = sim_car_status;
  // @@protoc_insertion_point(field_set_allocated:apollo.sim_control.SimControlData.sim_car_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_control
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto
