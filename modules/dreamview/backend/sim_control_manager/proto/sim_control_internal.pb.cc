// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/backend/sim_control_manager/proto/sim_control_internal.proto

#include "modules/dreamview/backend/sim_control_manager/proto/sim_control_internal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimCarStatus_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto;
namespace apollo {
namespace sim_control {
class SimCarStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimCarStatus> _instance;
} _SimCarStatus_default_instance_;
class SimControlDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimControlData> _instance;
} _SimControlData_default_instance_;
}  // namespace sim_control
}  // namespace apollo
static void InitDefaultsscc_info_SimCarStatus_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::sim_control::_SimCarStatus_default_instance_;
    new (ptr) ::apollo::sim_control::SimCarStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimCarStatus_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SimCarStatus_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto}, {}};

static void InitDefaultsscc_info_SimControlData_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::sim_control::_SimControlData_default_instance_;
    new (ptr) ::apollo::sim_control::SimControlData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimControlData_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SimControlData_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,
      &scc_info_SimCarStatus_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::sim_control::SimCarStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::sim_control::SimCarStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::sim_control::SimCarStatus, x_),
  PROTOBUF_FIELD_OFFSET(::apollo::sim_control::SimCarStatus, y_),
  PROTOBUF_FIELD_OFFSET(::apollo::sim_control::SimCarStatus, z_),
  PROTOBUF_FIELD_OFFSET(::apollo::sim_control::SimCarStatus, s_),
  PROTOBUF_FIELD_OFFSET(::apollo::sim_control::SimCarStatus, l_),
  PROTOBUF_FIELD_OFFSET(::apollo::sim_control::SimCarStatus, speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::sim_control::SimCarStatus, acceleration_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::sim_control::SimCarStatus, curvature_),
  PROTOBUF_FIELD_OFFSET(::apollo::sim_control::SimCarStatus, curvature_change_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::sim_control::SimCarStatus, relative_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::sim_control::SimCarStatus, theta_),
  PROTOBUF_FIELD_OFFSET(::apollo::sim_control::SimCarStatus, accumulated_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::sim_control::SimCarStatus, odometer_),
  PROTOBUF_FIELD_OFFSET(::apollo::sim_control::SimCarStatus, angular_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::sim_control::SimCarStatus, gear_position_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  13,
  12,
  14,
  PROTOBUF_FIELD_OFFSET(::apollo::sim_control::SimControlData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::sim_control::SimControlData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::sim_control::SimControlData, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::sim_control::SimControlData, sim_car_status_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 20, sizeof(::apollo::sim_control::SimCarStatus)},
  { 35, 42, sizeof(::apollo::sim_control::SimControlData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::sim_control::_SimCarStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::sim_control::_SimControlData_default_instance_),
};

const char descriptor_table_protodef_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nNmodules/dreamview/backend/sim_control_"
  "manager/proto/sim_control_internal.proto"
  "\022\022apollo.sim_control\032!modules/common/pro"
  "to/header.proto\"\233\002\n\014SimCarStatus\022\t\n\001x\030\001 "
  "\001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\t\n\001s\030\004 \001(\001\022\t\n\001"
  "l\030\005 \001(\001\022\r\n\005speed\030\006 \001(\001\022\026\n\016acceleration_s"
  "\030\007 \001(\001\022\021\n\tcurvature\030\010 \001(\001\022\035\n\025curvature_c"
  "hange_rate\030\t \001(\001\022\025\n\rrelative_time\030\n \001(\001\022"
  "\r\n\005theta\030\013 \001(\001\022\025\n\raccumulated_s\030\014 \001(\001\022\020\n"
  "\010odometer\030\r \001(\002\022\025\n\rangular_speed\030\016 \001(\001\022\025"
  "\n\rgear_position\030\017 \001(\005\"q\n\016SimControlData\022"
  "%\n\006header\030\001 \001(\0132\025.apollo.common.Header\0228"
  "\n\016sim_car_status\030\002 \001(\0132 .apollo.sim_cont"
  "rol.SimCarStatus"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto_sccs[2] = {
  &scc_info_SimCarStatus_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto.base,
  &scc_info_SimControlData_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto = {
  false, false, descriptor_table_protodef_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto, "modules/dreamview/backend/sim_control_manager/proto/sim_control_internal.proto", 536,
  &descriptor_table_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto_once, descriptor_table_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto_sccs, descriptor_table_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto::offsets,
  file_level_metadata_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto, 2, file_level_enum_descriptors_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto, file_level_service_descriptors_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto)), true);
namespace apollo {
namespace sim_control {

// ===================================================================

class SimCarStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<SimCarStatus>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_l(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_acceleration_s(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_curvature(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_curvature_change_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_relative_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_accumulated_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_odometer(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_angular_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_gear_position(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

SimCarStatus::SimCarStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.sim_control.SimCarStatus)
}
SimCarStatus::SimCarStatus(const SimCarStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&gear_position_) -
    reinterpret_cast<char*>(&x_)) + sizeof(gear_position_));
  // @@protoc_insertion_point(copy_constructor:apollo.sim_control.SimCarStatus)
}

void SimCarStatus::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&gear_position_) -
      reinterpret_cast<char*>(&x_)) + sizeof(gear_position_));
}

SimCarStatus::~SimCarStatus() {
  // @@protoc_insertion_point(destructor:apollo.sim_control.SimCarStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimCarStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SimCarStatus::ArenaDtor(void* object) {
  SimCarStatus* _this = reinterpret_cast< SimCarStatus* >(object);
  (void)_this;
}
void SimCarStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimCarStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimCarStatus& SimCarStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimCarStatus_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto.base);
  return *internal_default_instance();
}


void SimCarStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.sim_control.SimCarStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&curvature_) -
        reinterpret_cast<char*>(&x_)) + sizeof(curvature_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&curvature_change_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gear_position_) -
        reinterpret_cast<char*>(&curvature_change_rate_)) + sizeof(gear_position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimCarStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_s(&has_bits);
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double l = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_l(&has_bits);
          l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_s = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_acceleration_s(&has_bits);
          acceleration_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double curvature = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_curvature(&has_bits);
          curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double curvature_change_rate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_curvature_change_rate(&has_bits);
          curvature_change_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double relative_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_relative_time(&has_bits);
          relative_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double theta = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_theta(&has_bits);
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double accumulated_s = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_accumulated_s(&has_bits);
          accumulated_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float odometer = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_odometer(&has_bits);
          odometer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double angular_speed = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_angular_speed(&has_bits);
          angular_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 gear_position = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_gear_position(&has_bits);
          gear_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimCarStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.sim_control.SimCarStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // optional double s = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_s(), target);
  }

  // optional double l = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_l(), target);
  }

  // optional double speed = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_speed(), target);
  }

  // optional double acceleration_s = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_acceleration_s(), target);
  }

  // optional double curvature = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_curvature(), target);
  }

  // optional double curvature_change_rate = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_curvature_change_rate(), target);
  }

  // optional double relative_time = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_relative_time(), target);
  }

  // optional double theta = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_theta(), target);
  }

  // optional double accumulated_s = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_accumulated_s(), target);
  }

  // optional float odometer = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_odometer(), target);
  }

  // optional double angular_speed = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_angular_speed(), target);
  }

  // optional int32 gear_position = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_gear_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.sim_control.SimCarStatus)
  return target;
}

size_t SimCarStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.sim_control.SimCarStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double s = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double l = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double speed = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double acceleration_s = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double curvature = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional double curvature_change_rate = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double relative_time = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double theta = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double accumulated_s = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double angular_speed = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional float odometer = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional int32 gear_position = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gear_position());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimCarStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.sim_control.SimCarStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SimCarStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimCarStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.sim_control.SimCarStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.sim_control.SimCarStatus)
    MergeFrom(*source);
  }
}

void SimCarStatus::MergeFrom(const SimCarStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.sim_control.SimCarStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000010u) {
      l_ = from.l_;
    }
    if (cached_has_bits & 0x00000020u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000040u) {
      acceleration_s_ = from.acceleration_s_;
    }
    if (cached_has_bits & 0x00000080u) {
      curvature_ = from.curvature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      curvature_change_rate_ = from.curvature_change_rate_;
    }
    if (cached_has_bits & 0x00000200u) {
      relative_time_ = from.relative_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00000800u) {
      accumulated_s_ = from.accumulated_s_;
    }
    if (cached_has_bits & 0x00001000u) {
      angular_speed_ = from.angular_speed_;
    }
    if (cached_has_bits & 0x00002000u) {
      odometer_ = from.odometer_;
    }
    if (cached_has_bits & 0x00004000u) {
      gear_position_ = from.gear_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SimCarStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.sim_control.SimCarStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimCarStatus::CopyFrom(const SimCarStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.sim_control.SimCarStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimCarStatus::IsInitialized() const {
  return true;
}

void SimCarStatus::InternalSwap(SimCarStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimCarStatus, gear_position_)
      + sizeof(SimCarStatus::gear_position_)
      - PROTOBUF_FIELD_OFFSET(SimCarStatus, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimCarStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SimControlData::_Internal {
 public:
  using HasBits = decltype(std::declval<SimControlData>()._has_bits_);
  static const ::apollo::common::Header& header(const SimControlData* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::sim_control::SimCarStatus& sim_car_status(const SimControlData* msg);
  static void set_has_sim_car_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::Header&
SimControlData::_Internal::header(const SimControlData* msg) {
  return *msg->header_;
}
const ::apollo::sim_control::SimCarStatus&
SimControlData::_Internal::sim_car_status(const SimControlData* msg) {
  return *msg->sim_car_status_;
}
void SimControlData::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SimControlData::SimControlData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.sim_control.SimControlData)
}
SimControlData::SimControlData(const SimControlData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_sim_car_status()) {
    sim_car_status_ = new ::apollo::sim_control::SimCarStatus(*from.sim_car_status_);
  } else {
    sim_car_status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.sim_control.SimControlData)
}

void SimControlData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimControlData_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sim_car_status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(sim_car_status_));
}

SimControlData::~SimControlData() {
  // @@protoc_insertion_point(destructor:apollo.sim_control.SimControlData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimControlData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete sim_car_status_;
}

void SimControlData::ArenaDtor(void* object) {
  SimControlData* _this = reinterpret_cast< SimControlData* >(object);
  (void)_this;
}
void SimControlData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimControlData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimControlData& SimControlData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimControlData_modules_2fdreamview_2fbackend_2fsim_5fcontrol_5fmanager_2fproto_2fsim_5fcontrol_5finternal_2eproto.base);
  return *internal_default_instance();
}


void SimControlData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.sim_control.SimControlData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sim_car_status_ != nullptr);
      sim_car_status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimControlData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.sim_control.SimCarStatus sim_car_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sim_car_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimControlData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.sim_control.SimControlData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional .apollo.sim_control.SimCarStatus sim_car_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sim_car_status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.sim_control.SimControlData)
  return target;
}

size_t SimControlData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.sim_control.SimControlData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.sim_control.SimCarStatus sim_car_status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sim_car_status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimControlData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.sim_control.SimControlData)
  GOOGLE_DCHECK_NE(&from, this);
  const SimControlData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimControlData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.sim_control.SimControlData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.sim_control.SimControlData)
    MergeFrom(*source);
  }
}

void SimControlData::MergeFrom(const SimControlData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.sim_control.SimControlData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sim_car_status()->::apollo::sim_control::SimCarStatus::MergeFrom(from._internal_sim_car_status());
    }
  }
}

void SimControlData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.sim_control.SimControlData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimControlData::CopyFrom(const SimControlData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.sim_control.SimControlData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimControlData::IsInitialized() const {
  return true;
}

void SimControlData::InternalSwap(SimControlData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimControlData, sim_car_status_)
      + sizeof(SimControlData::sim_car_status_)
      - PROTOBUF_FIELD_OFFSET(SimControlData, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimControlData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sim_control
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::sim_control::SimCarStatus* Arena::CreateMaybeMessage< ::apollo::sim_control::SimCarStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::sim_control::SimCarStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::sim_control::SimControlData* Arena::CreateMaybeMessage< ::apollo::sim_control::SimControlData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::sim_control::SimControlData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
