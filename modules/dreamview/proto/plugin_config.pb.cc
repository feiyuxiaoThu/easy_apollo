// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/plugin_config.proto

#include "modules/dreamview/proto/plugin_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelConf_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto;
namespace apollo {
namespace dreamview {
class ChannelConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelConf> _instance;
} _ChannelConf_default_instance_;
class PluginConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PluginConfig> _instance;
} _PluginConfig_default_instance_;
}  // namespace dreamview
}  // namespace apollo
static void InitDefaultsscc_info_ChannelConf_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_ChannelConf_default_instance_;
    new (ptr) ::apollo::dreamview::ChannelConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelConf_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelConf_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_PluginConfig_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_PluginConfig_default_instance_;
    new (ptr) ::apollo::dreamview::PluginConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PluginConfig_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PluginConfig_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto}, {
      &scc_info_ChannelConf_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ChannelConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ChannelConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ChannelConf, location_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ChannelConf, support_msg_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ChannelConf, pending_queue_size_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::PluginConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::PluginConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::PluginConfig, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::PluginConfig, launch_command_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::PluginConfig, reader_channel_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::PluginConfig, writer_channel_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::PluginConfig, plugin_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::PluginConfig, process_command_keywords_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::PluginConfig, stop_command_),
  0,
  1,
  ~0u,
  ~0u,
  3,
  ~0u,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::apollo::dreamview::ChannelConf)},
  { 11, 23, sizeof(::apollo::dreamview::PluginConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_ChannelConf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_PluginConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+modules/dreamview/proto/plugin_config."
  "proto\022\020apollo.dreamview\"X\n\013ChannelConf\022\020"
  "\n\010location\030\001 \001(\t\022\030\n\020support_msg_name\030\002 \003"
  "(\t\022\035\n\022pending_queue_size\030\003 \001(\r:\0011\"\323\002\n\014Pl"
  "uginConfig\022\014\n\004name\030\001 \001(\t\022\026\n\016launch_comma"
  "nd\030\002 \001(\t\022:\n\023reader_channel_conf\030\003 \003(\0132\035."
  "apollo.dreamview.ChannelConf\022:\n\023writer_c"
  "hannel_conf\030\004 \003(\0132\035.apollo.dreamview.Cha"
  "nnelConf\022>\n\013plugin_type\030\005 \001(\0162).apollo.d"
  "reamview.PluginConfig.PluginType\022 \n\030proc"
  "ess_command_keywords\030\006 \003(\t\022\024\n\014stop_comma"
  "nd\030\007 \001(\t\"-\n\nPluginType\022\023\n\017cyber_componen"
  "t\020\000\022\n\n\006binary\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto_sccs[2] = {
  &scc_info_ChannelConf_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto.base,
  &scc_info_PluginConfig_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto = {
  false, false, descriptor_table_protodef_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto, "modules/dreamview/proto/plugin_config.proto", 495,
  &descriptor_table_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto_once, descriptor_table_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto_sccs, descriptor_table_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto, 2, file_level_enum_descriptors_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto, file_level_service_descriptors_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto)), true);
namespace apollo {
namespace dreamview {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PluginConfig_PluginType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto[0];
}
bool PluginConfig_PluginType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PluginConfig_PluginType PluginConfig::cyber_component;
constexpr PluginConfig_PluginType PluginConfig::binary;
constexpr PluginConfig_PluginType PluginConfig::PluginType_MIN;
constexpr PluginConfig_PluginType PluginConfig::PluginType_MAX;
constexpr int PluginConfig::PluginType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ChannelConf::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelConf>()._has_bits_);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pending_queue_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChannelConf::ChannelConf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  support_msg_name_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.ChannelConf)
}
ChannelConf::ChannelConf(const ChannelConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      support_msg_name_(from.support_msg_name_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_location()) {
    location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_location(), 
      GetArena());
  }
  pending_queue_size_ = from.pending_queue_size_;
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.ChannelConf)
}

void ChannelConf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelConf_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto.base);
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pending_queue_size_ = 1u;
}

ChannelConf::~ChannelConf() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.ChannelConf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelConf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelConf::ArenaDtor(void* object) {
  ChannelConf* _this = reinterpret_cast< ChannelConf* >(object);
  (void)_this;
}
void ChannelConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelConf& ChannelConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelConf_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ChannelConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.ChannelConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  support_msg_name_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      location_.ClearNonDefaultToEmpty();
    }
    pending_queue_size_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.ChannelConf.location");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string support_msg_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_support_msg_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.ChannelConf.support_msg_name");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 pending_queue_size = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pending_queue_size(&has_bits);
          pending_queue_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.ChannelConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string location = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.ChannelConf.location");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_location(), target);
  }

  // repeated string support_msg_name = 2;
  for (int i = 0, n = this->_internal_support_msg_name_size(); i < n; i++) {
    const auto& s = this->_internal_support_msg_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.ChannelConf.support_msg_name");
    target = stream->WriteString(2, s, target);
  }

  // optional uint32 pending_queue_size = 3 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pending_queue_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.ChannelConf)
  return target;
}

size_t ChannelConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.ChannelConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string support_msg_name = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(support_msg_name_.size());
  for (int i = 0, n = support_msg_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      support_msg_name_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string location = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_location());
    }

    // optional uint32 pending_queue_size = 3 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pending_queue_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.ChannelConf)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.ChannelConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.ChannelConf)
    MergeFrom(*source);
  }
}

void ChannelConf::MergeFrom(const ChannelConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.ChannelConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  support_msg_name_.MergeFrom(from.support_msg_name_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_location(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      pending_queue_size_ = from.pending_queue_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChannelConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.ChannelConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelConf::CopyFrom(const ChannelConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.ChannelConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelConf::IsInitialized() const {
  return true;
}

void ChannelConf::InternalSwap(ChannelConf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  support_msg_name_.InternalSwap(&other->support_msg_name_);
  location_.Swap(&other->location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(pending_queue_size_, other->pending_queue_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelConf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PluginConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PluginConfig>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_launch_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_plugin_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_stop_command(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PluginConfig::PluginConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reader_channel_conf_(arena),
  writer_channel_conf_(arena),
  process_command_keywords_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.PluginConfig)
}
PluginConfig::PluginConfig(const PluginConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      reader_channel_conf_(from.reader_channel_conf_),
      writer_channel_conf_(from.writer_channel_conf_),
      process_command_keywords_(from.process_command_keywords_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  launch_command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_launch_command()) {
    launch_command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_launch_command(), 
      GetArena());
  }
  stop_command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_stop_command()) {
    stop_command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stop_command(), 
      GetArena());
  }
  plugin_type_ = from.plugin_type_;
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.PluginConfig)
}

void PluginConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PluginConfig_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  launch_command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stop_command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plugin_type_ = 0;
}

PluginConfig::~PluginConfig() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.PluginConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PluginConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  launch_command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stop_command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PluginConfig::ArenaDtor(void* object) {
  PluginConfig* _this = reinterpret_cast< PluginConfig* >(object);
  (void)_this;
}
void PluginConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PluginConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PluginConfig& PluginConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PluginConfig_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PluginConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.PluginConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reader_channel_conf_.Clear();
  writer_channel_conf_.Clear();
  process_command_keywords_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      launch_command_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      stop_command_.ClearNonDefaultToEmpty();
    }
  }
  plugin_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PluginConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.PluginConfig.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string launch_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_launch_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.PluginConfig.launch_command");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.ChannelConf reader_channel_conf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reader_channel_conf(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.ChannelConf writer_channel_conf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_writer_channel_conf(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.dreamview.PluginConfig.PluginType plugin_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::dreamview::PluginConfig_PluginType_IsValid(val))) {
            _internal_set_plugin_type(static_cast<::apollo::dreamview::PluginConfig_PluginType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated string process_command_keywords = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_process_command_keywords();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.PluginConfig.process_command_keywords");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string stop_command = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_stop_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.PluginConfig.stop_command");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PluginConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.PluginConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.PluginConfig.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string launch_command = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_launch_command().data(), static_cast<int>(this->_internal_launch_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.PluginConfig.launch_command");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_launch_command(), target);
  }

  // repeated .apollo.dreamview.ChannelConf reader_channel_conf = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reader_channel_conf_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_reader_channel_conf(i), target, stream);
  }

  // repeated .apollo.dreamview.ChannelConf writer_channel_conf = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_writer_channel_conf_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_writer_channel_conf(i), target, stream);
  }

  // optional .apollo.dreamview.PluginConfig.PluginType plugin_type = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_plugin_type(), target);
  }

  // repeated string process_command_keywords = 6;
  for (int i = 0, n = this->_internal_process_command_keywords_size(); i < n; i++) {
    const auto& s = this->_internal_process_command_keywords(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.PluginConfig.process_command_keywords");
    target = stream->WriteString(6, s, target);
  }

  // optional string stop_command = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stop_command().data(), static_cast<int>(this->_internal_stop_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.PluginConfig.stop_command");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_stop_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.PluginConfig)
  return target;
}

size_t PluginConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.PluginConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dreamview.ChannelConf reader_channel_conf = 3;
  total_size += 1UL * this->_internal_reader_channel_conf_size();
  for (const auto& msg : this->reader_channel_conf_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dreamview.ChannelConf writer_channel_conf = 4;
  total_size += 1UL * this->_internal_writer_channel_conf_size();
  for (const auto& msg : this->writer_channel_conf_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string process_command_keywords = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(process_command_keywords_.size());
  for (int i = 0, n = process_command_keywords_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      process_command_keywords_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string launch_command = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_launch_command());
    }

    // optional string stop_command = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stop_command());
    }

    // optional .apollo.dreamview.PluginConfig.PluginType plugin_type = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_plugin_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PluginConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.PluginConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PluginConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PluginConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.PluginConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.PluginConfig)
    MergeFrom(*source);
  }
}

void PluginConfig::MergeFrom(const PluginConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.PluginConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reader_channel_conf_.MergeFrom(from.reader_channel_conf_);
  writer_channel_conf_.MergeFrom(from.writer_channel_conf_);
  process_command_keywords_.MergeFrom(from.process_command_keywords_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_launch_command(from._internal_launch_command());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_stop_command(from._internal_stop_command());
    }
    if (cached_has_bits & 0x00000008u) {
      plugin_type_ = from.plugin_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PluginConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.PluginConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginConfig::CopyFrom(const PluginConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.PluginConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginConfig::IsInitialized() const {
  return true;
}

void PluginConfig::InternalSwap(PluginConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reader_channel_conf_.InternalSwap(&other->reader_channel_conf_);
  writer_channel_conf_.InternalSwap(&other->writer_channel_conf_);
  process_command_keywords_.InternalSwap(&other->process_command_keywords_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  launch_command_.Swap(&other->launch_command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stop_command_.Swap(&other->stop_command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(plugin_type_, other->plugin_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PluginConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::dreamview::ChannelConf* Arena::CreateMaybeMessage< ::apollo::dreamview::ChannelConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::ChannelConf >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::PluginConfig* Arena::CreateMaybeMessage< ::apollo::dreamview::PluginConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::PluginConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
