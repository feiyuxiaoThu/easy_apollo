// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/dv_plugin_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fdv_5fplugin_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fdv_5fplugin_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fdv_5fplugin_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdreamview_2fproto_2fdv_5fplugin_5fmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fdv_5fplugin_5fmsg_2eproto;
namespace apollo {
namespace dreamview {
class DvPluginMsg;
class DvPluginMsgDefaultTypeInternal;
extern DvPluginMsgDefaultTypeInternal _DvPluginMsg_default_instance_;
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::dreamview::DvPluginMsg* Arena::CreateMaybeMessage<::apollo::dreamview::DvPluginMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace dreamview {

enum DvPluginMsg_ComponentType : int {
  DvPluginMsg_ComponentType_module = 0,
  DvPluginMsg_ComponentType_plugins = 1
};
bool DvPluginMsg_ComponentType_IsValid(int value);
constexpr DvPluginMsg_ComponentType DvPluginMsg_ComponentType_ComponentType_MIN = DvPluginMsg_ComponentType_module;
constexpr DvPluginMsg_ComponentType DvPluginMsg_ComponentType_ComponentType_MAX = DvPluginMsg_ComponentType_plugins;
constexpr int DvPluginMsg_ComponentType_ComponentType_ARRAYSIZE = DvPluginMsg_ComponentType_ComponentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DvPluginMsg_ComponentType_descriptor();
template<typename T>
inline const std::string& DvPluginMsg_ComponentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DvPluginMsg_ComponentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DvPluginMsg_ComponentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DvPluginMsg_ComponentType_descriptor(), enum_t_value);
}
inline bool DvPluginMsg_ComponentType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DvPluginMsg_ComponentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DvPluginMsg_ComponentType>(
    DvPluginMsg_ComponentType_descriptor(), name, value);
}
// ===================================================================

class DvPluginMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.DvPluginMsg) */ {
 public:
  inline DvPluginMsg() : DvPluginMsg(nullptr) {}
  virtual ~DvPluginMsg();

  DvPluginMsg(const DvPluginMsg& from);
  DvPluginMsg(DvPluginMsg&& from) noexcept
    : DvPluginMsg() {
    *this = ::std::move(from);
  }

  inline DvPluginMsg& operator=(const DvPluginMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline DvPluginMsg& operator=(DvPluginMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DvPluginMsg& default_instance();

  static inline const DvPluginMsg* internal_default_instance() {
    return reinterpret_cast<const DvPluginMsg*>(
               &_DvPluginMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DvPluginMsg& a, DvPluginMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(DvPluginMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DvPluginMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DvPluginMsg* New() const final {
    return CreateMaybeMessage<DvPluginMsg>(nullptr);
  }

  DvPluginMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DvPluginMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DvPluginMsg& from);
  void MergeFrom(const DvPluginMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DvPluginMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.DvPluginMsg";
  }
  protected:
  explicit DvPluginMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fdv_5fplugin_5fmsg_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fdv_5fplugin_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DvPluginMsg_ComponentType ComponentType;
  static constexpr ComponentType module =
    DvPluginMsg_ComponentType_module;
  static constexpr ComponentType plugins =
    DvPluginMsg_ComponentType_plugins;
  static inline bool ComponentType_IsValid(int value) {
    return DvPluginMsg_ComponentType_IsValid(value);
  }
  static constexpr ComponentType ComponentType_MIN =
    DvPluginMsg_ComponentType_ComponentType_MIN;
  static constexpr ComponentType ComponentType_MAX =
    DvPluginMsg_ComponentType_ComponentType_MAX;
  static constexpr int ComponentType_ARRAYSIZE =
    DvPluginMsg_ComponentType_ComponentType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ComponentType_descriptor() {
    return DvPluginMsg_ComponentType_descriptor();
  }
  template<typename T>
  static inline const std::string& ComponentType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ComponentType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ComponentType_Name.");
    return DvPluginMsg_ComponentType_Name(enum_t_value);
  }
  static inline bool ComponentType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ComponentType* value) {
    return DvPluginMsg_ComponentType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kInfoFieldNumber = 3,
    kSourceFieldNumber = 4,
    kTargetFieldNumber = 5,
    kRequestIdFieldNumber = 8,
    kHeaderFieldNumber = 1,
    kSourceTypeFieldNumber = 6,
    kTargetTypeFieldNumber = 7,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string info = 3;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // optional string source = 4;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional string target = 5;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // optional string request_id = 8;
  bool has_request_id() const;
  private:
  bool _internal_has_request_id() const;
  public:
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional .apollo.dreamview.DvPluginMsg.ComponentType source_type = 6;
  bool has_source_type() const;
  private:
  bool _internal_has_source_type() const;
  public:
  void clear_source_type();
  ::apollo::dreamview::DvPluginMsg_ComponentType source_type() const;
  void set_source_type(::apollo::dreamview::DvPluginMsg_ComponentType value);
  private:
  ::apollo::dreamview::DvPluginMsg_ComponentType _internal_source_type() const;
  void _internal_set_source_type(::apollo::dreamview::DvPluginMsg_ComponentType value);
  public:

  // optional .apollo.dreamview.DvPluginMsg.ComponentType target_type = 7;
  bool has_target_type() const;
  private:
  bool _internal_has_target_type() const;
  public:
  void clear_target_type();
  ::apollo::dreamview::DvPluginMsg_ComponentType target_type() const;
  void set_target_type(::apollo::dreamview::DvPluginMsg_ComponentType value);
  private:
  ::apollo::dreamview::DvPluginMsg_ComponentType _internal_target_type() const;
  void _internal_set_target_type(::apollo::dreamview::DvPluginMsg_ComponentType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.DvPluginMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::apollo::common::Header* header_;
  int source_type_;
  int target_type_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fdv_5fplugin_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DvPluginMsg

// optional .apollo.common.Header header = 1;
inline bool DvPluginMsg::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool DvPluginMsg::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& DvPluginMsg::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& DvPluginMsg::header() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DvPluginMsg.header)
  return _internal_header();
}
inline void DvPluginMsg::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.dreamview.DvPluginMsg.header)
}
inline ::apollo::common::Header* DvPluginMsg::release_header() {
  _has_bits_[0] &= ~0x00000020u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::common::Header* DvPluginMsg::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.DvPluginMsg.header)
  _has_bits_[0] &= ~0x00000020u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* DvPluginMsg::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000020u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* DvPluginMsg::mutable_header() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.DvPluginMsg.header)
  return _internal_mutable_header();
}
inline void DvPluginMsg::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.DvPluginMsg.header)
}

// optional string name = 2;
inline bool DvPluginMsg::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DvPluginMsg::has_name() const {
  return _internal_has_name();
}
inline void DvPluginMsg::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DvPluginMsg::name() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DvPluginMsg.name)
  return _internal_name();
}
inline void DvPluginMsg::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.DvPluginMsg.name)
}
inline std::string* DvPluginMsg::mutable_name() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.DvPluginMsg.name)
  return _internal_mutable_name();
}
inline const std::string& DvPluginMsg::_internal_name() const {
  return name_.Get();
}
inline void DvPluginMsg::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DvPluginMsg::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.DvPluginMsg.name)
}
inline void DvPluginMsg::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.DvPluginMsg.name)
}
inline void DvPluginMsg::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.DvPluginMsg.name)
}
inline std::string* DvPluginMsg::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DvPluginMsg::release_name() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.DvPluginMsg.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DvPluginMsg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.DvPluginMsg.name)
}

// optional string info = 3;
inline bool DvPluginMsg::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DvPluginMsg::has_info() const {
  return _internal_has_info();
}
inline void DvPluginMsg::clear_info() {
  info_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DvPluginMsg::info() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DvPluginMsg.info)
  return _internal_info();
}
inline void DvPluginMsg::set_info(const std::string& value) {
  _internal_set_info(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.DvPluginMsg.info)
}
inline std::string* DvPluginMsg::mutable_info() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.DvPluginMsg.info)
  return _internal_mutable_info();
}
inline const std::string& DvPluginMsg::_internal_info() const {
  return info_.Get();
}
inline void DvPluginMsg::_internal_set_info(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DvPluginMsg::set_info(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  info_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.DvPluginMsg.info)
}
inline void DvPluginMsg::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.DvPluginMsg.info)
}
inline void DvPluginMsg::set_info(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.DvPluginMsg.info)
}
inline std::string* DvPluginMsg::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000002u;
  return info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DvPluginMsg::release_info() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.DvPluginMsg.info)
  if (!_internal_has_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return info_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DvPluginMsg::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.DvPluginMsg.info)
}

// optional string source = 4;
inline bool DvPluginMsg::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DvPluginMsg::has_source() const {
  return _internal_has_source();
}
inline void DvPluginMsg::clear_source() {
  source_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DvPluginMsg::source() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DvPluginMsg.source)
  return _internal_source();
}
inline void DvPluginMsg::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.DvPluginMsg.source)
}
inline std::string* DvPluginMsg::mutable_source() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.DvPluginMsg.source)
  return _internal_mutable_source();
}
inline const std::string& DvPluginMsg::_internal_source() const {
  return source_.Get();
}
inline void DvPluginMsg::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DvPluginMsg::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  source_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.DvPluginMsg.source)
}
inline void DvPluginMsg::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.DvPluginMsg.source)
}
inline void DvPluginMsg::set_source(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.DvPluginMsg.source)
}
inline std::string* DvPluginMsg::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000004u;
  return source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DvPluginMsg::release_source() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.DvPluginMsg.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DvPluginMsg::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.DvPluginMsg.source)
}

// optional string target = 5;
inline bool DvPluginMsg::_internal_has_target() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DvPluginMsg::has_target() const {
  return _internal_has_target();
}
inline void DvPluginMsg::clear_target() {
  target_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& DvPluginMsg::target() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DvPluginMsg.target)
  return _internal_target();
}
inline void DvPluginMsg::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.DvPluginMsg.target)
}
inline std::string* DvPluginMsg::mutable_target() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.DvPluginMsg.target)
  return _internal_mutable_target();
}
inline const std::string& DvPluginMsg::_internal_target() const {
  return target_.Get();
}
inline void DvPluginMsg::_internal_set_target(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DvPluginMsg::set_target(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  target_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.DvPluginMsg.target)
}
inline void DvPluginMsg::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.DvPluginMsg.target)
}
inline void DvPluginMsg::set_target(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.DvPluginMsg.target)
}
inline std::string* DvPluginMsg::_internal_mutable_target() {
  _has_bits_[0] |= 0x00000008u;
  return target_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DvPluginMsg::release_target() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.DvPluginMsg.target)
  if (!_internal_has_target()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return target_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DvPluginMsg::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.DvPluginMsg.target)
}

// optional .apollo.dreamview.DvPluginMsg.ComponentType source_type = 6;
inline bool DvPluginMsg::_internal_has_source_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DvPluginMsg::has_source_type() const {
  return _internal_has_source_type();
}
inline void DvPluginMsg::clear_source_type() {
  source_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::apollo::dreamview::DvPluginMsg_ComponentType DvPluginMsg::_internal_source_type() const {
  return static_cast< ::apollo::dreamview::DvPluginMsg_ComponentType >(source_type_);
}
inline ::apollo::dreamview::DvPluginMsg_ComponentType DvPluginMsg::source_type() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DvPluginMsg.source_type)
  return _internal_source_type();
}
inline void DvPluginMsg::_internal_set_source_type(::apollo::dreamview::DvPluginMsg_ComponentType value) {
  assert(::apollo::dreamview::DvPluginMsg_ComponentType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  source_type_ = value;
}
inline void DvPluginMsg::set_source_type(::apollo::dreamview::DvPluginMsg_ComponentType value) {
  _internal_set_source_type(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.DvPluginMsg.source_type)
}

// optional .apollo.dreamview.DvPluginMsg.ComponentType target_type = 7;
inline bool DvPluginMsg::_internal_has_target_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DvPluginMsg::has_target_type() const {
  return _internal_has_target_type();
}
inline void DvPluginMsg::clear_target_type() {
  target_type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::apollo::dreamview::DvPluginMsg_ComponentType DvPluginMsg::_internal_target_type() const {
  return static_cast< ::apollo::dreamview::DvPluginMsg_ComponentType >(target_type_);
}
inline ::apollo::dreamview::DvPluginMsg_ComponentType DvPluginMsg::target_type() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DvPluginMsg.target_type)
  return _internal_target_type();
}
inline void DvPluginMsg::_internal_set_target_type(::apollo::dreamview::DvPluginMsg_ComponentType value) {
  assert(::apollo::dreamview::DvPluginMsg_ComponentType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  target_type_ = value;
}
inline void DvPluginMsg::set_target_type(::apollo::dreamview::DvPluginMsg_ComponentType value) {
  _internal_set_target_type(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.DvPluginMsg.target_type)
}

// optional string request_id = 8;
inline bool DvPluginMsg::_internal_has_request_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DvPluginMsg::has_request_id() const {
  return _internal_has_request_id();
}
inline void DvPluginMsg::clear_request_id() {
  request_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& DvPluginMsg::request_id() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DvPluginMsg.request_id)
  return _internal_request_id();
}
inline void DvPluginMsg::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.DvPluginMsg.request_id)
}
inline std::string* DvPluginMsg::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.DvPluginMsg.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& DvPluginMsg::_internal_request_id() const {
  return request_id_.Get();
}
inline void DvPluginMsg::_internal_set_request_id(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DvPluginMsg::set_request_id(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  request_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.DvPluginMsg.request_id)
}
inline void DvPluginMsg::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.DvPluginMsg.request_id)
}
inline void DvPluginMsg::set_request_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.DvPluginMsg.request_id)
}
inline std::string* DvPluginMsg::_internal_mutable_request_id() {
  _has_bits_[0] |= 0x00000010u;
  return request_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DvPluginMsg::release_request_id() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.DvPluginMsg.request_id)
  if (!_internal_has_request_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return request_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DvPluginMsg::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.DvPluginMsg.request_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::dreamview::DvPluginMsg_ComponentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::dreamview::DvPluginMsg_ComponentType>() {
  return ::apollo::dreamview::DvPluginMsg_ComponentType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fdv_5fplugin_5fmsg_2eproto
