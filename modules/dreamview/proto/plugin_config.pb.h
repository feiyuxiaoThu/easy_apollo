// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/plugin_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto;
namespace apollo {
namespace dreamview {
class ChannelConf;
class ChannelConfDefaultTypeInternal;
extern ChannelConfDefaultTypeInternal _ChannelConf_default_instance_;
class PluginConfig;
class PluginConfigDefaultTypeInternal;
extern PluginConfigDefaultTypeInternal _PluginConfig_default_instance_;
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::dreamview::ChannelConf* Arena::CreateMaybeMessage<::apollo::dreamview::ChannelConf>(Arena*);
template<> ::apollo::dreamview::PluginConfig* Arena::CreateMaybeMessage<::apollo::dreamview::PluginConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace dreamview {

enum PluginConfig_PluginType : int {
  PluginConfig_PluginType_cyber_component = 0,
  PluginConfig_PluginType_binary = 1
};
bool PluginConfig_PluginType_IsValid(int value);
constexpr PluginConfig_PluginType PluginConfig_PluginType_PluginType_MIN = PluginConfig_PluginType_cyber_component;
constexpr PluginConfig_PluginType PluginConfig_PluginType_PluginType_MAX = PluginConfig_PluginType_binary;
constexpr int PluginConfig_PluginType_PluginType_ARRAYSIZE = PluginConfig_PluginType_PluginType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PluginConfig_PluginType_descriptor();
template<typename T>
inline const std::string& PluginConfig_PluginType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PluginConfig_PluginType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PluginConfig_PluginType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PluginConfig_PluginType_descriptor(), enum_t_value);
}
inline bool PluginConfig_PluginType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PluginConfig_PluginType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PluginConfig_PluginType>(
    PluginConfig_PluginType_descriptor(), name, value);
}
// ===================================================================

class ChannelConf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.ChannelConf) */ {
 public:
  inline ChannelConf() : ChannelConf(nullptr) {}
  virtual ~ChannelConf();

  ChannelConf(const ChannelConf& from);
  ChannelConf(ChannelConf&& from) noexcept
    : ChannelConf() {
    *this = ::std::move(from);
  }

  inline ChannelConf& operator=(const ChannelConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelConf& operator=(ChannelConf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelConf& default_instance();

  static inline const ChannelConf* internal_default_instance() {
    return reinterpret_cast<const ChannelConf*>(
               &_ChannelConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChannelConf& a, ChannelConf& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelConf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelConf* New() const final {
    return CreateMaybeMessage<ChannelConf>(nullptr);
  }

  ChannelConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelConf& from);
  void MergeFrom(const ChannelConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.ChannelConf";
  }
  protected:
  explicit ChannelConf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupportMsgNameFieldNumber = 2,
    kLocationFieldNumber = 1,
    kPendingQueueSizeFieldNumber = 3,
  };
  // repeated string support_msg_name = 2;
  int support_msg_name_size() const;
  private:
  int _internal_support_msg_name_size() const;
  public:
  void clear_support_msg_name();
  const std::string& support_msg_name(int index) const;
  std::string* mutable_support_msg_name(int index);
  void set_support_msg_name(int index, const std::string& value);
  void set_support_msg_name(int index, std::string&& value);
  void set_support_msg_name(int index, const char* value);
  void set_support_msg_name(int index, const char* value, size_t size);
  std::string* add_support_msg_name();
  void add_support_msg_name(const std::string& value);
  void add_support_msg_name(std::string&& value);
  void add_support_msg_name(const char* value);
  void add_support_msg_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& support_msg_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_support_msg_name();
  private:
  const std::string& _internal_support_msg_name(int index) const;
  std::string* _internal_add_support_msg_name();
  public:

  // optional string location = 1;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // optional uint32 pending_queue_size = 3 [default = 1];
  bool has_pending_queue_size() const;
  private:
  bool _internal_has_pending_queue_size() const;
  public:
  void clear_pending_queue_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 pending_queue_size() const;
  void set_pending_queue_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pending_queue_size() const;
  void _internal_set_pending_queue_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.ChannelConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> support_msg_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pending_queue_size_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PluginConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.PluginConfig) */ {
 public:
  inline PluginConfig() : PluginConfig(nullptr) {}
  virtual ~PluginConfig();

  PluginConfig(const PluginConfig& from);
  PluginConfig(PluginConfig&& from) noexcept
    : PluginConfig() {
    *this = ::std::move(from);
  }

  inline PluginConfig& operator=(const PluginConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PluginConfig& operator=(PluginConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PluginConfig& default_instance();

  static inline const PluginConfig* internal_default_instance() {
    return reinterpret_cast<const PluginConfig*>(
               &_PluginConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PluginConfig& a, PluginConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PluginConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PluginConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PluginConfig* New() const final {
    return CreateMaybeMessage<PluginConfig>(nullptr);
  }

  PluginConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PluginConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PluginConfig& from);
  void MergeFrom(const PluginConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PluginConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.PluginConfig";
  }
  protected:
  explicit PluginConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PluginConfig_PluginType PluginType;
  static constexpr PluginType cyber_component =
    PluginConfig_PluginType_cyber_component;
  static constexpr PluginType binary =
    PluginConfig_PluginType_binary;
  static inline bool PluginType_IsValid(int value) {
    return PluginConfig_PluginType_IsValid(value);
  }
  static constexpr PluginType PluginType_MIN =
    PluginConfig_PluginType_PluginType_MIN;
  static constexpr PluginType PluginType_MAX =
    PluginConfig_PluginType_PluginType_MAX;
  static constexpr int PluginType_ARRAYSIZE =
    PluginConfig_PluginType_PluginType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PluginType_descriptor() {
    return PluginConfig_PluginType_descriptor();
  }
  template<typename T>
  static inline const std::string& PluginType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PluginType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PluginType_Name.");
    return PluginConfig_PluginType_Name(enum_t_value);
  }
  static inline bool PluginType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PluginType* value) {
    return PluginConfig_PluginType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReaderChannelConfFieldNumber = 3,
    kWriterChannelConfFieldNumber = 4,
    kProcessCommandKeywordsFieldNumber = 6,
    kNameFieldNumber = 1,
    kLaunchCommandFieldNumber = 2,
    kStopCommandFieldNumber = 7,
    kPluginTypeFieldNumber = 5,
  };
  // repeated .apollo.dreamview.ChannelConf reader_channel_conf = 3;
  int reader_channel_conf_size() const;
  private:
  int _internal_reader_channel_conf_size() const;
  public:
  void clear_reader_channel_conf();
  ::apollo::dreamview::ChannelConf* mutable_reader_channel_conf(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ChannelConf >*
      mutable_reader_channel_conf();
  private:
  const ::apollo::dreamview::ChannelConf& _internal_reader_channel_conf(int index) const;
  ::apollo::dreamview::ChannelConf* _internal_add_reader_channel_conf();
  public:
  const ::apollo::dreamview::ChannelConf& reader_channel_conf(int index) const;
  ::apollo::dreamview::ChannelConf* add_reader_channel_conf();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ChannelConf >&
      reader_channel_conf() const;

  // repeated .apollo.dreamview.ChannelConf writer_channel_conf = 4;
  int writer_channel_conf_size() const;
  private:
  int _internal_writer_channel_conf_size() const;
  public:
  void clear_writer_channel_conf();
  ::apollo::dreamview::ChannelConf* mutable_writer_channel_conf(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ChannelConf >*
      mutable_writer_channel_conf();
  private:
  const ::apollo::dreamview::ChannelConf& _internal_writer_channel_conf(int index) const;
  ::apollo::dreamview::ChannelConf* _internal_add_writer_channel_conf();
  public:
  const ::apollo::dreamview::ChannelConf& writer_channel_conf(int index) const;
  ::apollo::dreamview::ChannelConf* add_writer_channel_conf();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ChannelConf >&
      writer_channel_conf() const;

  // repeated string process_command_keywords = 6;
  int process_command_keywords_size() const;
  private:
  int _internal_process_command_keywords_size() const;
  public:
  void clear_process_command_keywords();
  const std::string& process_command_keywords(int index) const;
  std::string* mutable_process_command_keywords(int index);
  void set_process_command_keywords(int index, const std::string& value);
  void set_process_command_keywords(int index, std::string&& value);
  void set_process_command_keywords(int index, const char* value);
  void set_process_command_keywords(int index, const char* value, size_t size);
  std::string* add_process_command_keywords();
  void add_process_command_keywords(const std::string& value);
  void add_process_command_keywords(std::string&& value);
  void add_process_command_keywords(const char* value);
  void add_process_command_keywords(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& process_command_keywords() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_process_command_keywords();
  private:
  const std::string& _internal_process_command_keywords(int index) const;
  std::string* _internal_add_process_command_keywords();
  public:

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string launch_command = 2;
  bool has_launch_command() const;
  private:
  bool _internal_has_launch_command() const;
  public:
  void clear_launch_command();
  const std::string& launch_command() const;
  void set_launch_command(const std::string& value);
  void set_launch_command(std::string&& value);
  void set_launch_command(const char* value);
  void set_launch_command(const char* value, size_t size);
  std::string* mutable_launch_command();
  std::string* release_launch_command();
  void set_allocated_launch_command(std::string* launch_command);
  private:
  const std::string& _internal_launch_command() const;
  void _internal_set_launch_command(const std::string& value);
  std::string* _internal_mutable_launch_command();
  public:

  // optional string stop_command = 7;
  bool has_stop_command() const;
  private:
  bool _internal_has_stop_command() const;
  public:
  void clear_stop_command();
  const std::string& stop_command() const;
  void set_stop_command(const std::string& value);
  void set_stop_command(std::string&& value);
  void set_stop_command(const char* value);
  void set_stop_command(const char* value, size_t size);
  std::string* mutable_stop_command();
  std::string* release_stop_command();
  void set_allocated_stop_command(std::string* stop_command);
  private:
  const std::string& _internal_stop_command() const;
  void _internal_set_stop_command(const std::string& value);
  std::string* _internal_mutable_stop_command();
  public:

  // optional .apollo.dreamview.PluginConfig.PluginType plugin_type = 5;
  bool has_plugin_type() const;
  private:
  bool _internal_has_plugin_type() const;
  public:
  void clear_plugin_type();
  ::apollo::dreamview::PluginConfig_PluginType plugin_type() const;
  void set_plugin_type(::apollo::dreamview::PluginConfig_PluginType value);
  private:
  ::apollo::dreamview::PluginConfig_PluginType _internal_plugin_type() const;
  void _internal_set_plugin_type(::apollo::dreamview::PluginConfig_PluginType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.PluginConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ChannelConf > reader_channel_conf_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ChannelConf > writer_channel_conf_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> process_command_keywords_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr launch_command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_command_;
  int plugin_type_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChannelConf

// optional string location = 1;
inline bool ChannelConf::_internal_has_location() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChannelConf::has_location() const {
  return _internal_has_location();
}
inline void ChannelConf::clear_location() {
  location_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChannelConf::location() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ChannelConf.location)
  return _internal_location();
}
inline void ChannelConf::set_location(const std::string& value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ChannelConf.location)
}
inline std::string* ChannelConf::mutable_location() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ChannelConf.location)
  return _internal_mutable_location();
}
inline const std::string& ChannelConf::_internal_location() const {
  return location_.Get();
}
inline void ChannelConf::_internal_set_location(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChannelConf::set_location(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  location_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.ChannelConf.location)
}
inline void ChannelConf::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.ChannelConf.location)
}
inline void ChannelConf::set_location(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.ChannelConf.location)
}
inline std::string* ChannelConf::_internal_mutable_location() {
  _has_bits_[0] |= 0x00000001u;
  return location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChannelConf::release_location() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.ChannelConf.location)
  if (!_internal_has_location()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return location_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChannelConf::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.ChannelConf.location)
}

// repeated string support_msg_name = 2;
inline int ChannelConf::_internal_support_msg_name_size() const {
  return support_msg_name_.size();
}
inline int ChannelConf::support_msg_name_size() const {
  return _internal_support_msg_name_size();
}
inline void ChannelConf::clear_support_msg_name() {
  support_msg_name_.Clear();
}
inline std::string* ChannelConf::add_support_msg_name() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.ChannelConf.support_msg_name)
  return _internal_add_support_msg_name();
}
inline const std::string& ChannelConf::_internal_support_msg_name(int index) const {
  return support_msg_name_.Get(index);
}
inline const std::string& ChannelConf::support_msg_name(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ChannelConf.support_msg_name)
  return _internal_support_msg_name(index);
}
inline std::string* ChannelConf::mutable_support_msg_name(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ChannelConf.support_msg_name)
  return support_msg_name_.Mutable(index);
}
inline void ChannelConf::set_support_msg_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.ChannelConf.support_msg_name)
  support_msg_name_.Mutable(index)->assign(value);
}
inline void ChannelConf::set_support_msg_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.ChannelConf.support_msg_name)
  support_msg_name_.Mutable(index)->assign(std::move(value));
}
inline void ChannelConf::set_support_msg_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  support_msg_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.ChannelConf.support_msg_name)
}
inline void ChannelConf::set_support_msg_name(int index, const char* value, size_t size) {
  support_msg_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.ChannelConf.support_msg_name)
}
inline std::string* ChannelConf::_internal_add_support_msg_name() {
  return support_msg_name_.Add();
}
inline void ChannelConf::add_support_msg_name(const std::string& value) {
  support_msg_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.ChannelConf.support_msg_name)
}
inline void ChannelConf::add_support_msg_name(std::string&& value) {
  support_msg_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.ChannelConf.support_msg_name)
}
inline void ChannelConf::add_support_msg_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  support_msg_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.ChannelConf.support_msg_name)
}
inline void ChannelConf::add_support_msg_name(const char* value, size_t size) {
  support_msg_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.ChannelConf.support_msg_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChannelConf::support_msg_name() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.ChannelConf.support_msg_name)
  return support_msg_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChannelConf::mutable_support_msg_name() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.ChannelConf.support_msg_name)
  return &support_msg_name_;
}

// optional uint32 pending_queue_size = 3 [default = 1];
inline bool ChannelConf::_internal_has_pending_queue_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChannelConf::has_pending_queue_size() const {
  return _internal_has_pending_queue_size();
}
inline void ChannelConf::clear_pending_queue_size() {
  pending_queue_size_ = 1u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelConf::_internal_pending_queue_size() const {
  return pending_queue_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelConf::pending_queue_size() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ChannelConf.pending_queue_size)
  return _internal_pending_queue_size();
}
inline void ChannelConf::_internal_set_pending_queue_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  pending_queue_size_ = value;
}
inline void ChannelConf::set_pending_queue_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pending_queue_size(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ChannelConf.pending_queue_size)
}

// -------------------------------------------------------------------

// PluginConfig

// optional string name = 1;
inline bool PluginConfig::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PluginConfig::has_name() const {
  return _internal_has_name();
}
inline void PluginConfig::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PluginConfig::name() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.PluginConfig.name)
  return _internal_name();
}
inline void PluginConfig::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.PluginConfig.name)
}
inline std::string* PluginConfig::mutable_name() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.PluginConfig.name)
  return _internal_mutable_name();
}
inline const std::string& PluginConfig::_internal_name() const {
  return name_.Get();
}
inline void PluginConfig::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PluginConfig::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.PluginConfig.name)
}
inline void PluginConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.PluginConfig.name)
}
inline void PluginConfig::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.PluginConfig.name)
}
inline std::string* PluginConfig::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PluginConfig::release_name() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.PluginConfig.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PluginConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.PluginConfig.name)
}

// optional string launch_command = 2;
inline bool PluginConfig::_internal_has_launch_command() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PluginConfig::has_launch_command() const {
  return _internal_has_launch_command();
}
inline void PluginConfig::clear_launch_command() {
  launch_command_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PluginConfig::launch_command() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.PluginConfig.launch_command)
  return _internal_launch_command();
}
inline void PluginConfig::set_launch_command(const std::string& value) {
  _internal_set_launch_command(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.PluginConfig.launch_command)
}
inline std::string* PluginConfig::mutable_launch_command() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.PluginConfig.launch_command)
  return _internal_mutable_launch_command();
}
inline const std::string& PluginConfig::_internal_launch_command() const {
  return launch_command_.Get();
}
inline void PluginConfig::_internal_set_launch_command(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  launch_command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PluginConfig::set_launch_command(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  launch_command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.PluginConfig.launch_command)
}
inline void PluginConfig::set_launch_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  launch_command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.PluginConfig.launch_command)
}
inline void PluginConfig::set_launch_command(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  launch_command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.PluginConfig.launch_command)
}
inline std::string* PluginConfig::_internal_mutable_launch_command() {
  _has_bits_[0] |= 0x00000002u;
  return launch_command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PluginConfig::release_launch_command() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.PluginConfig.launch_command)
  if (!_internal_has_launch_command()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return launch_command_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PluginConfig::set_allocated_launch_command(std::string* launch_command) {
  if (launch_command != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  launch_command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), launch_command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.PluginConfig.launch_command)
}

// repeated .apollo.dreamview.ChannelConf reader_channel_conf = 3;
inline int PluginConfig::_internal_reader_channel_conf_size() const {
  return reader_channel_conf_.size();
}
inline int PluginConfig::reader_channel_conf_size() const {
  return _internal_reader_channel_conf_size();
}
inline void PluginConfig::clear_reader_channel_conf() {
  reader_channel_conf_.Clear();
}
inline ::apollo::dreamview::ChannelConf* PluginConfig::mutable_reader_channel_conf(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.PluginConfig.reader_channel_conf)
  return reader_channel_conf_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ChannelConf >*
PluginConfig::mutable_reader_channel_conf() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.PluginConfig.reader_channel_conf)
  return &reader_channel_conf_;
}
inline const ::apollo::dreamview::ChannelConf& PluginConfig::_internal_reader_channel_conf(int index) const {
  return reader_channel_conf_.Get(index);
}
inline const ::apollo::dreamview::ChannelConf& PluginConfig::reader_channel_conf(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.PluginConfig.reader_channel_conf)
  return _internal_reader_channel_conf(index);
}
inline ::apollo::dreamview::ChannelConf* PluginConfig::_internal_add_reader_channel_conf() {
  return reader_channel_conf_.Add();
}
inline ::apollo::dreamview::ChannelConf* PluginConfig::add_reader_channel_conf() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.PluginConfig.reader_channel_conf)
  return _internal_add_reader_channel_conf();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ChannelConf >&
PluginConfig::reader_channel_conf() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.PluginConfig.reader_channel_conf)
  return reader_channel_conf_;
}

// repeated .apollo.dreamview.ChannelConf writer_channel_conf = 4;
inline int PluginConfig::_internal_writer_channel_conf_size() const {
  return writer_channel_conf_.size();
}
inline int PluginConfig::writer_channel_conf_size() const {
  return _internal_writer_channel_conf_size();
}
inline void PluginConfig::clear_writer_channel_conf() {
  writer_channel_conf_.Clear();
}
inline ::apollo::dreamview::ChannelConf* PluginConfig::mutable_writer_channel_conf(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.PluginConfig.writer_channel_conf)
  return writer_channel_conf_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ChannelConf >*
PluginConfig::mutable_writer_channel_conf() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.PluginConfig.writer_channel_conf)
  return &writer_channel_conf_;
}
inline const ::apollo::dreamview::ChannelConf& PluginConfig::_internal_writer_channel_conf(int index) const {
  return writer_channel_conf_.Get(index);
}
inline const ::apollo::dreamview::ChannelConf& PluginConfig::writer_channel_conf(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.PluginConfig.writer_channel_conf)
  return _internal_writer_channel_conf(index);
}
inline ::apollo::dreamview::ChannelConf* PluginConfig::_internal_add_writer_channel_conf() {
  return writer_channel_conf_.Add();
}
inline ::apollo::dreamview::ChannelConf* PluginConfig::add_writer_channel_conf() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.PluginConfig.writer_channel_conf)
  return _internal_add_writer_channel_conf();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ChannelConf >&
PluginConfig::writer_channel_conf() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.PluginConfig.writer_channel_conf)
  return writer_channel_conf_;
}

// optional .apollo.dreamview.PluginConfig.PluginType plugin_type = 5;
inline bool PluginConfig::_internal_has_plugin_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PluginConfig::has_plugin_type() const {
  return _internal_has_plugin_type();
}
inline void PluginConfig::clear_plugin_type() {
  plugin_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::dreamview::PluginConfig_PluginType PluginConfig::_internal_plugin_type() const {
  return static_cast< ::apollo::dreamview::PluginConfig_PluginType >(plugin_type_);
}
inline ::apollo::dreamview::PluginConfig_PluginType PluginConfig::plugin_type() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.PluginConfig.plugin_type)
  return _internal_plugin_type();
}
inline void PluginConfig::_internal_set_plugin_type(::apollo::dreamview::PluginConfig_PluginType value) {
  assert(::apollo::dreamview::PluginConfig_PluginType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  plugin_type_ = value;
}
inline void PluginConfig::set_plugin_type(::apollo::dreamview::PluginConfig_PluginType value) {
  _internal_set_plugin_type(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.PluginConfig.plugin_type)
}

// repeated string process_command_keywords = 6;
inline int PluginConfig::_internal_process_command_keywords_size() const {
  return process_command_keywords_.size();
}
inline int PluginConfig::process_command_keywords_size() const {
  return _internal_process_command_keywords_size();
}
inline void PluginConfig::clear_process_command_keywords() {
  process_command_keywords_.Clear();
}
inline std::string* PluginConfig::add_process_command_keywords() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.PluginConfig.process_command_keywords)
  return _internal_add_process_command_keywords();
}
inline const std::string& PluginConfig::_internal_process_command_keywords(int index) const {
  return process_command_keywords_.Get(index);
}
inline const std::string& PluginConfig::process_command_keywords(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.PluginConfig.process_command_keywords)
  return _internal_process_command_keywords(index);
}
inline std::string* PluginConfig::mutable_process_command_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.PluginConfig.process_command_keywords)
  return process_command_keywords_.Mutable(index);
}
inline void PluginConfig::set_process_command_keywords(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.PluginConfig.process_command_keywords)
  process_command_keywords_.Mutable(index)->assign(value);
}
inline void PluginConfig::set_process_command_keywords(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.PluginConfig.process_command_keywords)
  process_command_keywords_.Mutable(index)->assign(std::move(value));
}
inline void PluginConfig::set_process_command_keywords(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  process_command_keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.PluginConfig.process_command_keywords)
}
inline void PluginConfig::set_process_command_keywords(int index, const char* value, size_t size) {
  process_command_keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.PluginConfig.process_command_keywords)
}
inline std::string* PluginConfig::_internal_add_process_command_keywords() {
  return process_command_keywords_.Add();
}
inline void PluginConfig::add_process_command_keywords(const std::string& value) {
  process_command_keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.PluginConfig.process_command_keywords)
}
inline void PluginConfig::add_process_command_keywords(std::string&& value) {
  process_command_keywords_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.PluginConfig.process_command_keywords)
}
inline void PluginConfig::add_process_command_keywords(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  process_command_keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.PluginConfig.process_command_keywords)
}
inline void PluginConfig::add_process_command_keywords(const char* value, size_t size) {
  process_command_keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.PluginConfig.process_command_keywords)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PluginConfig::process_command_keywords() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.PluginConfig.process_command_keywords)
  return process_command_keywords_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PluginConfig::mutable_process_command_keywords() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.PluginConfig.process_command_keywords)
  return &process_command_keywords_;
}

// optional string stop_command = 7;
inline bool PluginConfig::_internal_has_stop_command() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PluginConfig::has_stop_command() const {
  return _internal_has_stop_command();
}
inline void PluginConfig::clear_stop_command() {
  stop_command_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PluginConfig::stop_command() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.PluginConfig.stop_command)
  return _internal_stop_command();
}
inline void PluginConfig::set_stop_command(const std::string& value) {
  _internal_set_stop_command(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.PluginConfig.stop_command)
}
inline std::string* PluginConfig::mutable_stop_command() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.PluginConfig.stop_command)
  return _internal_mutable_stop_command();
}
inline const std::string& PluginConfig::_internal_stop_command() const {
  return stop_command_.Get();
}
inline void PluginConfig::_internal_set_stop_command(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  stop_command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PluginConfig::set_stop_command(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  stop_command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.PluginConfig.stop_command)
}
inline void PluginConfig::set_stop_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  stop_command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.PluginConfig.stop_command)
}
inline void PluginConfig::set_stop_command(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  stop_command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.PluginConfig.stop_command)
}
inline std::string* PluginConfig::_internal_mutable_stop_command() {
  _has_bits_[0] |= 0x00000004u;
  return stop_command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PluginConfig::release_stop_command() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.PluginConfig.stop_command)
  if (!_internal_has_stop_command()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return stop_command_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PluginConfig::set_allocated_stop_command(std::string* stop_command) {
  if (stop_command != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  stop_command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stop_command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.PluginConfig.stop_command)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::dreamview::PluginConfig_PluginType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::dreamview::PluginConfig_PluginType>() {
  return ::apollo::dreamview::PluginConfig_PluginType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fplugin_5fconfig_2eproto
