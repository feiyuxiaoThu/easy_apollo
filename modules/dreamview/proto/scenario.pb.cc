// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/scenario.proto

#include "modules/dreamview/proto/scenario.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Scenario_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto;
namespace apollo {
namespace dreamview {
class SimTicketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimTicket> _instance;
} _SimTicket_default_instance_;
class UserAdsGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserAdsGroup> _instance;
} _UserAdsGroup_default_instance_;
}  // namespace dreamview
}  // namespace apollo
static void InitDefaultsscc_info_SimTicket_modules_2fdreamview_2fproto_2fscenario_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_SimTicket_default_instance_;
    new (ptr) ::apollo::dreamview::SimTicket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimTicket_modules_2fdreamview_2fproto_2fscenario_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SimTicket_modules_2fdreamview_2fproto_2fscenario_2eproto}, {
      &scc_info_Scenario_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto.base,}};

static void InitDefaultsscc_info_UserAdsGroup_modules_2fdreamview_2fproto_2fscenario_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_UserAdsGroup_default_instance_;
    new (ptr) ::apollo::dreamview::UserAdsGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserAdsGroup_modules_2fdreamview_2fproto_2fscenario_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserAdsGroup_modules_2fdreamview_2fproto_2fscenario_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdreamview_2fproto_2fscenario_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fdreamview_2fproto_2fscenario_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdreamview_2fproto_2fscenario_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdreamview_2fproto_2fscenario_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimTicket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimTicket, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimTicket, author_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimTicket, scenario_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimTicket, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimTicket, map_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimTicket, blob_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimTicket, tags_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimTicket, category_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimTicket, time_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimTicket, create_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimTicket, number_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimTicket, description_cn_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimTicket, description_en_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimTicket, description_en_tokens_),
  0,
  1,
  10,
  2,
  3,
  4,
  ~0u,
  5,
  6,
  7,
  11,
  8,
  9,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::UserAdsGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::UserAdsGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::UserAdsGroup, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::UserAdsGroup, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::UserAdsGroup, userid_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::UserAdsGroup, ticketids_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::UserAdsGroup, visible_to_privileged_users_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::UserAdsGroup, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::UserAdsGroup, tags_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::UserAdsGroup, descripition_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::UserAdsGroup, create_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::UserAdsGroup, mod_time_),
  0,
  1,
  2,
  ~0u,
  7,
  3,
  ~0u,
  4,
  5,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, sizeof(::apollo::dreamview::SimTicket)},
  { 33, 48, sizeof(::apollo::dreamview::UserAdsGroup)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_SimTicket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_UserAdsGroup_default_instance_),
};

const char descriptor_table_protodef_modules_2fdreamview_2fproto_2fscenario_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&modules/dreamview/proto/scenario.proto"
  "\022\020apollo.dreamview\0322modules/common_msgs/"
  "simulation_msgs/scenario.proto\"\256\002\n\tSimTi"
  "cket\022\n\n\002id\030\001 \001(\t\022\023\n\013author_name\030\002 \001(\t\022-\n"
  "\010scenario\030\003 \001(\0132\033.apollo.simulation.Scen"
  "ario\022\014\n\004type\030\004 \001(\t\022\016\n\006map_id\030\005 \001(\t\022\021\n\tbl"
  "ob_path\030\006 \001(\t\022\014\n\004tags\030\007 \003(\t\022\020\n\010category\030"
  "\010 \001(\t\022\014\n\004time\030\t \001(\t\022\023\n\013create_time\030\n \001(\t"
  "\022\016\n\006number\030\013 \001(\005\022\026\n\016description_cn\030\014 \001(\t"
  "\022\026\n\016description_en\030\r \001(\t\022\035\n\025description_"
  "en_tokens\030\016 \003(\t\"\311\001\n\014UserAdsGroup\022\n\n\002id\030\001"
  " \001(\t\022\014\n\004name\030\002 \001(\t\022\016\n\006userid\030\003 \001(\t\022\021\n\tti"
  "cketids\030\004 \003(\t\022#\n\033visible_to_privileged_u"
  "sers\030\005 \001(\010\022\014\n\004type\030\006 \001(\t\022\014\n\004tags\030\007 \003(\t\022\024"
  "\n\014descripition\030\010 \001(\t\022\023\n\013create_time\030\t \001("
  "\001\022\020\n\010mod_time\030\n \001(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdreamview_2fproto_2fscenario_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fdreamview_2fproto_2fscenario_2eproto_sccs[2] = {
  &scc_info_SimTicket_modules_2fdreamview_2fproto_2fscenario_2eproto.base,
  &scc_info_UserAdsGroup_modules_2fdreamview_2fproto_2fscenario_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdreamview_2fproto_2fscenario_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fscenario_2eproto = {
  false, false, descriptor_table_protodef_modules_2fdreamview_2fproto_2fscenario_2eproto, "modules/dreamview/proto/scenario.proto", 619,
  &descriptor_table_modules_2fdreamview_2fproto_2fscenario_2eproto_once, descriptor_table_modules_2fdreamview_2fproto_2fscenario_2eproto_sccs, descriptor_table_modules_2fdreamview_2fproto_2fscenario_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_modules_2fdreamview_2fproto_2fscenario_2eproto::offsets,
  file_level_metadata_modules_2fdreamview_2fproto_2fscenario_2eproto, 2, file_level_enum_descriptors_modules_2fdreamview_2fproto_2fscenario_2eproto, file_level_service_descriptors_modules_2fdreamview_2fproto_2fscenario_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fdreamview_2fproto_2fscenario_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fdreamview_2fproto_2fscenario_2eproto)), true);
namespace apollo {
namespace dreamview {

// ===================================================================

class SimTicket::_Internal {
 public:
  using HasBits = decltype(std::declval<SimTicket>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_author_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::simulation::Scenario& scenario(const SimTicket* msg);
  static void set_has_scenario(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_map_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_blob_path(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_create_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_description_cn(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_description_en(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::apollo::simulation::Scenario&
SimTicket::_Internal::scenario(const SimTicket* msg) {
  return *msg->scenario_;
}
void SimTicket::clear_scenario() {
  if (scenario_ != nullptr) scenario_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
SimTicket::SimTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena),
  description_en_tokens_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.SimTicket)
}
SimTicket::SimTicket(const SimTicket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tags_(from.tags_),
      description_en_tokens_(from.description_en_tokens_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  author_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_author_name()) {
    author_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_author_name(), 
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  map_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_map_id()) {
    map_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map_id(), 
      GetArena());
  }
  blob_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_blob_path()) {
    blob_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blob_path(), 
      GetArena());
  }
  category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_category()) {
    category_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_category(), 
      GetArena());
  }
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_time()) {
    time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_time(), 
      GetArena());
  }
  create_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_create_time()) {
    create_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_time(), 
      GetArena());
  }
  description_cn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description_cn()) {
    description_cn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description_cn(), 
      GetArena());
  }
  description_en_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description_en()) {
    description_en_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description_en(), 
      GetArena());
  }
  if (from._internal_has_scenario()) {
    scenario_ = new ::apollo::simulation::Scenario(*from.scenario_);
  } else {
    scenario_ = nullptr;
  }
  number_ = from.number_;
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.SimTicket)
}

void SimTicket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimTicket_modules_2fdreamview_2fproto_2fscenario_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  author_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blob_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_cn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_en_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&scenario_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&number_) -
      reinterpret_cast<char*>(&scenario_)) + sizeof(number_));
}

SimTicket::~SimTicket() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.SimTicket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimTicket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  author_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blob_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_cn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_en_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete scenario_;
}

void SimTicket::ArenaDtor(void* object) {
  SimTicket* _this = reinterpret_cast< SimTicket* >(object);
  (void)_this;
}
void SimTicket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimTicket& SimTicket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimTicket_modules_2fdreamview_2fproto_2fscenario_2eproto.base);
  return *internal_default_instance();
}


void SimTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.SimTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  description_en_tokens_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      author_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      map_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      blob_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      category_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      time_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      create_time_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      description_cn_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      description_en_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(scenario_ != nullptr);
      scenario_->Clear();
    }
  }
  number_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimTicket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.SimTicket.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string author_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_author_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.SimTicket.author_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.simulation.Scenario scenario = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_scenario(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.SimTicket.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string map_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_map_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.SimTicket.map_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string blob_path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_blob_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.SimTicket.blob_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.SimTicket.tags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string category = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_category();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.SimTicket.category");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.SimTicket.time");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string create_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_create_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.SimTicket.create_time");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 number = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_number(&has_bits);
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description_cn = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_description_cn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.SimTicket.description_cn");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description_en = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_description_en();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.SimTicket.description_en");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string description_en_tokens = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_description_en_tokens();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.SimTicket.description_en_tokens");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimTicket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.SimTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.SimTicket.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional string author_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_author_name().data(), static_cast<int>(this->_internal_author_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.SimTicket.author_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_author_name(), target);
  }

  // optional .apollo.simulation.Scenario scenario = 3;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::scenario(this), target, stream);
  }

  // optional string type = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.SimTicket.type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_type(), target);
  }

  // optional string map_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map_id().data(), static_cast<int>(this->_internal_map_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.SimTicket.map_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_map_id(), target);
  }

  // optional string blob_path = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_blob_path().data(), static_cast<int>(this->_internal_blob_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.SimTicket.blob_path");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_blob_path(), target);
  }

  // repeated string tags = 7;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.SimTicket.tags");
    target = stream->WriteString(7, s, target);
  }

  // optional string category = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.SimTicket.category");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_category(), target);
  }

  // optional string time = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.SimTicket.time");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_time(), target);
  }

  // optional string create_time = 10;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_create_time().data(), static_cast<int>(this->_internal_create_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.SimTicket.create_time");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_create_time(), target);
  }

  // optional int32 number = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_number(), target);
  }

  // optional string description_cn = 12;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description_cn().data(), static_cast<int>(this->_internal_description_cn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.SimTicket.description_cn");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_description_cn(), target);
  }

  // optional string description_en = 13;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description_en().data(), static_cast<int>(this->_internal_description_en().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.SimTicket.description_en");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_description_en(), target);
  }

  // repeated string description_en_tokens = 14;
  for (int i = 0, n = this->_internal_description_en_tokens_size(); i < n; i++) {
    const auto& s = this->_internal_description_en_tokens(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.SimTicket.description_en_tokens");
    target = stream->WriteString(14, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.SimTicket)
  return target;
}

size_t SimTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.SimTicket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // repeated string description_en_tokens = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(description_en_tokens_.size());
  for (int i = 0, n = description_en_tokens_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      description_en_tokens_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string author_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_author_name());
    }

    // optional string type = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string map_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map_id());
    }

    // optional string blob_path = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_blob_path());
    }

    // optional string category = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_category());
    }

    // optional string time = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_time());
    }

    // optional string create_time = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_create_time());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional string description_cn = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description_cn());
    }

    // optional string description_en = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description_en());
    }

    // optional .apollo.simulation.Scenario scenario = 3;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scenario_);
    }

    // optional int32 number = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimTicket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.SimTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const SimTicket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimTicket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.SimTicket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.SimTicket)
    MergeFrom(*source);
  }
}

void SimTicket::MergeFrom(const SimTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.SimTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  description_en_tokens_.MergeFrom(from.description_en_tokens_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_author_name(from._internal_author_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_map_id(from._internal_map_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_blob_path(from._internal_blob_path());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_category(from._internal_category());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_time(from._internal_time());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_create_time(from._internal_create_time());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_description_cn(from._internal_description_cn());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_description_en(from._internal_description_en());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_scenario()->::apollo::simulation::Scenario::MergeFrom(from._internal_scenario());
    }
    if (cached_has_bits & 0x00000800u) {
      number_ = from.number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SimTicket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.SimTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimTicket::CopyFrom(const SimTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.SimTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimTicket::IsInitialized() const {
  return true;
}

void SimTicket::InternalSwap(SimTicket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tags_.InternalSwap(&other->tags_);
  description_en_tokens_.InternalSwap(&other->description_en_tokens_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  author_name_.Swap(&other->author_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  map_id_.Swap(&other->map_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  blob_path_.Swap(&other->blob_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  category_.Swap(&other->category_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  time_.Swap(&other->time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  create_time_.Swap(&other->create_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_cn_.Swap(&other->description_cn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_en_.Swap(&other->description_en_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimTicket, number_)
      + sizeof(SimTicket::number_)
      - PROTOBUF_FIELD_OFFSET(SimTicket, scenario_)>(
          reinterpret_cast<char*>(&scenario_),
          reinterpret_cast<char*>(&other->scenario_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimTicket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserAdsGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<UserAdsGroup>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_visible_to_privileged_users(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_descripition(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_create_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mod_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

UserAdsGroup::UserAdsGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ticketids_(arena),
  tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.UserAdsGroup)
}
UserAdsGroup::UserAdsGroup(const UserAdsGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ticketids_(from.ticketids_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_userid()) {
    userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userid(), 
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  descripition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_descripition()) {
    descripition_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_descripition(), 
      GetArena());
  }
  ::memcpy(&create_time_, &from.create_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&visible_to_privileged_users_) -
    reinterpret_cast<char*>(&create_time_)) + sizeof(visible_to_privileged_users_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.UserAdsGroup)
}

void UserAdsGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserAdsGroup_modules_2fdreamview_2fproto_2fscenario_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  descripition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&create_time_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&visible_to_privileged_users_) -
      reinterpret_cast<char*>(&create_time_)) + sizeof(visible_to_privileged_users_));
}

UserAdsGroup::~UserAdsGroup() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.UserAdsGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserAdsGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  descripition_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserAdsGroup::ArenaDtor(void* object) {
  UserAdsGroup* _this = reinterpret_cast< UserAdsGroup* >(object);
  (void)_this;
}
void UserAdsGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserAdsGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserAdsGroup& UserAdsGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserAdsGroup_modules_2fdreamview_2fproto_2fscenario_2eproto.base);
  return *internal_default_instance();
}


void UserAdsGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.UserAdsGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticketids_.Clear();
  tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      userid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      descripition_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&create_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&visible_to_privileged_users_) -
        reinterpret_cast<char*>(&create_time_)) + sizeof(visible_to_privileged_users_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserAdsGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.UserAdsGroup.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.UserAdsGroup.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string userid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.UserAdsGroup.userid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ticketids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ticketids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.UserAdsGroup.ticketids");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool visible_to_privileged_users = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_visible_to_privileged_users(&has_bits);
          visible_to_privileged_users_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.UserAdsGroup.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.UserAdsGroup.tags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string descripition = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_descripition();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.UserAdsGroup.descripition");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double create_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_create_time(&has_bits);
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double mod_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_mod_time(&has_bits);
          mod_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserAdsGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.UserAdsGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.UserAdsGroup.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.UserAdsGroup.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string userid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.UserAdsGroup.userid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_userid(), target);
  }

  // repeated string ticketids = 4;
  for (int i = 0, n = this->_internal_ticketids_size(); i < n; i++) {
    const auto& s = this->_internal_ticketids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.UserAdsGroup.ticketids");
    target = stream->WriteString(4, s, target);
  }

  // optional bool visible_to_privileged_users = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_visible_to_privileged_users(), target);
  }

  // optional string type = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.UserAdsGroup.type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_type(), target);
  }

  // repeated string tags = 7;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.UserAdsGroup.tags");
    target = stream->WriteString(7, s, target);
  }

  // optional string descripition = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_descripition().data(), static_cast<int>(this->_internal_descripition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.UserAdsGroup.descripition");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_descripition(), target);
  }

  // optional double create_time = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_create_time(), target);
  }

  // optional double mod_time = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_mod_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.UserAdsGroup)
  return target;
}

size_t UserAdsGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.UserAdsGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ticketids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ticketids_.size());
  for (int i = 0, n = ticketids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ticketids_.Get(i));
  }

  // repeated string tags = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string userid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_userid());
    }

    // optional string type = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string descripition = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_descripition());
    }

    // optional double create_time = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double mod_time = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional bool visible_to_privileged_users = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserAdsGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.UserAdsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const UserAdsGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserAdsGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.UserAdsGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.UserAdsGroup)
    MergeFrom(*source);
  }
}

void UserAdsGroup::MergeFrom(const UserAdsGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.UserAdsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ticketids_.MergeFrom(from.ticketids_);
  tags_.MergeFrom(from.tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_userid(from._internal_userid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_descripition(from._internal_descripition());
    }
    if (cached_has_bits & 0x00000020u) {
      create_time_ = from.create_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      mod_time_ = from.mod_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      visible_to_privileged_users_ = from.visible_to_privileged_users_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserAdsGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.UserAdsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAdsGroup::CopyFrom(const UserAdsGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.UserAdsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAdsGroup::IsInitialized() const {
  return true;
}

void UserAdsGroup::InternalSwap(UserAdsGroup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ticketids_.InternalSwap(&other->ticketids_);
  tags_.InternalSwap(&other->tags_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  userid_.Swap(&other->userid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  descripition_.Swap(&other->descripition_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserAdsGroup, visible_to_privileged_users_)
      + sizeof(UserAdsGroup::visible_to_privileged_users_)
      - PROTOBUF_FIELD_OFFSET(UserAdsGroup, create_time_)>(
          reinterpret_cast<char*>(&create_time_),
          reinterpret_cast<char*>(&other->create_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserAdsGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::dreamview::SimTicket* Arena::CreateMaybeMessage< ::apollo::dreamview::SimTicket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::SimTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::UserAdsGroup* Arena::CreateMaybeMessage< ::apollo::dreamview::UserAdsGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::UserAdsGroup >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
