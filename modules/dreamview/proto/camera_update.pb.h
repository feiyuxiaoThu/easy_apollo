// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/camera_update.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/perception/proto/perception_obstacle.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto;
namespace apollo {
namespace dreamview {
class CameraUpdate;
class CameraUpdateDefaultTypeInternal;
extern CameraUpdateDefaultTypeInternal _CameraUpdate_default_instance_;
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::dreamview::CameraUpdate* Arena::CreateMaybeMessage<::apollo::dreamview::CameraUpdate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace dreamview {

enum CameraUpdate_SubType : int {
  CameraUpdate_SubType_ST_UNKNOWN = 0,
  CameraUpdate_SubType_ST_UNKNOWN_MOVABLE = 1,
  CameraUpdate_SubType_ST_UNKNOWN_UNMOVABLE = 2,
  CameraUpdate_SubType_ST_CAR = 3,
  CameraUpdate_SubType_ST_VAN = 4,
  CameraUpdate_SubType_ST_TRUCK = 5,
  CameraUpdate_SubType_ST_BUS = 6,
  CameraUpdate_SubType_ST_CYCLIST = 7,
  CameraUpdate_SubType_ST_MOTORCYCLIST = 8,
  CameraUpdate_SubType_ST_TRICYCLIST = 9,
  CameraUpdate_SubType_ST_PEDESTRIAN = 10,
  CameraUpdate_SubType_ST_TRAFFICCONE = 11
};
bool CameraUpdate_SubType_IsValid(int value);
constexpr CameraUpdate_SubType CameraUpdate_SubType_SubType_MIN = CameraUpdate_SubType_ST_UNKNOWN;
constexpr CameraUpdate_SubType CameraUpdate_SubType_SubType_MAX = CameraUpdate_SubType_ST_TRAFFICCONE;
constexpr int CameraUpdate_SubType_SubType_ARRAYSIZE = CameraUpdate_SubType_SubType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraUpdate_SubType_descriptor();
template<typename T>
inline const std::string& CameraUpdate_SubType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraUpdate_SubType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraUpdate_SubType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraUpdate_SubType_descriptor(), enum_t_value);
}
inline bool CameraUpdate_SubType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CameraUpdate_SubType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraUpdate_SubType>(
    CameraUpdate_SubType_descriptor(), name, value);
}
// ===================================================================

class CameraUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.CameraUpdate) */ {
 public:
  inline CameraUpdate() : CameraUpdate(nullptr) {}
  virtual ~CameraUpdate();

  CameraUpdate(const CameraUpdate& from);
  CameraUpdate(CameraUpdate&& from) noexcept
    : CameraUpdate() {
    *this = ::std::move(from);
  }

  inline CameraUpdate& operator=(const CameraUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraUpdate& operator=(CameraUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraUpdate& default_instance();

  static inline const CameraUpdate* internal_default_instance() {
    return reinterpret_cast<const CameraUpdate*>(
               &_CameraUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CameraUpdate& a, CameraUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraUpdate* New() const final {
    return CreateMaybeMessage<CameraUpdate>(nullptr);
  }

  CameraUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraUpdate& from);
  void MergeFrom(const CameraUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.CameraUpdate";
  }
  protected:
  explicit CameraUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CameraUpdate_SubType SubType;
  static constexpr SubType ST_UNKNOWN =
    CameraUpdate_SubType_ST_UNKNOWN;
  static constexpr SubType ST_UNKNOWN_MOVABLE =
    CameraUpdate_SubType_ST_UNKNOWN_MOVABLE;
  static constexpr SubType ST_UNKNOWN_UNMOVABLE =
    CameraUpdate_SubType_ST_UNKNOWN_UNMOVABLE;
  static constexpr SubType ST_CAR =
    CameraUpdate_SubType_ST_CAR;
  static constexpr SubType ST_VAN =
    CameraUpdate_SubType_ST_VAN;
  static constexpr SubType ST_TRUCK =
    CameraUpdate_SubType_ST_TRUCK;
  static constexpr SubType ST_BUS =
    CameraUpdate_SubType_ST_BUS;
  static constexpr SubType ST_CYCLIST =
    CameraUpdate_SubType_ST_CYCLIST;
  static constexpr SubType ST_MOTORCYCLIST =
    CameraUpdate_SubType_ST_MOTORCYCLIST;
  static constexpr SubType ST_TRICYCLIST =
    CameraUpdate_SubType_ST_TRICYCLIST;
  static constexpr SubType ST_PEDESTRIAN =
    CameraUpdate_SubType_ST_PEDESTRIAN;
  static constexpr SubType ST_TRAFFICCONE =
    CameraUpdate_SubType_ST_TRAFFICCONE;
  static inline bool SubType_IsValid(int value) {
    return CameraUpdate_SubType_IsValid(value);
  }
  static constexpr SubType SubType_MIN =
    CameraUpdate_SubType_SubType_MIN;
  static constexpr SubType SubType_MAX =
    CameraUpdate_SubType_SubType_MAX;
  static constexpr int SubType_ARRAYSIZE =
    CameraUpdate_SubType_SubType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SubType_descriptor() {
    return CameraUpdate_SubType_descriptor();
  }
  template<typename T>
  static inline const std::string& SubType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SubType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SubType_Name.");
    return CameraUpdate_SubType_Name(enum_t_value);
  }
  static inline bool SubType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SubType* value) {
    return CameraUpdate_SubType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLocalizationFieldNumber = 1,
    kLocalization2CameraTfFieldNumber = 2,
    kBbox2DFieldNumber = 5,
    kObstaclesIdFieldNumber = 6,
    kObstaclesSubTypeFieldNumber = 7,
    kImageFieldNumber = 3,
    kImageAspectRatioFieldNumber = 4,
    kKImageScaleFieldNumber = 8,
  };
  // repeated double localization = 1;
  int localization_size() const;
  private:
  int _internal_localization_size() const;
  public:
  void clear_localization();
  private:
  double _internal_localization(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_localization() const;
  void _internal_add_localization(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_localization();
  public:
  double localization(int index) const;
  void set_localization(int index, double value);
  void add_localization(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      localization() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_localization();

  // repeated double localization2camera_tf = 2;
  int localization2camera_tf_size() const;
  private:
  int _internal_localization2camera_tf_size() const;
  public:
  void clear_localization2camera_tf();
  private:
  double _internal_localization2camera_tf(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_localization2camera_tf() const;
  void _internal_add_localization2camera_tf(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_localization2camera_tf();
  public:
  double localization2camera_tf(int index) const;
  void set_localization2camera_tf(int index, double value);
  void add_localization2camera_tf(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      localization2camera_tf() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_localization2camera_tf();

  // repeated .apollo.perception.BBox2D bbox2d = 5;
  int bbox2d_size() const;
  private:
  int _internal_bbox2d_size() const;
  public:
  void clear_bbox2d();
  ::apollo::perception::BBox2D* mutable_bbox2d(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::BBox2D >*
      mutable_bbox2d();
  private:
  const ::apollo::perception::BBox2D& _internal_bbox2d(int index) const;
  ::apollo::perception::BBox2D* _internal_add_bbox2d();
  public:
  const ::apollo::perception::BBox2D& bbox2d(int index) const;
  ::apollo::perception::BBox2D* add_bbox2d();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::BBox2D >&
      bbox2d() const;

  // repeated int32 obstacles_id = 6;
  int obstacles_id_size() const;
  private:
  int _internal_obstacles_id_size() const;
  public:
  void clear_obstacles_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_obstacles_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_obstacles_id() const;
  void _internal_add_obstacles_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_obstacles_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 obstacles_id(int index) const;
  void set_obstacles_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_obstacles_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      obstacles_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_obstacles_id();

  // repeated .apollo.dreamview.CameraUpdate.SubType obstacles_sub_type = 7;
  int obstacles_sub_type_size() const;
  private:
  int _internal_obstacles_sub_type_size() const;
  public:
  void clear_obstacles_sub_type();
  private:
  ::apollo::dreamview::CameraUpdate_SubType _internal_obstacles_sub_type(int index) const;
  void _internal_add_obstacles_sub_type(::apollo::dreamview::CameraUpdate_SubType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_obstacles_sub_type();
  public:
  ::apollo::dreamview::CameraUpdate_SubType obstacles_sub_type(int index) const;
  void set_obstacles_sub_type(int index, ::apollo::dreamview::CameraUpdate_SubType value);
  void add_obstacles_sub_type(::apollo::dreamview::CameraUpdate_SubType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& obstacles_sub_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_obstacles_sub_type();

  // optional bytes image = 3;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // optional double image_aspect_ratio = 4;
  bool has_image_aspect_ratio() const;
  private:
  bool _internal_has_image_aspect_ratio() const;
  public:
  void clear_image_aspect_ratio();
  double image_aspect_ratio() const;
  void set_image_aspect_ratio(double value);
  private:
  double _internal_image_aspect_ratio() const;
  void _internal_set_image_aspect_ratio(double value);
  public:

  // optional double k_image_scale = 8;
  bool has_k_image_scale() const;
  private:
  bool _internal_has_k_image_scale() const;
  public:
  void clear_k_image_scale();
  double k_image_scale() const;
  void set_k_image_scale(double value);
  private:
  double _internal_k_image_scale() const;
  void _internal_set_k_image_scale(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.CameraUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > localization_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > localization2camera_tf_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::BBox2D > bbox2d_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > obstacles_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> obstacles_sub_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  double image_aspect_ratio_;
  double k_image_scale_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraUpdate

// repeated double localization = 1;
inline int CameraUpdate::_internal_localization_size() const {
  return localization_.size();
}
inline int CameraUpdate::localization_size() const {
  return _internal_localization_size();
}
inline void CameraUpdate::clear_localization() {
  localization_.Clear();
}
inline double CameraUpdate::_internal_localization(int index) const {
  return localization_.Get(index);
}
inline double CameraUpdate::localization(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.CameraUpdate.localization)
  return _internal_localization(index);
}
inline void CameraUpdate::set_localization(int index, double value) {
  localization_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.CameraUpdate.localization)
}
inline void CameraUpdate::_internal_add_localization(double value) {
  localization_.Add(value);
}
inline void CameraUpdate::add_localization(double value) {
  _internal_add_localization(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.CameraUpdate.localization)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraUpdate::_internal_localization() const {
  return localization_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraUpdate::localization() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.CameraUpdate.localization)
  return _internal_localization();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraUpdate::_internal_mutable_localization() {
  return &localization_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraUpdate::mutable_localization() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.CameraUpdate.localization)
  return _internal_mutable_localization();
}

// repeated double localization2camera_tf = 2;
inline int CameraUpdate::_internal_localization2camera_tf_size() const {
  return localization2camera_tf_.size();
}
inline int CameraUpdate::localization2camera_tf_size() const {
  return _internal_localization2camera_tf_size();
}
inline void CameraUpdate::clear_localization2camera_tf() {
  localization2camera_tf_.Clear();
}
inline double CameraUpdate::_internal_localization2camera_tf(int index) const {
  return localization2camera_tf_.Get(index);
}
inline double CameraUpdate::localization2camera_tf(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.CameraUpdate.localization2camera_tf)
  return _internal_localization2camera_tf(index);
}
inline void CameraUpdate::set_localization2camera_tf(int index, double value) {
  localization2camera_tf_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.CameraUpdate.localization2camera_tf)
}
inline void CameraUpdate::_internal_add_localization2camera_tf(double value) {
  localization2camera_tf_.Add(value);
}
inline void CameraUpdate::add_localization2camera_tf(double value) {
  _internal_add_localization2camera_tf(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.CameraUpdate.localization2camera_tf)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraUpdate::_internal_localization2camera_tf() const {
  return localization2camera_tf_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraUpdate::localization2camera_tf() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.CameraUpdate.localization2camera_tf)
  return _internal_localization2camera_tf();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraUpdate::_internal_mutable_localization2camera_tf() {
  return &localization2camera_tf_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraUpdate::mutable_localization2camera_tf() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.CameraUpdate.localization2camera_tf)
  return _internal_mutable_localization2camera_tf();
}

// optional bytes image = 3;
inline bool CameraUpdate::_internal_has_image() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CameraUpdate::has_image() const {
  return _internal_has_image();
}
inline void CameraUpdate::clear_image() {
  image_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CameraUpdate::image() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.CameraUpdate.image)
  return _internal_image();
}
inline void CameraUpdate::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.CameraUpdate.image)
}
inline std::string* CameraUpdate::mutable_image() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.CameraUpdate.image)
  return _internal_mutable_image();
}
inline const std::string& CameraUpdate::_internal_image() const {
  return image_.Get();
}
inline void CameraUpdate::_internal_set_image(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CameraUpdate::set_image(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  image_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.CameraUpdate.image)
}
inline void CameraUpdate::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.CameraUpdate.image)
}
inline void CameraUpdate::set_image(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.CameraUpdate.image)
}
inline std::string* CameraUpdate::_internal_mutable_image() {
  _has_bits_[0] |= 0x00000001u;
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CameraUpdate::release_image() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.CameraUpdate.image)
  if (!_internal_has_image()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return image_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CameraUpdate::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.CameraUpdate.image)
}

// optional double image_aspect_ratio = 4;
inline bool CameraUpdate::_internal_has_image_aspect_ratio() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CameraUpdate::has_image_aspect_ratio() const {
  return _internal_has_image_aspect_ratio();
}
inline void CameraUpdate::clear_image_aspect_ratio() {
  image_aspect_ratio_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double CameraUpdate::_internal_image_aspect_ratio() const {
  return image_aspect_ratio_;
}
inline double CameraUpdate::image_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.CameraUpdate.image_aspect_ratio)
  return _internal_image_aspect_ratio();
}
inline void CameraUpdate::_internal_set_image_aspect_ratio(double value) {
  _has_bits_[0] |= 0x00000002u;
  image_aspect_ratio_ = value;
}
inline void CameraUpdate::set_image_aspect_ratio(double value) {
  _internal_set_image_aspect_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.CameraUpdate.image_aspect_ratio)
}

// repeated .apollo.perception.BBox2D bbox2d = 5;
inline int CameraUpdate::_internal_bbox2d_size() const {
  return bbox2d_.size();
}
inline int CameraUpdate::bbox2d_size() const {
  return _internal_bbox2d_size();
}
inline ::apollo::perception::BBox2D* CameraUpdate::mutable_bbox2d(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.CameraUpdate.bbox2d)
  return bbox2d_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::BBox2D >*
CameraUpdate::mutable_bbox2d() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.CameraUpdate.bbox2d)
  return &bbox2d_;
}
inline const ::apollo::perception::BBox2D& CameraUpdate::_internal_bbox2d(int index) const {
  return bbox2d_.Get(index);
}
inline const ::apollo::perception::BBox2D& CameraUpdate::bbox2d(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.CameraUpdate.bbox2d)
  return _internal_bbox2d(index);
}
inline ::apollo::perception::BBox2D* CameraUpdate::_internal_add_bbox2d() {
  return bbox2d_.Add();
}
inline ::apollo::perception::BBox2D* CameraUpdate::add_bbox2d() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.CameraUpdate.bbox2d)
  return _internal_add_bbox2d();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::BBox2D >&
CameraUpdate::bbox2d() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.CameraUpdate.bbox2d)
  return bbox2d_;
}

// repeated int32 obstacles_id = 6;
inline int CameraUpdate::_internal_obstacles_id_size() const {
  return obstacles_id_.size();
}
inline int CameraUpdate::obstacles_id_size() const {
  return _internal_obstacles_id_size();
}
inline void CameraUpdate::clear_obstacles_id() {
  obstacles_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraUpdate::_internal_obstacles_id(int index) const {
  return obstacles_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraUpdate::obstacles_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.CameraUpdate.obstacles_id)
  return _internal_obstacles_id(index);
}
inline void CameraUpdate::set_obstacles_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  obstacles_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.CameraUpdate.obstacles_id)
}
inline void CameraUpdate::_internal_add_obstacles_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  obstacles_id_.Add(value);
}
inline void CameraUpdate::add_obstacles_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_obstacles_id(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.CameraUpdate.obstacles_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CameraUpdate::_internal_obstacles_id() const {
  return obstacles_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CameraUpdate::obstacles_id() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.CameraUpdate.obstacles_id)
  return _internal_obstacles_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CameraUpdate::_internal_mutable_obstacles_id() {
  return &obstacles_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CameraUpdate::mutable_obstacles_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.CameraUpdate.obstacles_id)
  return _internal_mutable_obstacles_id();
}

// repeated .apollo.dreamview.CameraUpdate.SubType obstacles_sub_type = 7;
inline int CameraUpdate::_internal_obstacles_sub_type_size() const {
  return obstacles_sub_type_.size();
}
inline int CameraUpdate::obstacles_sub_type_size() const {
  return _internal_obstacles_sub_type_size();
}
inline void CameraUpdate::clear_obstacles_sub_type() {
  obstacles_sub_type_.Clear();
}
inline ::apollo::dreamview::CameraUpdate_SubType CameraUpdate::_internal_obstacles_sub_type(int index) const {
  return static_cast< ::apollo::dreamview::CameraUpdate_SubType >(obstacles_sub_type_.Get(index));
}
inline ::apollo::dreamview::CameraUpdate_SubType CameraUpdate::obstacles_sub_type(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.CameraUpdate.obstacles_sub_type)
  return _internal_obstacles_sub_type(index);
}
inline void CameraUpdate::set_obstacles_sub_type(int index, ::apollo::dreamview::CameraUpdate_SubType value) {
  assert(::apollo::dreamview::CameraUpdate_SubType_IsValid(value));
  obstacles_sub_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.CameraUpdate.obstacles_sub_type)
}
inline void CameraUpdate::_internal_add_obstacles_sub_type(::apollo::dreamview::CameraUpdate_SubType value) {
  assert(::apollo::dreamview::CameraUpdate_SubType_IsValid(value));
  obstacles_sub_type_.Add(value);
}
inline void CameraUpdate::add_obstacles_sub_type(::apollo::dreamview::CameraUpdate_SubType value) {
  // @@protoc_insertion_point(field_add:apollo.dreamview.CameraUpdate.obstacles_sub_type)
  _internal_add_obstacles_sub_type(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CameraUpdate::obstacles_sub_type() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.CameraUpdate.obstacles_sub_type)
  return obstacles_sub_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CameraUpdate::_internal_mutable_obstacles_sub_type() {
  return &obstacles_sub_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CameraUpdate::mutable_obstacles_sub_type() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.CameraUpdate.obstacles_sub_type)
  return _internal_mutable_obstacles_sub_type();
}

// optional double k_image_scale = 8;
inline bool CameraUpdate::_internal_has_k_image_scale() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CameraUpdate::has_k_image_scale() const {
  return _internal_has_k_image_scale();
}
inline void CameraUpdate::clear_k_image_scale() {
  k_image_scale_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double CameraUpdate::_internal_k_image_scale() const {
  return k_image_scale_;
}
inline double CameraUpdate::k_image_scale() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.CameraUpdate.k_image_scale)
  return _internal_k_image_scale();
}
inline void CameraUpdate::_internal_set_k_image_scale(double value) {
  _has_bits_[0] |= 0x00000004u;
  k_image_scale_ = value;
}
inline void CameraUpdate::set_k_image_scale(double value) {
  _internal_set_k_image_scale(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.CameraUpdate.k_image_scale)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::dreamview::CameraUpdate_SubType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::dreamview::CameraUpdate_SubType>() {
  return ::apollo::dreamview::CameraUpdate_SubType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto
