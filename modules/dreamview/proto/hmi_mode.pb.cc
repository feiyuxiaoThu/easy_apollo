// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/hmi_mode.proto

#include "modules/dreamview/proto/hmi_mode.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CyberModule_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HMIMode_CyberModulesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HMIMode_GlobalComponentsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HMIMode_ModulesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HMIMode_MonitoredComponentsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HMIMode_OtherComponentsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Module_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModuleMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MonitoredComponent_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResourceMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceMonitorConfig_CPUUsage_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceMonitorConfig_DiskLoad_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceMonitorConfig_DiskSpace_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceMonitorConfig_MemoryUsage_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
namespace apollo {
namespace dreamview {
class ProcessMonitorConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessMonitorConfig> _instance;
} _ProcessMonitorConfig_default_instance_;
class ModuleMonitorConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModuleMonitorConfig> _instance;
} _ModuleMonitorConfig_default_instance_;
class ChannelMonitorConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelMonitorConfig> _instance;
} _ChannelMonitorConfig_default_instance_;
class ResourceMonitorConfig_DiskSpaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceMonitorConfig_DiskSpace> _instance;
} _ResourceMonitorConfig_DiskSpace_default_instance_;
class ResourceMonitorConfig_CPUUsageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceMonitorConfig_CPUUsage> _instance;
} _ResourceMonitorConfig_CPUUsage_default_instance_;
class ResourceMonitorConfig_MemoryUsageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceMonitorConfig_MemoryUsage> _instance;
} _ResourceMonitorConfig_MemoryUsage_default_instance_;
class ResourceMonitorConfig_DiskLoadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceMonitorConfig_DiskLoad> _instance;
} _ResourceMonitorConfig_DiskLoad_default_instance_;
class ResourceMonitorConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceMonitorConfig> _instance;
} _ResourceMonitorConfig_default_instance_;
class MonitoredComponentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonitoredComponent> _instance;
} _MonitoredComponent_default_instance_;
class ModuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Module> _instance;
} _Module_default_instance_;
class CyberModuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CyberModule> _instance;
} _CyberModule_default_instance_;
class HMIMode_CyberModulesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HMIMode_CyberModulesEntry_DoNotUse> _instance;
} _HMIMode_CyberModulesEntry_DoNotUse_default_instance_;
class HMIMode_ModulesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HMIMode_ModulesEntry_DoNotUse> _instance;
} _HMIMode_ModulesEntry_DoNotUse_default_instance_;
class HMIMode_MonitoredComponentsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HMIMode_MonitoredComponentsEntry_DoNotUse> _instance;
} _HMIMode_MonitoredComponentsEntry_DoNotUse_default_instance_;
class HMIMode_OtherComponentsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HMIMode_OtherComponentsEntry_DoNotUse> _instance;
} _HMIMode_OtherComponentsEntry_DoNotUse_default_instance_;
class HMIMode_GlobalComponentsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HMIMode_GlobalComponentsEntry_DoNotUse> _instance;
} _HMIMode_GlobalComponentsEntry_DoNotUse_default_instance_;
class HMIModeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HMIMode> _instance;
} _HMIMode_default_instance_;
}  // namespace dreamview
}  // namespace apollo
static void InitDefaultsscc_info_ChannelMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_ChannelMonitorConfig_default_instance_;
    new (ptr) ::apollo::dreamview::ChannelMonitorConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {}};

static void InitDefaultsscc_info_CyberModule_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_CyberModule_default_instance_;
    new (ptr) ::apollo::dreamview::CyberModule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CyberModule_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CyberModule_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {}};

static void InitDefaultsscc_info_HMIMode_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_HMIMode_default_instance_;
    new (ptr) ::apollo::dreamview::HMIMode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_HMIMode_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_HMIMode_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {
      &scc_info_HMIMode_CyberModulesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
      &scc_info_HMIMode_ModulesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
      &scc_info_HMIMode_MonitoredComponentsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
      &scc_info_HMIMode_OtherComponentsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
      &scc_info_HMIMode_GlobalComponentsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,}};

static void InitDefaultsscc_info_HMIMode_CyberModulesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_HMIMode_CyberModulesEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::dreamview::HMIMode_CyberModulesEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HMIMode_CyberModulesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HMIMode_CyberModulesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {
      &scc_info_CyberModule_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,}};

static void InitDefaultsscc_info_HMIMode_GlobalComponentsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_HMIMode_GlobalComponentsEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::dreamview::HMIMode_GlobalComponentsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HMIMode_GlobalComponentsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HMIMode_GlobalComponentsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {
      &scc_info_MonitoredComponent_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,}};

static void InitDefaultsscc_info_HMIMode_ModulesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_HMIMode_ModulesEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::dreamview::HMIMode_ModulesEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HMIMode_ModulesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HMIMode_ModulesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {
      &scc_info_Module_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,}};

static void InitDefaultsscc_info_HMIMode_MonitoredComponentsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_HMIMode_MonitoredComponentsEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::dreamview::HMIMode_MonitoredComponentsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HMIMode_MonitoredComponentsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HMIMode_MonitoredComponentsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {
      &scc_info_MonitoredComponent_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,}};

static void InitDefaultsscc_info_HMIMode_OtherComponentsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_HMIMode_OtherComponentsEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::dreamview::HMIMode_OtherComponentsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HMIMode_OtherComponentsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HMIMode_OtherComponentsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {
      &scc_info_ProcessMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,}};

static void InitDefaultsscc_info_Module_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Module_default_instance_;
    new (ptr) ::apollo::dreamview::Module();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Module_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Module_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {
      &scc_info_ProcessMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,}};

static void InitDefaultsscc_info_ModuleMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_ModuleMonitorConfig_default_instance_;
    new (ptr) ::apollo::dreamview::ModuleMonitorConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModuleMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModuleMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {}};

static void InitDefaultsscc_info_MonitoredComponent_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_MonitoredComponent_default_instance_;
    new (ptr) ::apollo::dreamview::MonitoredComponent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MonitoredComponent_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_MonitoredComponent_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {
      &scc_info_ProcessMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
      &scc_info_ChannelMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
      &scc_info_ResourceMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
      &scc_info_ModuleMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,}};

static void InitDefaultsscc_info_ProcessMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_ProcessMonitorConfig_default_instance_;
    new (ptr) ::apollo::dreamview::ProcessMonitorConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {}};

static void InitDefaultsscc_info_ResourceMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_ResourceMonitorConfig_default_instance_;
    new (ptr) ::apollo::dreamview::ResourceMonitorConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResourceMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ResourceMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {
      &scc_info_ResourceMonitorConfig_DiskSpace_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
      &scc_info_ResourceMonitorConfig_CPUUsage_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
      &scc_info_ResourceMonitorConfig_MemoryUsage_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
      &scc_info_ResourceMonitorConfig_DiskLoad_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,}};

static void InitDefaultsscc_info_ResourceMonitorConfig_CPUUsage_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_ResourceMonitorConfig_CPUUsage_default_instance_;
    new (ptr) ::apollo::dreamview::ResourceMonitorConfig_CPUUsage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceMonitorConfig_CPUUsage_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResourceMonitorConfig_CPUUsage_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {}};

static void InitDefaultsscc_info_ResourceMonitorConfig_DiskLoad_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_ResourceMonitorConfig_DiskLoad_default_instance_;
    new (ptr) ::apollo::dreamview::ResourceMonitorConfig_DiskLoad();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceMonitorConfig_DiskLoad_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResourceMonitorConfig_DiskLoad_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {}};

static void InitDefaultsscc_info_ResourceMonitorConfig_DiskSpace_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_ResourceMonitorConfig_DiskSpace_default_instance_;
    new (ptr) ::apollo::dreamview::ResourceMonitorConfig_DiskSpace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceMonitorConfig_DiskSpace_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResourceMonitorConfig_DiskSpace_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {}};

static void InitDefaultsscc_info_ResourceMonitorConfig_MemoryUsage_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_ResourceMonitorConfig_MemoryUsage_default_instance_;
    new (ptr) ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceMonitorConfig_MemoryUsage_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResourceMonitorConfig_MemoryUsage_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto[17];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ProcessMonitorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ProcessMonitorConfig, command_keywords_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ModuleMonitorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ModuleMonitorConfig, node_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ChannelMonitorConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ChannelMonitorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ChannelMonitorConfig, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ChannelMonitorConfig, delay_fatal_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ChannelMonitorConfig, mandatory_fields_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ChannelMonitorConfig, min_frequency_allowed_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ChannelMonitorConfig, max_frequency_allowed_),
  0,
  2,
  ~0u,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig_DiskSpace, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig_DiskSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig_DiskSpace, path_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig_DiskSpace, insufficient_space_warning_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig_DiskSpace, insufficient_space_error_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig_CPUUsage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig_CPUUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig_CPUUsage, high_cpu_usage_warning_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig_CPUUsage, high_cpu_usage_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig_CPUUsage, process_dag_path_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig_MemoryUsage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig_MemoryUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig_MemoryUsage, high_memory_usage_warning_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig_MemoryUsage, high_memory_usage_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig_MemoryUsage, process_dag_path_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig_DiskLoad, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig_DiskLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig_DiskLoad, high_disk_load_warning_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig_DiskLoad, high_disk_load_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig_DiskLoad, device_name_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig, disk_spaces_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig, cpu_usages_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig, memory_usages_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig, disk_load_usages_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MonitoredComponent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MonitoredComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MonitoredComponent, process_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MonitoredComponent, channel_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MonitoredComponent, resource_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MonitoredComponent, required_for_safety_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MonitoredComponent, module_),
  0,
  1,
  2,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Module, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Module, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Module, start_command_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Module, stop_command_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Module, process_monitor_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Module, required_for_safety_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::CyberModule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::CyberModule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::CyberModule, dag_files_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::CyberModule, required_for_safety_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::CyberModule, process_group_),
  ~0u,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_CyberModulesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_CyberModulesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_CyberModulesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_CyberModulesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_ModulesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_ModulesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_ModulesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_ModulesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_MonitoredComponentsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_MonitoredComponentsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_MonitoredComponentsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_MonitoredComponentsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_OtherComponentsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_OtherComponentsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_OtherComponentsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_OtherComponentsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_GlobalComponentsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_GlobalComponentsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_GlobalComponentsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_GlobalComponentsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode, cyber_modules_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode, modules_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode, monitored_components_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode, other_components_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode, operations_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode, default_operation_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode, layout_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode, global_components_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::apollo::dreamview::ProcessMonitorConfig)},
  { 6, -1, sizeof(::apollo::dreamview::ModuleMonitorConfig)},
  { 12, 22, sizeof(::apollo::dreamview::ChannelMonitorConfig)},
  { 27, 35, sizeof(::apollo::dreamview::ResourceMonitorConfig_DiskSpace)},
  { 38, 46, sizeof(::apollo::dreamview::ResourceMonitorConfig_CPUUsage)},
  { 49, 57, sizeof(::apollo::dreamview::ResourceMonitorConfig_MemoryUsage)},
  { 60, 68, sizeof(::apollo::dreamview::ResourceMonitorConfig_DiskLoad)},
  { 71, -1, sizeof(::apollo::dreamview::ResourceMonitorConfig)},
  { 80, 90, sizeof(::apollo::dreamview::MonitoredComponent)},
  { 95, 104, sizeof(::apollo::dreamview::Module)},
  { 108, 116, sizeof(::apollo::dreamview::CyberModule)},
  { 119, 126, sizeof(::apollo::dreamview::HMIMode_CyberModulesEntry_DoNotUse)},
  { 128, 135, sizeof(::apollo::dreamview::HMIMode_ModulesEntry_DoNotUse)},
  { 137, 144, sizeof(::apollo::dreamview::HMIMode_MonitoredComponentsEntry_DoNotUse)},
  { 146, 153, sizeof(::apollo::dreamview::HMIMode_OtherComponentsEntry_DoNotUse)},
  { 155, 162, sizeof(::apollo::dreamview::HMIMode_GlobalComponentsEntry_DoNotUse)},
  { 164, 177, sizeof(::apollo::dreamview::HMIMode)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_ProcessMonitorConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_ModuleMonitorConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_ChannelMonitorConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_ResourceMonitorConfig_DiskSpace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_ResourceMonitorConfig_CPUUsage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_ResourceMonitorConfig_MemoryUsage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_ResourceMonitorConfig_DiskLoad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_ResourceMonitorConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_MonitoredComponent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_Module_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_CyberModule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_HMIMode_CyberModulesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_HMIMode_ModulesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_HMIMode_MonitoredComponentsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_HMIMode_OtherComponentsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_HMIMode_GlobalComponentsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_HMIMode_default_instance_),
};

const char descriptor_table_protodef_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&modules/dreamview/proto/hmi_mode.proto"
  "\022\020apollo.dreamview\032(modules/dreamview/pr"
  "oto/hmi_status.proto\"0\n\024ProcessMonitorCo"
  "nfig\022\030\n\020command_keywords\030\001 \003(\t\"(\n\023Module"
  "MonitorConfig\022\021\n\tnode_name\030\001 \003(\t\"\235\001\n\024Cha"
  "nnelMonitorConfig\022\014\n\004name\030\001 \001(\t\022\026\n\013delay"
  "_fatal\030\002 \001(\001:\0013\022\030\n\020mandatory_fields\030\003 \003("
  "\t\022 \n\025min_frequency_allowed\030\004 \001(\001:\0010\022#\n\025m"
  "ax_frequency_allowed\030\005 \001(\001:\0041000\"\316\005\n\025Res"
  "ourceMonitorConfig\022F\n\013disk_spaces\030\001 \003(\0132"
  "1.apollo.dreamview.ResourceMonitorConfig"
  ".DiskSpace\022D\n\ncpu_usages\030\002 \003(\01320.apollo."
  "dreamview.ResourceMonitorConfig.CPUUsage"
  "\022J\n\rmemory_usages\030\003 \003(\01323.apollo.dreamvi"
  "ew.ResourceMonitorConfig.MemoryUsage\022J\n\020"
  "disk_load_usages\030\004 \003(\01320.apollo.dreamvie"
  "w.ResourceMonitorConfig.DiskLoad\032_\n\tDisk"
  "Space\022\014\n\004path\030\001 \001(\t\022\"\n\032insufficient_spac"
  "e_warning\030\002 \001(\005\022 \n\030insufficient_space_er"
  "ror\030\003 \001(\005\032b\n\010CPUUsage\022\036\n\026high_cpu_usage_"
  "warning\030\001 \001(\002\022\034\n\024high_cpu_usage_error\030\002 "
  "\001(\002\022\030\n\020process_dag_path\030\003 \001(\t\032k\n\013MemoryU"
  "sage\022!\n\031high_memory_usage_warning\030\001 \001(\005\022"
  "\037\n\027high_memory_usage_error\030\002 \001(\005\022\030\n\020proc"
  "ess_dag_path\030\003 \001(\t\032]\n\010DiskLoad\022\036\n\026high_d"
  "isk_load_warning\030\001 \001(\005\022\034\n\024high_disk_load"
  "_error\030\002 \001(\005\022\023\n\013device_name\030\003 \001(\t\"\233\002\n\022Mo"
  "nitoredComponent\0227\n\007process\030\001 \001(\0132&.apol"
  "lo.dreamview.ProcessMonitorConfig\0227\n\007cha"
  "nnel\030\002 \001(\0132&.apollo.dreamview.ChannelMon"
  "itorConfig\0229\n\010resource\030\003 \001(\0132\'.apollo.dr"
  "eamview.ResourceMonitorConfig\022!\n\023require"
  "d_for_safety\030\004 \001(\010:\004true\0225\n\006module\030\005 \001(\013"
  "2%.apollo.dreamview.ModuleMonitorConfig\""
  "\240\001\n\006Module\022\025\n\rstart_command\030\001 \001(\t\022\024\n\014sto"
  "p_command\030\002 \001(\t\022F\n\026process_monitor_confi"
  "g\030\003 \001(\0132&.apollo.dreamview.ProcessMonito"
  "rConfig\022!\n\023required_for_safety\030\004 \001(\010:\004tr"
  "ue\"Z\n\013CyberModule\022\021\n\tdag_files\030\001 \003(\t\022!\n\023"
  "required_for_safety\030\002 \001(\010:\004true\022\025\n\rproce"
  "ss_group\030\003 \001(\t\"\264\007\n\007HMIMode\022B\n\rcyber_modu"
  "les\030\001 \003(\0132+.apollo.dreamview.HMIMode.Cyb"
  "erModulesEntry\0227\n\007modules\030\002 \003(\0132&.apollo"
  ".dreamview.HMIMode.ModulesEntry\022P\n\024monit"
  "ored_components\030\003 \003(\01322.apollo.dreamview"
  ".HMIMode.MonitoredComponentsEntry\022H\n\020oth"
  "er_components\030\004 \003(\0132..apollo.dreamview.H"
  "MIMode.OtherComponentsEntry\0226\n\noperation"
  "s\030\005 \003(\0162\".apollo.dreamview.HMIModeOperat"
  "ion\022=\n\021default_operation\030\006 \001(\0162\".apollo."
  "dreamview.HMIModeOperation\022\016\n\006layout\030\007 \001"
  "(\t\022J\n\021global_components\030\010 \003(\0132/.apollo.d"
  "reamview.HMIMode.GlobalComponentsEntry\032R"
  "\n\021CyberModulesEntry\022\013\n\003key\030\001 \001(\t\022,\n\005valu"
  "e\030\002 \001(\0132\035.apollo.dreamview.CyberModule:\002"
  "8\001\032H\n\014ModulesEntry\022\013\n\003key\030\001 \001(\t\022\'\n\005value"
  "\030\002 \001(\0132\030.apollo.dreamview.Module:\0028\001\032`\n\030"
  "MonitoredComponentsEntry\022\013\n\003key\030\001 \001(\t\0223\n"
  "\005value\030\002 \001(\0132$.apollo.dreamview.Monitore"
  "dComponent:\0028\001\032^\n\024OtherComponentsEntry\022\013"
  "\n\003key\030\001 \001(\t\0225\n\005value\030\002 \001(\0132&.apollo.drea"
  "mview.ProcessMonitorConfig:\0028\001\032]\n\025Global"
  "ComponentsEntry\022\013\n\003key\030\001 \001(\t\0223\n\005value\030\002 "
  "\001(\0132$.apollo.dreamview.MonitoredComponen"
  "t:\0028\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto_deps[1] = {
  &::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto_sccs[17] = {
  &scc_info_ChannelMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
  &scc_info_CyberModule_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
  &scc_info_HMIMode_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
  &scc_info_HMIMode_CyberModulesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
  &scc_info_HMIMode_GlobalComponentsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
  &scc_info_HMIMode_ModulesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
  &scc_info_HMIMode_MonitoredComponentsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
  &scc_info_HMIMode_OtherComponentsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
  &scc_info_Module_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
  &scc_info_ModuleMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
  &scc_info_MonitoredComponent_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
  &scc_info_ProcessMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
  &scc_info_ResourceMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
  &scc_info_ResourceMonitorConfig_CPUUsage_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
  &scc_info_ResourceMonitorConfig_DiskLoad_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
  &scc_info_ResourceMonitorConfig_DiskSpace_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
  &scc_info_ResourceMonitorConfig_MemoryUsage_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto = {
  false, false, descriptor_table_protodef_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto, "modules/dreamview/proto/hmi_mode.proto", 2565,
  &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto_once, descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto_sccs, descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto_deps, 17, 1,
  schemas, file_default_instances, TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto::offsets,
  file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto, 17, file_level_enum_descriptors_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto, file_level_service_descriptors_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto)), true);
namespace apollo {
namespace dreamview {

// ===================================================================

class ProcessMonitorConfig::_Internal {
 public:
};

ProcessMonitorConfig::ProcessMonitorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  command_keywords_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.ProcessMonitorConfig)
}
ProcessMonitorConfig::ProcessMonitorConfig(const ProcessMonitorConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      command_keywords_(from.command_keywords_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.ProcessMonitorConfig)
}

void ProcessMonitorConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
}

ProcessMonitorConfig::~ProcessMonitorConfig() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.ProcessMonitorConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessMonitorConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProcessMonitorConfig::ArenaDtor(void* object) {
  ProcessMonitorConfig* _this = reinterpret_cast< ProcessMonitorConfig* >(object);
  (void)_this;
}
void ProcessMonitorConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessMonitorConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessMonitorConfig& ProcessMonitorConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  return *internal_default_instance();
}


void ProcessMonitorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.ProcessMonitorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_keywords_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessMonitorConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string command_keywords = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_command_keywords();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.ProcessMonitorConfig.command_keywords");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessMonitorConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.ProcessMonitorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string command_keywords = 1;
  for (int i = 0, n = this->_internal_command_keywords_size(); i < n; i++) {
    const auto& s = this->_internal_command_keywords(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.ProcessMonitorConfig.command_keywords");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.ProcessMonitorConfig)
  return target;
}

size_t ProcessMonitorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.ProcessMonitorConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string command_keywords = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(command_keywords_.size());
  for (int i = 0, n = command_keywords_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      command_keywords_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessMonitorConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.ProcessMonitorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessMonitorConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessMonitorConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.ProcessMonitorConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.ProcessMonitorConfig)
    MergeFrom(*source);
  }
}

void ProcessMonitorConfig::MergeFrom(const ProcessMonitorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.ProcessMonitorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  command_keywords_.MergeFrom(from.command_keywords_);
}

void ProcessMonitorConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.ProcessMonitorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessMonitorConfig::CopyFrom(const ProcessMonitorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.ProcessMonitorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessMonitorConfig::IsInitialized() const {
  return true;
}

void ProcessMonitorConfig::InternalSwap(ProcessMonitorConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  command_keywords_.InternalSwap(&other->command_keywords_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessMonitorConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModuleMonitorConfig::_Internal {
 public:
};

ModuleMonitorConfig::ModuleMonitorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  node_name_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.ModuleMonitorConfig)
}
ModuleMonitorConfig::ModuleMonitorConfig(const ModuleMonitorConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      node_name_(from.node_name_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.ModuleMonitorConfig)
}

void ModuleMonitorConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModuleMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
}

ModuleMonitorConfig::~ModuleMonitorConfig() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.ModuleMonitorConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModuleMonitorConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ModuleMonitorConfig::ArenaDtor(void* object) {
  ModuleMonitorConfig* _this = reinterpret_cast< ModuleMonitorConfig* >(object);
  (void)_this;
}
void ModuleMonitorConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModuleMonitorConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModuleMonitorConfig& ModuleMonitorConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModuleMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  return *internal_default_instance();
}


void ModuleMonitorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.ModuleMonitorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_name_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModuleMonitorConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string node_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_node_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.ModuleMonitorConfig.node_name");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModuleMonitorConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.ModuleMonitorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string node_name = 1;
  for (int i = 0, n = this->_internal_node_name_size(); i < n; i++) {
    const auto& s = this->_internal_node_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.ModuleMonitorConfig.node_name");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.ModuleMonitorConfig)
  return target;
}

size_t ModuleMonitorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.ModuleMonitorConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string node_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(node_name_.size());
  for (int i = 0, n = node_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      node_name_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModuleMonitorConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.ModuleMonitorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ModuleMonitorConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModuleMonitorConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.ModuleMonitorConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.ModuleMonitorConfig)
    MergeFrom(*source);
  }
}

void ModuleMonitorConfig::MergeFrom(const ModuleMonitorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.ModuleMonitorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_name_.MergeFrom(from.node_name_);
}

void ModuleMonitorConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.ModuleMonitorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleMonitorConfig::CopyFrom(const ModuleMonitorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.ModuleMonitorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleMonitorConfig::IsInitialized() const {
  return true;
}

void ModuleMonitorConfig::InternalSwap(ModuleMonitorConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_name_.InternalSwap(&other->node_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModuleMonitorConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChannelMonitorConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelMonitorConfig>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delay_fatal(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_frequency_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_frequency_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ChannelMonitorConfig::ChannelMonitorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mandatory_fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.ChannelMonitorConfig)
}
ChannelMonitorConfig::ChannelMonitorConfig(const ChannelMonitorConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mandatory_fields_(from.mandatory_fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&min_frequency_allowed_, &from.min_frequency_allowed_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_frequency_allowed_) -
    reinterpret_cast<char*>(&min_frequency_allowed_)) + sizeof(max_frequency_allowed_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.ChannelMonitorConfig)
}

void ChannelMonitorConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  min_frequency_allowed_ = 0;
  delay_fatal_ = 3;
  max_frequency_allowed_ = 1000;
}

ChannelMonitorConfig::~ChannelMonitorConfig() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.ChannelMonitorConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelMonitorConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelMonitorConfig::ArenaDtor(void* object) {
  ChannelMonitorConfig* _this = reinterpret_cast< ChannelMonitorConfig* >(object);
  (void)_this;
}
void ChannelMonitorConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelMonitorConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelMonitorConfig& ChannelMonitorConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  return *internal_default_instance();
}


void ChannelMonitorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.ChannelMonitorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mandatory_fields_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    min_frequency_allowed_ = 0;
    delay_fatal_ = 3;
    max_frequency_allowed_ = 1000;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelMonitorConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.ChannelMonitorConfig.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double delay_fatal = 2 [default = 3];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_delay_fatal(&has_bits);
          delay_fatal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated string mandatory_fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_mandatory_fields();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.ChannelMonitorConfig.mandatory_fields");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double min_frequency_allowed = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_min_frequency_allowed(&has_bits);
          min_frequency_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_frequency_allowed = 5 [default = 1000];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_max_frequency_allowed(&has_bits);
          max_frequency_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelMonitorConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.ChannelMonitorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.ChannelMonitorConfig.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional double delay_fatal = 2 [default = 3];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_delay_fatal(), target);
  }

  // repeated string mandatory_fields = 3;
  for (int i = 0, n = this->_internal_mandatory_fields_size(); i < n; i++) {
    const auto& s = this->_internal_mandatory_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.ChannelMonitorConfig.mandatory_fields");
    target = stream->WriteString(3, s, target);
  }

  // optional double min_frequency_allowed = 4 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_min_frequency_allowed(), target);
  }

  // optional double max_frequency_allowed = 5 [default = 1000];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_max_frequency_allowed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.ChannelMonitorConfig)
  return target;
}

size_t ChannelMonitorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.ChannelMonitorConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string mandatory_fields = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(mandatory_fields_.size());
  for (int i = 0, n = mandatory_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      mandatory_fields_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional double min_frequency_allowed = 4 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double delay_fatal = 2 [default = 3];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double max_frequency_allowed = 5 [default = 1000];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelMonitorConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.ChannelMonitorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelMonitorConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelMonitorConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.ChannelMonitorConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.ChannelMonitorConfig)
    MergeFrom(*source);
  }
}

void ChannelMonitorConfig::MergeFrom(const ChannelMonitorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.ChannelMonitorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mandatory_fields_.MergeFrom(from.mandatory_fields_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      min_frequency_allowed_ = from.min_frequency_allowed_;
    }
    if (cached_has_bits & 0x00000004u) {
      delay_fatal_ = from.delay_fatal_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_frequency_allowed_ = from.max_frequency_allowed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChannelMonitorConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.ChannelMonitorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelMonitorConfig::CopyFrom(const ChannelMonitorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.ChannelMonitorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMonitorConfig::IsInitialized() const {
  return true;
}

void ChannelMonitorConfig::InternalSwap(ChannelMonitorConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mandatory_fields_.InternalSwap(&other->mandatory_fields_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(min_frequency_allowed_, other->min_frequency_allowed_);
  swap(delay_fatal_, other->delay_fatal_);
  swap(max_frequency_allowed_, other->max_frequency_allowed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelMonitorConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResourceMonitorConfig_DiskSpace::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceMonitorConfig_DiskSpace>()._has_bits_);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_insufficient_space_warning(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_insufficient_space_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ResourceMonitorConfig_DiskSpace::ResourceMonitorConfig_DiskSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
}
ResourceMonitorConfig_DiskSpace::ResourceMonitorConfig_DiskSpace(const ResourceMonitorConfig_DiskSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  ::memcpy(&insufficient_space_warning_, &from.insufficient_space_warning_,
    static_cast<size_t>(reinterpret_cast<char*>(&insufficient_space_error_) -
    reinterpret_cast<char*>(&insufficient_space_warning_)) + sizeof(insufficient_space_error_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
}

void ResourceMonitorConfig_DiskSpace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceMonitorConfig_DiskSpace_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&insufficient_space_warning_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&insufficient_space_error_) -
      reinterpret_cast<char*>(&insufficient_space_warning_)) + sizeof(insufficient_space_error_));
}

ResourceMonitorConfig_DiskSpace::~ResourceMonitorConfig_DiskSpace() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceMonitorConfig_DiskSpace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResourceMonitorConfig_DiskSpace::ArenaDtor(void* object) {
  ResourceMonitorConfig_DiskSpace* _this = reinterpret_cast< ResourceMonitorConfig_DiskSpace* >(object);
  (void)_this;
}
void ResourceMonitorConfig_DiskSpace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceMonitorConfig_DiskSpace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceMonitorConfig_DiskSpace& ResourceMonitorConfig_DiskSpace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceMonitorConfig_DiskSpace_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  return *internal_default_instance();
}


void ResourceMonitorConfig_DiskSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    path_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&insufficient_space_warning_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&insufficient_space_error_) -
        reinterpret_cast<char*>(&insufficient_space_warning_)) + sizeof(insufficient_space_error_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceMonitorConfig_DiskSpace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.ResourceMonitorConfig.DiskSpace.path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 insufficient_space_warning = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_insufficient_space_warning(&has_bits);
          insufficient_space_warning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 insufficient_space_error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_insufficient_space_error(&has_bits);
          insufficient_space_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceMonitorConfig_DiskSpace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.ResourceMonitorConfig.DiskSpace.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // optional int32 insufficient_space_warning = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_insufficient_space_warning(), target);
  }

  // optional int32 insufficient_space_error = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_insufficient_space_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
  return target;
}

size_t ResourceMonitorConfig_DiskSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional int32 insufficient_space_warning = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_insufficient_space_warning());
    }

    // optional int32 insufficient_space_error = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_insufficient_space_error());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceMonitorConfig_DiskSpace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceMonitorConfig_DiskSpace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceMonitorConfig_DiskSpace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
    MergeFrom(*source);
  }
}

void ResourceMonitorConfig_DiskSpace::MergeFrom(const ResourceMonitorConfig_DiskSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000002u) {
      insufficient_space_warning_ = from.insufficient_space_warning_;
    }
    if (cached_has_bits & 0x00000004u) {
      insufficient_space_error_ = from.insufficient_space_error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResourceMonitorConfig_DiskSpace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceMonitorConfig_DiskSpace::CopyFrom(const ResourceMonitorConfig_DiskSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceMonitorConfig_DiskSpace::IsInitialized() const {
  return true;
}

void ResourceMonitorConfig_DiskSpace::InternalSwap(ResourceMonitorConfig_DiskSpace* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig_DiskSpace, insufficient_space_error_)
      + sizeof(ResourceMonitorConfig_DiskSpace::insufficient_space_error_)
      - PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig_DiskSpace, insufficient_space_warning_)>(
          reinterpret_cast<char*>(&insufficient_space_warning_),
          reinterpret_cast<char*>(&other->insufficient_space_warning_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceMonitorConfig_DiskSpace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResourceMonitorConfig_CPUUsage::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceMonitorConfig_CPUUsage>()._has_bits_);
  static void set_has_high_cpu_usage_warning(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_high_cpu_usage_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_process_dag_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResourceMonitorConfig_CPUUsage::ResourceMonitorConfig_CPUUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.ResourceMonitorConfig.CPUUsage)
}
ResourceMonitorConfig_CPUUsage::ResourceMonitorConfig_CPUUsage(const ResourceMonitorConfig_CPUUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  process_dag_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_process_dag_path()) {
    process_dag_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_process_dag_path(), 
      GetArena());
  }
  ::memcpy(&high_cpu_usage_warning_, &from.high_cpu_usage_warning_,
    static_cast<size_t>(reinterpret_cast<char*>(&high_cpu_usage_error_) -
    reinterpret_cast<char*>(&high_cpu_usage_warning_)) + sizeof(high_cpu_usage_error_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.ResourceMonitorConfig.CPUUsage)
}

void ResourceMonitorConfig_CPUUsage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceMonitorConfig_CPUUsage_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  process_dag_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&high_cpu_usage_warning_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&high_cpu_usage_error_) -
      reinterpret_cast<char*>(&high_cpu_usage_warning_)) + sizeof(high_cpu_usage_error_));
}

ResourceMonitorConfig_CPUUsage::~ResourceMonitorConfig_CPUUsage() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.ResourceMonitorConfig.CPUUsage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceMonitorConfig_CPUUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  process_dag_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResourceMonitorConfig_CPUUsage::ArenaDtor(void* object) {
  ResourceMonitorConfig_CPUUsage* _this = reinterpret_cast< ResourceMonitorConfig_CPUUsage* >(object);
  (void)_this;
}
void ResourceMonitorConfig_CPUUsage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceMonitorConfig_CPUUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceMonitorConfig_CPUUsage& ResourceMonitorConfig_CPUUsage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceMonitorConfig_CPUUsage_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  return *internal_default_instance();
}


void ResourceMonitorConfig_CPUUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.ResourceMonitorConfig.CPUUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    process_dag_path_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&high_cpu_usage_warning_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&high_cpu_usage_error_) -
        reinterpret_cast<char*>(&high_cpu_usage_warning_)) + sizeof(high_cpu_usage_error_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceMonitorConfig_CPUUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float high_cpu_usage_warning = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_high_cpu_usage_warning(&has_bits);
          high_cpu_usage_warning_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float high_cpu_usage_error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_high_cpu_usage_error(&has_bits);
          high_cpu_usage_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string process_dag_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_process_dag_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.ResourceMonitorConfig.CPUUsage.process_dag_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceMonitorConfig_CPUUsage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.ResourceMonitorConfig.CPUUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float high_cpu_usage_warning = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_high_cpu_usage_warning(), target);
  }

  // optional float high_cpu_usage_error = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_high_cpu_usage_error(), target);
  }

  // optional string process_dag_path = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_process_dag_path().data(), static_cast<int>(this->_internal_process_dag_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.ResourceMonitorConfig.CPUUsage.process_dag_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_process_dag_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.ResourceMonitorConfig.CPUUsage)
  return target;
}

size_t ResourceMonitorConfig_CPUUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.ResourceMonitorConfig.CPUUsage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string process_dag_path = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_process_dag_path());
    }

    // optional float high_cpu_usage_warning = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float high_cpu_usage_error = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceMonitorConfig_CPUUsage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.ResourceMonitorConfig.CPUUsage)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceMonitorConfig_CPUUsage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceMonitorConfig_CPUUsage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.ResourceMonitorConfig.CPUUsage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.ResourceMonitorConfig.CPUUsage)
    MergeFrom(*source);
  }
}

void ResourceMonitorConfig_CPUUsage::MergeFrom(const ResourceMonitorConfig_CPUUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.ResourceMonitorConfig.CPUUsage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_process_dag_path(from._internal_process_dag_path());
    }
    if (cached_has_bits & 0x00000002u) {
      high_cpu_usage_warning_ = from.high_cpu_usage_warning_;
    }
    if (cached_has_bits & 0x00000004u) {
      high_cpu_usage_error_ = from.high_cpu_usage_error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResourceMonitorConfig_CPUUsage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.ResourceMonitorConfig.CPUUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceMonitorConfig_CPUUsage::CopyFrom(const ResourceMonitorConfig_CPUUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.ResourceMonitorConfig.CPUUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceMonitorConfig_CPUUsage::IsInitialized() const {
  return true;
}

void ResourceMonitorConfig_CPUUsage::InternalSwap(ResourceMonitorConfig_CPUUsage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  process_dag_path_.Swap(&other->process_dag_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig_CPUUsage, high_cpu_usage_error_)
      + sizeof(ResourceMonitorConfig_CPUUsage::high_cpu_usage_error_)
      - PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig_CPUUsage, high_cpu_usage_warning_)>(
          reinterpret_cast<char*>(&high_cpu_usage_warning_),
          reinterpret_cast<char*>(&other->high_cpu_usage_warning_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceMonitorConfig_CPUUsage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResourceMonitorConfig_MemoryUsage::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceMonitorConfig_MemoryUsage>()._has_bits_);
  static void set_has_high_memory_usage_warning(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_high_memory_usage_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_process_dag_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResourceMonitorConfig_MemoryUsage::ResourceMonitorConfig_MemoryUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.ResourceMonitorConfig.MemoryUsage)
}
ResourceMonitorConfig_MemoryUsage::ResourceMonitorConfig_MemoryUsage(const ResourceMonitorConfig_MemoryUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  process_dag_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_process_dag_path()) {
    process_dag_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_process_dag_path(), 
      GetArena());
  }
  ::memcpy(&high_memory_usage_warning_, &from.high_memory_usage_warning_,
    static_cast<size_t>(reinterpret_cast<char*>(&high_memory_usage_error_) -
    reinterpret_cast<char*>(&high_memory_usage_warning_)) + sizeof(high_memory_usage_error_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.ResourceMonitorConfig.MemoryUsage)
}

void ResourceMonitorConfig_MemoryUsage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceMonitorConfig_MemoryUsage_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  process_dag_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&high_memory_usage_warning_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&high_memory_usage_error_) -
      reinterpret_cast<char*>(&high_memory_usage_warning_)) + sizeof(high_memory_usage_error_));
}

ResourceMonitorConfig_MemoryUsage::~ResourceMonitorConfig_MemoryUsage() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.ResourceMonitorConfig.MemoryUsage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceMonitorConfig_MemoryUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  process_dag_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResourceMonitorConfig_MemoryUsage::ArenaDtor(void* object) {
  ResourceMonitorConfig_MemoryUsage* _this = reinterpret_cast< ResourceMonitorConfig_MemoryUsage* >(object);
  (void)_this;
}
void ResourceMonitorConfig_MemoryUsage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceMonitorConfig_MemoryUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceMonitorConfig_MemoryUsage& ResourceMonitorConfig_MemoryUsage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceMonitorConfig_MemoryUsage_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  return *internal_default_instance();
}


void ResourceMonitorConfig_MemoryUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.ResourceMonitorConfig.MemoryUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    process_dag_path_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&high_memory_usage_warning_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&high_memory_usage_error_) -
        reinterpret_cast<char*>(&high_memory_usage_warning_)) + sizeof(high_memory_usage_error_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceMonitorConfig_MemoryUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 high_memory_usage_warning = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_high_memory_usage_warning(&has_bits);
          high_memory_usage_warning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 high_memory_usage_error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_high_memory_usage_error(&has_bits);
          high_memory_usage_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string process_dag_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_process_dag_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.ResourceMonitorConfig.MemoryUsage.process_dag_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceMonitorConfig_MemoryUsage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.ResourceMonitorConfig.MemoryUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 high_memory_usage_warning = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_high_memory_usage_warning(), target);
  }

  // optional int32 high_memory_usage_error = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_high_memory_usage_error(), target);
  }

  // optional string process_dag_path = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_process_dag_path().data(), static_cast<int>(this->_internal_process_dag_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.ResourceMonitorConfig.MemoryUsage.process_dag_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_process_dag_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.ResourceMonitorConfig.MemoryUsage)
  return target;
}

size_t ResourceMonitorConfig_MemoryUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.ResourceMonitorConfig.MemoryUsage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string process_dag_path = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_process_dag_path());
    }

    // optional int32 high_memory_usage_warning = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_high_memory_usage_warning());
    }

    // optional int32 high_memory_usage_error = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_high_memory_usage_error());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceMonitorConfig_MemoryUsage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.ResourceMonitorConfig.MemoryUsage)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceMonitorConfig_MemoryUsage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceMonitorConfig_MemoryUsage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.ResourceMonitorConfig.MemoryUsage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.ResourceMonitorConfig.MemoryUsage)
    MergeFrom(*source);
  }
}

void ResourceMonitorConfig_MemoryUsage::MergeFrom(const ResourceMonitorConfig_MemoryUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.ResourceMonitorConfig.MemoryUsage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_process_dag_path(from._internal_process_dag_path());
    }
    if (cached_has_bits & 0x00000002u) {
      high_memory_usage_warning_ = from.high_memory_usage_warning_;
    }
    if (cached_has_bits & 0x00000004u) {
      high_memory_usage_error_ = from.high_memory_usage_error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResourceMonitorConfig_MemoryUsage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.ResourceMonitorConfig.MemoryUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceMonitorConfig_MemoryUsage::CopyFrom(const ResourceMonitorConfig_MemoryUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.ResourceMonitorConfig.MemoryUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceMonitorConfig_MemoryUsage::IsInitialized() const {
  return true;
}

void ResourceMonitorConfig_MemoryUsage::InternalSwap(ResourceMonitorConfig_MemoryUsage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  process_dag_path_.Swap(&other->process_dag_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig_MemoryUsage, high_memory_usage_error_)
      + sizeof(ResourceMonitorConfig_MemoryUsage::high_memory_usage_error_)
      - PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig_MemoryUsage, high_memory_usage_warning_)>(
          reinterpret_cast<char*>(&high_memory_usage_warning_),
          reinterpret_cast<char*>(&other->high_memory_usage_warning_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceMonitorConfig_MemoryUsage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResourceMonitorConfig_DiskLoad::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceMonitorConfig_DiskLoad>()._has_bits_);
  static void set_has_high_disk_load_warning(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_high_disk_load_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_device_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResourceMonitorConfig_DiskLoad::ResourceMonitorConfig_DiskLoad(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.ResourceMonitorConfig.DiskLoad)
}
ResourceMonitorConfig_DiskLoad::ResourceMonitorConfig_DiskLoad(const ResourceMonitorConfig_DiskLoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_name()) {
    device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_name(), 
      GetArena());
  }
  ::memcpy(&high_disk_load_warning_, &from.high_disk_load_warning_,
    static_cast<size_t>(reinterpret_cast<char*>(&high_disk_load_error_) -
    reinterpret_cast<char*>(&high_disk_load_warning_)) + sizeof(high_disk_load_error_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.ResourceMonitorConfig.DiskLoad)
}

void ResourceMonitorConfig_DiskLoad::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceMonitorConfig_DiskLoad_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&high_disk_load_warning_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&high_disk_load_error_) -
      reinterpret_cast<char*>(&high_disk_load_warning_)) + sizeof(high_disk_load_error_));
}

ResourceMonitorConfig_DiskLoad::~ResourceMonitorConfig_DiskLoad() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.ResourceMonitorConfig.DiskLoad)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceMonitorConfig_DiskLoad::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResourceMonitorConfig_DiskLoad::ArenaDtor(void* object) {
  ResourceMonitorConfig_DiskLoad* _this = reinterpret_cast< ResourceMonitorConfig_DiskLoad* >(object);
  (void)_this;
}
void ResourceMonitorConfig_DiskLoad::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceMonitorConfig_DiskLoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceMonitorConfig_DiskLoad& ResourceMonitorConfig_DiskLoad::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceMonitorConfig_DiskLoad_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  return *internal_default_instance();
}


void ResourceMonitorConfig_DiskLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.ResourceMonitorConfig.DiskLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    device_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&high_disk_load_warning_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&high_disk_load_error_) -
        reinterpret_cast<char*>(&high_disk_load_warning_)) + sizeof(high_disk_load_error_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceMonitorConfig_DiskLoad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 high_disk_load_warning = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_high_disk_load_warning(&has_bits);
          high_disk_load_warning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 high_disk_load_error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_high_disk_load_error(&has_bits);
          high_disk_load_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string device_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_device_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.ResourceMonitorConfig.DiskLoad.device_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceMonitorConfig_DiskLoad::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.ResourceMonitorConfig.DiskLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 high_disk_load_warning = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_high_disk_load_warning(), target);
  }

  // optional int32 high_disk_load_error = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_high_disk_load_error(), target);
  }

  // optional string device_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.ResourceMonitorConfig.DiskLoad.device_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.ResourceMonitorConfig.DiskLoad)
  return target;
}

size_t ResourceMonitorConfig_DiskLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.ResourceMonitorConfig.DiskLoad)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string device_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_name());
    }

    // optional int32 high_disk_load_warning = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_high_disk_load_warning());
    }

    // optional int32 high_disk_load_error = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_high_disk_load_error());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceMonitorConfig_DiskLoad::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.ResourceMonitorConfig.DiskLoad)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceMonitorConfig_DiskLoad* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceMonitorConfig_DiskLoad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.ResourceMonitorConfig.DiskLoad)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.ResourceMonitorConfig.DiskLoad)
    MergeFrom(*source);
  }
}

void ResourceMonitorConfig_DiskLoad::MergeFrom(const ResourceMonitorConfig_DiskLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.ResourceMonitorConfig.DiskLoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_device_name(from._internal_device_name());
    }
    if (cached_has_bits & 0x00000002u) {
      high_disk_load_warning_ = from.high_disk_load_warning_;
    }
    if (cached_has_bits & 0x00000004u) {
      high_disk_load_error_ = from.high_disk_load_error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResourceMonitorConfig_DiskLoad::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.ResourceMonitorConfig.DiskLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceMonitorConfig_DiskLoad::CopyFrom(const ResourceMonitorConfig_DiskLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.ResourceMonitorConfig.DiskLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceMonitorConfig_DiskLoad::IsInitialized() const {
  return true;
}

void ResourceMonitorConfig_DiskLoad::InternalSwap(ResourceMonitorConfig_DiskLoad* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  device_name_.Swap(&other->device_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig_DiskLoad, high_disk_load_error_)
      + sizeof(ResourceMonitorConfig_DiskLoad::high_disk_load_error_)
      - PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig_DiskLoad, high_disk_load_warning_)>(
          reinterpret_cast<char*>(&high_disk_load_warning_),
          reinterpret_cast<char*>(&other->high_disk_load_warning_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceMonitorConfig_DiskLoad::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResourceMonitorConfig::_Internal {
 public:
};

ResourceMonitorConfig::ResourceMonitorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  disk_spaces_(arena),
  cpu_usages_(arena),
  memory_usages_(arena),
  disk_load_usages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.ResourceMonitorConfig)
}
ResourceMonitorConfig::ResourceMonitorConfig(const ResourceMonitorConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      disk_spaces_(from.disk_spaces_),
      cpu_usages_(from.cpu_usages_),
      memory_usages_(from.memory_usages_),
      disk_load_usages_(from.disk_load_usages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.ResourceMonitorConfig)
}

void ResourceMonitorConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
}

ResourceMonitorConfig::~ResourceMonitorConfig() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.ResourceMonitorConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceMonitorConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ResourceMonitorConfig::ArenaDtor(void* object) {
  ResourceMonitorConfig* _this = reinterpret_cast< ResourceMonitorConfig* >(object);
  (void)_this;
}
void ResourceMonitorConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceMonitorConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceMonitorConfig& ResourceMonitorConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  return *internal_default_instance();
}


void ResourceMonitorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.ResourceMonitorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  disk_spaces_.Clear();
  cpu_usages_.Clear();
  memory_usages_.Clear();
  disk_load_usages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceMonitorConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.dreamview.ResourceMonitorConfig.DiskSpace disk_spaces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_disk_spaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.ResourceMonitorConfig.CPUUsage cpu_usages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cpu_usages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.ResourceMonitorConfig.MemoryUsage memory_usages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_memory_usages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.ResourceMonitorConfig.DiskLoad disk_load_usages = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_disk_load_usages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceMonitorConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.ResourceMonitorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dreamview.ResourceMonitorConfig.DiskSpace disk_spaces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_disk_spaces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_disk_spaces(i), target, stream);
  }

  // repeated .apollo.dreamview.ResourceMonitorConfig.CPUUsage cpu_usages = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cpu_usages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cpu_usages(i), target, stream);
  }

  // repeated .apollo.dreamview.ResourceMonitorConfig.MemoryUsage memory_usages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_memory_usages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_memory_usages(i), target, stream);
  }

  // repeated .apollo.dreamview.ResourceMonitorConfig.DiskLoad disk_load_usages = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_disk_load_usages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_disk_load_usages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.ResourceMonitorConfig)
  return target;
}

size_t ResourceMonitorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.ResourceMonitorConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dreamview.ResourceMonitorConfig.DiskSpace disk_spaces = 1;
  total_size += 1UL * this->_internal_disk_spaces_size();
  for (const auto& msg : this->disk_spaces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dreamview.ResourceMonitorConfig.CPUUsage cpu_usages = 2;
  total_size += 1UL * this->_internal_cpu_usages_size();
  for (const auto& msg : this->cpu_usages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dreamview.ResourceMonitorConfig.MemoryUsage memory_usages = 3;
  total_size += 1UL * this->_internal_memory_usages_size();
  for (const auto& msg : this->memory_usages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dreamview.ResourceMonitorConfig.DiskLoad disk_load_usages = 4;
  total_size += 1UL * this->_internal_disk_load_usages_size();
  for (const auto& msg : this->disk_load_usages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceMonitorConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.ResourceMonitorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceMonitorConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceMonitorConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.ResourceMonitorConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.ResourceMonitorConfig)
    MergeFrom(*source);
  }
}

void ResourceMonitorConfig::MergeFrom(const ResourceMonitorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.ResourceMonitorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  disk_spaces_.MergeFrom(from.disk_spaces_);
  cpu_usages_.MergeFrom(from.cpu_usages_);
  memory_usages_.MergeFrom(from.memory_usages_);
  disk_load_usages_.MergeFrom(from.disk_load_usages_);
}

void ResourceMonitorConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.ResourceMonitorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceMonitorConfig::CopyFrom(const ResourceMonitorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.ResourceMonitorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceMonitorConfig::IsInitialized() const {
  return true;
}

void ResourceMonitorConfig::InternalSwap(ResourceMonitorConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  disk_spaces_.InternalSwap(&other->disk_spaces_);
  cpu_usages_.InternalSwap(&other->cpu_usages_);
  memory_usages_.InternalSwap(&other->memory_usages_);
  disk_load_usages_.InternalSwap(&other->disk_load_usages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceMonitorConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MonitoredComponent::_Internal {
 public:
  using HasBits = decltype(std::declval<MonitoredComponent>()._has_bits_);
  static const ::apollo::dreamview::ProcessMonitorConfig& process(const MonitoredComponent* msg);
  static void set_has_process(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::dreamview::ChannelMonitorConfig& channel(const MonitoredComponent* msg);
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::dreamview::ResourceMonitorConfig& resource(const MonitoredComponent* msg);
  static void set_has_resource(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_required_for_safety(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::dreamview::ModuleMonitorConfig& module(const MonitoredComponent* msg);
  static void set_has_module(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::dreamview::ProcessMonitorConfig&
MonitoredComponent::_Internal::process(const MonitoredComponent* msg) {
  return *msg->process_;
}
const ::apollo::dreamview::ChannelMonitorConfig&
MonitoredComponent::_Internal::channel(const MonitoredComponent* msg) {
  return *msg->channel_;
}
const ::apollo::dreamview::ResourceMonitorConfig&
MonitoredComponent::_Internal::resource(const MonitoredComponent* msg) {
  return *msg->resource_;
}
const ::apollo::dreamview::ModuleMonitorConfig&
MonitoredComponent::_Internal::module(const MonitoredComponent* msg) {
  return *msg->module_;
}
MonitoredComponent::MonitoredComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.MonitoredComponent)
}
MonitoredComponent::MonitoredComponent(const MonitoredComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_process()) {
    process_ = new ::apollo::dreamview::ProcessMonitorConfig(*from.process_);
  } else {
    process_ = nullptr;
  }
  if (from._internal_has_channel()) {
    channel_ = new ::apollo::dreamview::ChannelMonitorConfig(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  if (from._internal_has_resource()) {
    resource_ = new ::apollo::dreamview::ResourceMonitorConfig(*from.resource_);
  } else {
    resource_ = nullptr;
  }
  if (from._internal_has_module()) {
    module_ = new ::apollo::dreamview::ModuleMonitorConfig(*from.module_);
  } else {
    module_ = nullptr;
  }
  required_for_safety_ = from.required_for_safety_;
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.MonitoredComponent)
}

void MonitoredComponent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MonitoredComponent_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&process_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&module_) -
      reinterpret_cast<char*>(&process_)) + sizeof(module_));
  required_for_safety_ = true;
}

MonitoredComponent::~MonitoredComponent() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.MonitoredComponent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MonitoredComponent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete process_;
  if (this != internal_default_instance()) delete channel_;
  if (this != internal_default_instance()) delete resource_;
  if (this != internal_default_instance()) delete module_;
}

void MonitoredComponent::ArenaDtor(void* object) {
  MonitoredComponent* _this = reinterpret_cast< MonitoredComponent* >(object);
  (void)_this;
}
void MonitoredComponent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MonitoredComponent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonitoredComponent& MonitoredComponent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MonitoredComponent_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  return *internal_default_instance();
}


void MonitoredComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.MonitoredComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(process_ != nullptr);
      process_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(channel_ != nullptr);
      channel_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(resource_ != nullptr);
      resource_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(module_ != nullptr);
      module_->Clear();
    }
    required_for_safety_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonitoredComponent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.dreamview.ProcessMonitorConfig process = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_process(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.dreamview.ChannelMonitorConfig channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.dreamview.ResourceMonitorConfig resource = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool required_for_safety = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_required_for_safety(&has_bits);
          required_for_safety_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.dreamview.ModuleMonitorConfig module = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_module(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MonitoredComponent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.MonitoredComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.dreamview.ProcessMonitorConfig process = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::process(this), target, stream);
  }

  // optional .apollo.dreamview.ChannelMonitorConfig channel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channel(this), target, stream);
  }

  // optional .apollo.dreamview.ResourceMonitorConfig resource = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::resource(this), target, stream);
  }

  // optional bool required_for_safety = 4 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_required_for_safety(), target);
  }

  // optional .apollo.dreamview.ModuleMonitorConfig module = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::module(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.MonitoredComponent)
  return target;
}

size_t MonitoredComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.MonitoredComponent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.dreamview.ProcessMonitorConfig process = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *process_);
    }

    // optional .apollo.dreamview.ChannelMonitorConfig channel = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *channel_);
    }

    // optional .apollo.dreamview.ResourceMonitorConfig resource = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_);
    }

    // optional .apollo.dreamview.ModuleMonitorConfig module = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *module_);
    }

    // optional bool required_for_safety = 4 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonitoredComponent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.MonitoredComponent)
  GOOGLE_DCHECK_NE(&from, this);
  const MonitoredComponent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MonitoredComponent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.MonitoredComponent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.MonitoredComponent)
    MergeFrom(*source);
  }
}

void MonitoredComponent::MergeFrom(const MonitoredComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.MonitoredComponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_process()->::apollo::dreamview::ProcessMonitorConfig::MergeFrom(from._internal_process());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_channel()->::apollo::dreamview::ChannelMonitorConfig::MergeFrom(from._internal_channel());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_resource()->::apollo::dreamview::ResourceMonitorConfig::MergeFrom(from._internal_resource());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_module()->::apollo::dreamview::ModuleMonitorConfig::MergeFrom(from._internal_module());
    }
    if (cached_has_bits & 0x00000010u) {
      required_for_safety_ = from.required_for_safety_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MonitoredComponent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.MonitoredComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonitoredComponent::CopyFrom(const MonitoredComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.MonitoredComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitoredComponent::IsInitialized() const {
  return true;
}

void MonitoredComponent::InternalSwap(MonitoredComponent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonitoredComponent, module_)
      + sizeof(MonitoredComponent::module_)
      - PROTOBUF_FIELD_OFFSET(MonitoredComponent, process_)>(
          reinterpret_cast<char*>(&process_),
          reinterpret_cast<char*>(&other->process_));
  swap(required_for_safety_, other->required_for_safety_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitoredComponent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Module::_Internal {
 public:
  using HasBits = decltype(std::declval<Module>()._has_bits_);
  static void set_has_start_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stop_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::dreamview::ProcessMonitorConfig& process_monitor_config(const Module* msg);
  static void set_has_process_monitor_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_required_for_safety(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::dreamview::ProcessMonitorConfig&
Module::_Internal::process_monitor_config(const Module* msg) {
  return *msg->process_monitor_config_;
}
Module::Module(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.Module)
}
Module::Module(const Module& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  start_command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_start_command()) {
    start_command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start_command(), 
      GetArena());
  }
  stop_command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_stop_command()) {
    stop_command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stop_command(), 
      GetArena());
  }
  if (from._internal_has_process_monitor_config()) {
    process_monitor_config_ = new ::apollo::dreamview::ProcessMonitorConfig(*from.process_monitor_config_);
  } else {
    process_monitor_config_ = nullptr;
  }
  required_for_safety_ = from.required_for_safety_;
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Module)
}

void Module::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Module_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  start_command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stop_command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  process_monitor_config_ = nullptr;
  required_for_safety_ = true;
}

Module::~Module() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Module)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Module::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  start_command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stop_command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete process_monitor_config_;
}

void Module::ArenaDtor(void* object) {
  Module* _this = reinterpret_cast< Module* >(object);
  (void)_this;
}
void Module::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Module::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Module& Module::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Module_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  return *internal_default_instance();
}


void Module::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Module)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      start_command_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      stop_command_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(process_monitor_config_ != nullptr);
      process_monitor_config_->Clear();
    }
    required_for_safety_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Module::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string start_command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_start_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.Module.start_command");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string stop_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_stop_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.Module.stop_command");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.dreamview.ProcessMonitorConfig process_monitor_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_process_monitor_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool required_for_safety = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_required_for_safety(&has_bits);
          required_for_safety_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Module::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Module)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string start_command = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_start_command().data(), static_cast<int>(this->_internal_start_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Module.start_command");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_start_command(), target);
  }

  // optional string stop_command = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stop_command().data(), static_cast<int>(this->_internal_stop_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Module.stop_command");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stop_command(), target);
  }

  // optional .apollo.dreamview.ProcessMonitorConfig process_monitor_config = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::process_monitor_config(this), target, stream);
  }

  // optional bool required_for_safety = 4 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_required_for_safety(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Module)
  return target;
}

size_t Module::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Module)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string start_command = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_start_command());
    }

    // optional string stop_command = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stop_command());
    }

    // optional .apollo.dreamview.ProcessMonitorConfig process_monitor_config = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *process_monitor_config_);
    }

    // optional bool required_for_safety = 4 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Module::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Module)
  GOOGLE_DCHECK_NE(&from, this);
  const Module* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Module>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Module)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Module)
    MergeFrom(*source);
  }
}

void Module::MergeFrom(const Module& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Module)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_start_command(from._internal_start_command());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_stop_command(from._internal_stop_command());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_process_monitor_config()->::apollo::dreamview::ProcessMonitorConfig::MergeFrom(from._internal_process_monitor_config());
    }
    if (cached_has_bits & 0x00000008u) {
      required_for_safety_ = from.required_for_safety_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Module::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Module)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Module::CopyFrom(const Module& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Module)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Module::IsInitialized() const {
  return true;
}

void Module::InternalSwap(Module* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  start_command_.Swap(&other->start_command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stop_command_.Swap(&other->stop_command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(process_monitor_config_, other->process_monitor_config_);
  swap(required_for_safety_, other->required_for_safety_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Module::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CyberModule::_Internal {
 public:
  using HasBits = decltype(std::declval<CyberModule>()._has_bits_);
  static void set_has_required_for_safety(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_process_group(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CyberModule::CyberModule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dag_files_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.CyberModule)
}
CyberModule::CyberModule(const CyberModule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      dag_files_(from.dag_files_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  process_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_process_group()) {
    process_group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_process_group(), 
      GetArena());
  }
  required_for_safety_ = from.required_for_safety_;
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.CyberModule)
}

void CyberModule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CyberModule_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  process_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  required_for_safety_ = true;
}

CyberModule::~CyberModule() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.CyberModule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CyberModule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  process_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CyberModule::ArenaDtor(void* object) {
  CyberModule* _this = reinterpret_cast< CyberModule* >(object);
  (void)_this;
}
void CyberModule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CyberModule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CyberModule& CyberModule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CyberModule_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  return *internal_default_instance();
}


void CyberModule::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.CyberModule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dag_files_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      process_group_.ClearNonDefaultToEmpty();
    }
    required_for_safety_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CyberModule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string dag_files = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dag_files();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.CyberModule.dag_files");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool required_for_safety = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_required_for_safety(&has_bits);
          required_for_safety_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string process_group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_process_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.CyberModule.process_group");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CyberModule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.CyberModule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dag_files = 1;
  for (int i = 0, n = this->_internal_dag_files_size(); i < n; i++) {
    const auto& s = this->_internal_dag_files(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.CyberModule.dag_files");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool required_for_safety = 2 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_required_for_safety(), target);
  }

  // optional string process_group = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_process_group().data(), static_cast<int>(this->_internal_process_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.CyberModule.process_group");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_process_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.CyberModule)
  return target;
}

size_t CyberModule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.CyberModule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dag_files = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dag_files_.size());
  for (int i = 0, n = dag_files_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dag_files_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string process_group = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_process_group());
    }

    // optional bool required_for_safety = 2 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CyberModule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.CyberModule)
  GOOGLE_DCHECK_NE(&from, this);
  const CyberModule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CyberModule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.CyberModule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.CyberModule)
    MergeFrom(*source);
  }
}

void CyberModule::MergeFrom(const CyberModule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.CyberModule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dag_files_.MergeFrom(from.dag_files_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_process_group(from._internal_process_group());
    }
    if (cached_has_bits & 0x00000002u) {
      required_for_safety_ = from.required_for_safety_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CyberModule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.CyberModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CyberModule::CopyFrom(const CyberModule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.CyberModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CyberModule::IsInitialized() const {
  return true;
}

void CyberModule::InternalSwap(CyberModule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dag_files_.InternalSwap(&other->dag_files_);
  process_group_.Swap(&other->process_group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(required_for_safety_, other->required_for_safety_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CyberModule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

HMIMode_CyberModulesEntry_DoNotUse::HMIMode_CyberModulesEntry_DoNotUse() {}
HMIMode_CyberModulesEntry_DoNotUse::HMIMode_CyberModulesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HMIMode_CyberModulesEntry_DoNotUse::MergeFrom(const HMIMode_CyberModulesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HMIMode_CyberModulesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void HMIMode_CyberModulesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

HMIMode_ModulesEntry_DoNotUse::HMIMode_ModulesEntry_DoNotUse() {}
HMIMode_ModulesEntry_DoNotUse::HMIMode_ModulesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HMIMode_ModulesEntry_DoNotUse::MergeFrom(const HMIMode_ModulesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HMIMode_ModulesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void HMIMode_ModulesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

HMIMode_MonitoredComponentsEntry_DoNotUse::HMIMode_MonitoredComponentsEntry_DoNotUse() {}
HMIMode_MonitoredComponentsEntry_DoNotUse::HMIMode_MonitoredComponentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HMIMode_MonitoredComponentsEntry_DoNotUse::MergeFrom(const HMIMode_MonitoredComponentsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HMIMode_MonitoredComponentsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void HMIMode_MonitoredComponentsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

HMIMode_OtherComponentsEntry_DoNotUse::HMIMode_OtherComponentsEntry_DoNotUse() {}
HMIMode_OtherComponentsEntry_DoNotUse::HMIMode_OtherComponentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HMIMode_OtherComponentsEntry_DoNotUse::MergeFrom(const HMIMode_OtherComponentsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HMIMode_OtherComponentsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void HMIMode_OtherComponentsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

HMIMode_GlobalComponentsEntry_DoNotUse::HMIMode_GlobalComponentsEntry_DoNotUse() {}
HMIMode_GlobalComponentsEntry_DoNotUse::HMIMode_GlobalComponentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HMIMode_GlobalComponentsEntry_DoNotUse::MergeFrom(const HMIMode_GlobalComponentsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HMIMode_GlobalComponentsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void HMIMode_GlobalComponentsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class HMIMode::_Internal {
 public:
  using HasBits = decltype(std::declval<HMIMode>()._has_bits_);
  static void set_has_default_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_layout(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HMIMode::HMIMode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cyber_modules_(arena),
  modules_(arena),
  monitored_components_(arena),
  other_components_(arena),
  operations_(arena),
  global_components_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.HMIMode)
}
HMIMode::HMIMode(const HMIMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      operations_(from.operations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cyber_modules_.MergeFrom(from.cyber_modules_);
  modules_.MergeFrom(from.modules_);
  monitored_components_.MergeFrom(from.monitored_components_);
  other_components_.MergeFrom(from.other_components_);
  global_components_.MergeFrom(from.global_components_);
  layout_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_layout()) {
    layout_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_layout(), 
      GetArena());
  }
  default_operation_ = from.default_operation_;
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.HMIMode)
}

void HMIMode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HMIMode_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  layout_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_operation_ = 0;
}

HMIMode::~HMIMode() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.HMIMode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HMIMode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  layout_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HMIMode::ArenaDtor(void* object) {
  HMIMode* _this = reinterpret_cast< HMIMode* >(object);
  (void)_this;
}
void HMIMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HMIMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HMIMode& HMIMode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HMIMode_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  return *internal_default_instance();
}


void HMIMode::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.HMIMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cyber_modules_.Clear();
  modules_.Clear();
  monitored_components_.Clear();
  other_components_.Clear();
  operations_.Clear();
  global_components_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    layout_.ClearNonDefaultToEmpty();
  }
  default_operation_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HMIMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .apollo.dreamview.CyberModule> cyber_modules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&cyber_modules_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .apollo.dreamview.Module> modules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&modules_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .apollo.dreamview.MonitoredComponent> monitored_components = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&monitored_components_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .apollo.dreamview.ProcessMonitorConfig> other_components = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&other_components_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.HMIModeOperation operations = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::dreamview::HMIModeOperation_IsValid(val))) {
              _internal_add_operations(static_cast<::apollo::dreamview::HMIModeOperation>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_operations(), ptr, ctx, ::apollo::dreamview::HMIModeOperation_IsValid, &_internal_metadata_, 5);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.dreamview.HMIModeOperation default_operation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::dreamview::HMIModeOperation_IsValid(val))) {
            _internal_set_default_operation(static_cast<::apollo::dreamview::HMIModeOperation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string layout = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_layout();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.HMIMode.layout");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .apollo.dreamview.MonitoredComponent> global_components = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&global_components_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HMIMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.HMIMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .apollo.dreamview.CyberModule> cyber_modules = 1;
  if (!this->_internal_cyber_modules().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::CyberModule >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIMode.CyberModulesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_cyber_modules().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_cyber_modules().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::CyberModule >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::CyberModule >::const_iterator
          it = this->_internal_cyber_modules().begin();
          it != this->_internal_cyber_modules().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = HMIMode_CyberModulesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::CyberModule >::const_iterator
          it = this->_internal_cyber_modules().begin();
          it != this->_internal_cyber_modules().end(); ++it) {
        target = HMIMode_CyberModulesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .apollo.dreamview.Module> modules = 2;
  if (!this->_internal_modules().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Module >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIMode.ModulesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_modules().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_modules().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Module >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Module >::const_iterator
          it = this->_internal_modules().begin();
          it != this->_internal_modules().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = HMIMode_ModulesEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Module >::const_iterator
          it = this->_internal_modules().begin();
          it != this->_internal_modules().end(); ++it) {
        target = HMIMode_ModulesEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .apollo.dreamview.MonitoredComponent> monitored_components = 3;
  if (!this->_internal_monitored_components().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIMode.MonitoredComponentsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_monitored_components().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_monitored_components().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >::const_iterator
          it = this->_internal_monitored_components().begin();
          it != this->_internal_monitored_components().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = HMIMode_MonitoredComponentsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >::const_iterator
          it = this->_internal_monitored_components().begin();
          it != this->_internal_monitored_components().end(); ++it) {
        target = HMIMode_MonitoredComponentsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .apollo.dreamview.ProcessMonitorConfig> other_components = 4;
  if (!this->_internal_other_components().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::ProcessMonitorConfig >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIMode.OtherComponentsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_other_components().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_other_components().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::ProcessMonitorConfig >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::ProcessMonitorConfig >::const_iterator
          it = this->_internal_other_components().begin();
          it != this->_internal_other_components().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = HMIMode_OtherComponentsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::ProcessMonitorConfig >::const_iterator
          it = this->_internal_other_components().begin();
          it != this->_internal_other_components().end(); ++it) {
        target = HMIMode_OtherComponentsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .apollo.dreamview.HMIModeOperation operations = 5;
  for (int i = 0, n = this->_internal_operations_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        5, this->_internal_operations(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.dreamview.HMIModeOperation default_operation = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_default_operation(), target);
  }

  // optional string layout = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_layout().data(), static_cast<int>(this->_internal_layout().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.HMIMode.layout");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_layout(), target);
  }

  // map<string, .apollo.dreamview.MonitoredComponent> global_components = 8;
  if (!this->_internal_global_components().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIMode.GlobalComponentsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_global_components().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_global_components().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >::const_iterator
          it = this->_internal_global_components().begin();
          it != this->_internal_global_components().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = HMIMode_GlobalComponentsEntry_DoNotUse::Funcs::InternalSerialize(8, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >::const_iterator
          it = this->_internal_global_components().begin();
          it != this->_internal_global_components().end(); ++it) {
        target = HMIMode_GlobalComponentsEntry_DoNotUse::Funcs::InternalSerialize(8, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.HMIMode)
  return target;
}

size_t HMIMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.HMIMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .apollo.dreamview.CyberModule> cyber_modules = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cyber_modules_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::CyberModule >::const_iterator
      it = this->_internal_cyber_modules().begin();
      it != this->_internal_cyber_modules().end(); ++it) {
    total_size += HMIMode_CyberModulesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .apollo.dreamview.Module> modules = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_modules_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Module >::const_iterator
      it = this->_internal_modules().begin();
      it != this->_internal_modules().end(); ++it) {
    total_size += HMIMode_ModulesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .apollo.dreamview.MonitoredComponent> monitored_components = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_monitored_components_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >::const_iterator
      it = this->_internal_monitored_components().begin();
      it != this->_internal_monitored_components().end(); ++it) {
    total_size += HMIMode_MonitoredComponentsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .apollo.dreamview.ProcessMonitorConfig> other_components = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_other_components_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::ProcessMonitorConfig >::const_iterator
      it = this->_internal_other_components().begin();
      it != this->_internal_other_components().end(); ++it) {
    total_size += HMIMode_OtherComponentsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .apollo.dreamview.HMIModeOperation operations = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_operations_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_operations(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // map<string, .apollo.dreamview.MonitoredComponent> global_components = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_global_components_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >::const_iterator
      it = this->_internal_global_components().begin();
      it != this->_internal_global_components().end(); ++it) {
    total_size += HMIMode_GlobalComponentsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string layout = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_layout());
    }

    // optional .apollo.dreamview.HMIModeOperation default_operation = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_default_operation());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HMIMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.HMIMode)
  GOOGLE_DCHECK_NE(&from, this);
  const HMIMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HMIMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.HMIMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.HMIMode)
    MergeFrom(*source);
  }
}

void HMIMode::MergeFrom(const HMIMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.HMIMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cyber_modules_.MergeFrom(from.cyber_modules_);
  modules_.MergeFrom(from.modules_);
  monitored_components_.MergeFrom(from.monitored_components_);
  other_components_.MergeFrom(from.other_components_);
  operations_.MergeFrom(from.operations_);
  global_components_.MergeFrom(from.global_components_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_layout(from._internal_layout());
    }
    if (cached_has_bits & 0x00000002u) {
      default_operation_ = from.default_operation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HMIMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.HMIMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HMIMode::CopyFrom(const HMIMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.HMIMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HMIMode::IsInitialized() const {
  return true;
}

void HMIMode::InternalSwap(HMIMode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cyber_modules_.Swap(&other->cyber_modules_);
  modules_.Swap(&other->modules_);
  monitored_components_.Swap(&other->monitored_components_);
  other_components_.Swap(&other->other_components_);
  operations_.InternalSwap(&other->operations_);
  global_components_.Swap(&other->global_components_);
  layout_.Swap(&other->layout_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(default_operation_, other->default_operation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HMIMode::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::dreamview::ProcessMonitorConfig* Arena::CreateMaybeMessage< ::apollo::dreamview::ProcessMonitorConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::ProcessMonitorConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::ModuleMonitorConfig* Arena::CreateMaybeMessage< ::apollo::dreamview::ModuleMonitorConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::ModuleMonitorConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::ChannelMonitorConfig* Arena::CreateMaybeMessage< ::apollo::dreamview::ChannelMonitorConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::ChannelMonitorConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::ResourceMonitorConfig_DiskSpace* Arena::CreateMaybeMessage< ::apollo::dreamview::ResourceMonitorConfig_DiskSpace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::ResourceMonitorConfig_DiskSpace >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::ResourceMonitorConfig_CPUUsage* Arena::CreateMaybeMessage< ::apollo::dreamview::ResourceMonitorConfig_CPUUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::ResourceMonitorConfig_CPUUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage* Arena::CreateMaybeMessage< ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::ResourceMonitorConfig_DiskLoad* Arena::CreateMaybeMessage< ::apollo::dreamview::ResourceMonitorConfig_DiskLoad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::ResourceMonitorConfig_DiskLoad >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::ResourceMonitorConfig* Arena::CreateMaybeMessage< ::apollo::dreamview::ResourceMonitorConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::ResourceMonitorConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::MonitoredComponent* Arena::CreateMaybeMessage< ::apollo::dreamview::MonitoredComponent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::MonitoredComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Module* Arena::CreateMaybeMessage< ::apollo::dreamview::Module >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::Module >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::CyberModule* Arena::CreateMaybeMessage< ::apollo::dreamview::CyberModule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::CyberModule >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::HMIMode_CyberModulesEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::dreamview::HMIMode_CyberModulesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::HMIMode_CyberModulesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::HMIMode_ModulesEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::dreamview::HMIMode_ModulesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::HMIMode_ModulesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::HMIMode_MonitoredComponentsEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::dreamview::HMIMode_MonitoredComponentsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::HMIMode_MonitoredComponentsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::HMIMode_OtherComponentsEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::dreamview::HMIMode_OtherComponentsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::HMIMode_OtherComponentsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::HMIMode_GlobalComponentsEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::dreamview::HMIMode_GlobalComponentsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::HMIMode_GlobalComponentsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::HMIMode* Arena::CreateMaybeMessage< ::apollo::dreamview::HMIMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::HMIMode >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
