// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/scenario.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fscenario_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fscenario_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common_msgs/simulation_msgs/scenario.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fscenario_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdreamview_2fproto_2fscenario_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fscenario_2eproto;
namespace apollo {
namespace dreamview {
class SimTicket;
class SimTicketDefaultTypeInternal;
extern SimTicketDefaultTypeInternal _SimTicket_default_instance_;
class UserAdsGroup;
class UserAdsGroupDefaultTypeInternal;
extern UserAdsGroupDefaultTypeInternal _UserAdsGroup_default_instance_;
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::dreamview::SimTicket* Arena::CreateMaybeMessage<::apollo::dreamview::SimTicket>(Arena*);
template<> ::apollo::dreamview::UserAdsGroup* Arena::CreateMaybeMessage<::apollo::dreamview::UserAdsGroup>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace dreamview {

// ===================================================================

class SimTicket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.SimTicket) */ {
 public:
  inline SimTicket() : SimTicket(nullptr) {}
  virtual ~SimTicket();

  SimTicket(const SimTicket& from);
  SimTicket(SimTicket&& from) noexcept
    : SimTicket() {
    *this = ::std::move(from);
  }

  inline SimTicket& operator=(const SimTicket& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimTicket& operator=(SimTicket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimTicket& default_instance();

  static inline const SimTicket* internal_default_instance() {
    return reinterpret_cast<const SimTicket*>(
               &_SimTicket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SimTicket& a, SimTicket& b) {
    a.Swap(&b);
  }
  inline void Swap(SimTicket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimTicket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimTicket* New() const final {
    return CreateMaybeMessage<SimTicket>(nullptr);
  }

  SimTicket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimTicket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimTicket& from);
  void MergeFrom(const SimTicket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimTicket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.SimTicket";
  }
  protected:
  explicit SimTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fscenario_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fscenario_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 7,
    kDescriptionEnTokensFieldNumber = 14,
    kIdFieldNumber = 1,
    kAuthorNameFieldNumber = 2,
    kTypeFieldNumber = 4,
    kMapIdFieldNumber = 5,
    kBlobPathFieldNumber = 6,
    kCategoryFieldNumber = 8,
    kTimeFieldNumber = 9,
    kCreateTimeFieldNumber = 10,
    kDescriptionCnFieldNumber = 12,
    kDescriptionEnFieldNumber = 13,
    kScenarioFieldNumber = 3,
    kNumberFieldNumber = 11,
  };
  // repeated string tags = 7;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // repeated string description_en_tokens = 14;
  int description_en_tokens_size() const;
  private:
  int _internal_description_en_tokens_size() const;
  public:
  void clear_description_en_tokens();
  const std::string& description_en_tokens(int index) const;
  std::string* mutable_description_en_tokens(int index);
  void set_description_en_tokens(int index, const std::string& value);
  void set_description_en_tokens(int index, std::string&& value);
  void set_description_en_tokens(int index, const char* value);
  void set_description_en_tokens(int index, const char* value, size_t size);
  std::string* add_description_en_tokens();
  void add_description_en_tokens(const std::string& value);
  void add_description_en_tokens(std::string&& value);
  void add_description_en_tokens(const char* value);
  void add_description_en_tokens(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& description_en_tokens() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_description_en_tokens();
  private:
  const std::string& _internal_description_en_tokens(int index) const;
  std::string* _internal_add_description_en_tokens();
  public:

  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string author_name = 2;
  bool has_author_name() const;
  private:
  bool _internal_has_author_name() const;
  public:
  void clear_author_name();
  const std::string& author_name() const;
  void set_author_name(const std::string& value);
  void set_author_name(std::string&& value);
  void set_author_name(const char* value);
  void set_author_name(const char* value, size_t size);
  std::string* mutable_author_name();
  std::string* release_author_name();
  void set_allocated_author_name(std::string* author_name);
  private:
  const std::string& _internal_author_name() const;
  void _internal_set_author_name(const std::string& value);
  std::string* _internal_mutable_author_name();
  public:

  // optional string type = 4;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string map_id = 5;
  bool has_map_id() const;
  private:
  bool _internal_has_map_id() const;
  public:
  void clear_map_id();
  const std::string& map_id() const;
  void set_map_id(const std::string& value);
  void set_map_id(std::string&& value);
  void set_map_id(const char* value);
  void set_map_id(const char* value, size_t size);
  std::string* mutable_map_id();
  std::string* release_map_id();
  void set_allocated_map_id(std::string* map_id);
  private:
  const std::string& _internal_map_id() const;
  void _internal_set_map_id(const std::string& value);
  std::string* _internal_mutable_map_id();
  public:

  // optional string blob_path = 6;
  bool has_blob_path() const;
  private:
  bool _internal_has_blob_path() const;
  public:
  void clear_blob_path();
  const std::string& blob_path() const;
  void set_blob_path(const std::string& value);
  void set_blob_path(std::string&& value);
  void set_blob_path(const char* value);
  void set_blob_path(const char* value, size_t size);
  std::string* mutable_blob_path();
  std::string* release_blob_path();
  void set_allocated_blob_path(std::string* blob_path);
  private:
  const std::string& _internal_blob_path() const;
  void _internal_set_blob_path(const std::string& value);
  std::string* _internal_mutable_blob_path();
  public:

  // optional string category = 8;
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  const std::string& category() const;
  void set_category(const std::string& value);
  void set_category(std::string&& value);
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  std::string* mutable_category();
  std::string* release_category();
  void set_allocated_category(std::string* category);
  private:
  const std::string& _internal_category() const;
  void _internal_set_category(const std::string& value);
  std::string* _internal_mutable_category();
  public:

  // optional string time = 9;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // optional string create_time = 10;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const std::string& create_time() const;
  void set_create_time(const std::string& value);
  void set_create_time(std::string&& value);
  void set_create_time(const char* value);
  void set_create_time(const char* value, size_t size);
  std::string* mutable_create_time();
  std::string* release_create_time();
  void set_allocated_create_time(std::string* create_time);
  private:
  const std::string& _internal_create_time() const;
  void _internal_set_create_time(const std::string& value);
  std::string* _internal_mutable_create_time();
  public:

  // optional string description_cn = 12;
  bool has_description_cn() const;
  private:
  bool _internal_has_description_cn() const;
  public:
  void clear_description_cn();
  const std::string& description_cn() const;
  void set_description_cn(const std::string& value);
  void set_description_cn(std::string&& value);
  void set_description_cn(const char* value);
  void set_description_cn(const char* value, size_t size);
  std::string* mutable_description_cn();
  std::string* release_description_cn();
  void set_allocated_description_cn(std::string* description_cn);
  private:
  const std::string& _internal_description_cn() const;
  void _internal_set_description_cn(const std::string& value);
  std::string* _internal_mutable_description_cn();
  public:

  // optional string description_en = 13;
  bool has_description_en() const;
  private:
  bool _internal_has_description_en() const;
  public:
  void clear_description_en();
  const std::string& description_en() const;
  void set_description_en(const std::string& value);
  void set_description_en(std::string&& value);
  void set_description_en(const char* value);
  void set_description_en(const char* value, size_t size);
  std::string* mutable_description_en();
  std::string* release_description_en();
  void set_allocated_description_en(std::string* description_en);
  private:
  const std::string& _internal_description_en() const;
  void _internal_set_description_en(const std::string& value);
  std::string* _internal_mutable_description_en();
  public:

  // optional .apollo.simulation.Scenario scenario = 3;
  bool has_scenario() const;
  private:
  bool _internal_has_scenario() const;
  public:
  void clear_scenario();
  const ::apollo::simulation::Scenario& scenario() const;
  ::apollo::simulation::Scenario* release_scenario();
  ::apollo::simulation::Scenario* mutable_scenario();
  void set_allocated_scenario(::apollo::simulation::Scenario* scenario);
  private:
  const ::apollo::simulation::Scenario& _internal_scenario() const;
  ::apollo::simulation::Scenario* _internal_mutable_scenario();
  public:
  void unsafe_arena_set_allocated_scenario(
      ::apollo::simulation::Scenario* scenario);
  ::apollo::simulation::Scenario* unsafe_arena_release_scenario();

  // optional int32 number = 11;
  bool has_number() const;
  private:
  bool _internal_has_number() const;
  public:
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int32 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.SimTicket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> description_en_tokens_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_cn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_en_;
  ::apollo::simulation::Scenario* scenario_;
  ::PROTOBUF_NAMESPACE_ID::int32 number_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fscenario_2eproto;
};
// -------------------------------------------------------------------

class UserAdsGroup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.UserAdsGroup) */ {
 public:
  inline UserAdsGroup() : UserAdsGroup(nullptr) {}
  virtual ~UserAdsGroup();

  UserAdsGroup(const UserAdsGroup& from);
  UserAdsGroup(UserAdsGroup&& from) noexcept
    : UserAdsGroup() {
    *this = ::std::move(from);
  }

  inline UserAdsGroup& operator=(const UserAdsGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserAdsGroup& operator=(UserAdsGroup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserAdsGroup& default_instance();

  static inline const UserAdsGroup* internal_default_instance() {
    return reinterpret_cast<const UserAdsGroup*>(
               &_UserAdsGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserAdsGroup& a, UserAdsGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(UserAdsGroup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserAdsGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserAdsGroup* New() const final {
    return CreateMaybeMessage<UserAdsGroup>(nullptr);
  }

  UserAdsGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserAdsGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserAdsGroup& from);
  void MergeFrom(const UserAdsGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAdsGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.UserAdsGroup";
  }
  protected:
  explicit UserAdsGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fscenario_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fscenario_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketidsFieldNumber = 4,
    kTagsFieldNumber = 7,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kUseridFieldNumber = 3,
    kTypeFieldNumber = 6,
    kDescripitionFieldNumber = 8,
    kCreateTimeFieldNumber = 9,
    kModTimeFieldNumber = 10,
    kVisibleToPrivilegedUsersFieldNumber = 5,
  };
  // repeated string ticketids = 4;
  int ticketids_size() const;
  private:
  int _internal_ticketids_size() const;
  public:
  void clear_ticketids();
  const std::string& ticketids(int index) const;
  std::string* mutable_ticketids(int index);
  void set_ticketids(int index, const std::string& value);
  void set_ticketids(int index, std::string&& value);
  void set_ticketids(int index, const char* value);
  void set_ticketids(int index, const char* value, size_t size);
  std::string* add_ticketids();
  void add_ticketids(const std::string& value);
  void add_ticketids(std::string&& value);
  void add_ticketids(const char* value);
  void add_ticketids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ticketids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ticketids();
  private:
  const std::string& _internal_ticketids(int index) const;
  std::string* _internal_add_ticketids();
  public:

  // repeated string tags = 7;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string userid = 3;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // optional string type = 6;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string descripition = 8;
  bool has_descripition() const;
  private:
  bool _internal_has_descripition() const;
  public:
  void clear_descripition();
  const std::string& descripition() const;
  void set_descripition(const std::string& value);
  void set_descripition(std::string&& value);
  void set_descripition(const char* value);
  void set_descripition(const char* value, size_t size);
  std::string* mutable_descripition();
  std::string* release_descripition();
  void set_allocated_descripition(std::string* descripition);
  private:
  const std::string& _internal_descripition() const;
  void _internal_set_descripition(const std::string& value);
  std::string* _internal_mutable_descripition();
  public:

  // optional double create_time = 9;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  double create_time() const;
  void set_create_time(double value);
  private:
  double _internal_create_time() const;
  void _internal_set_create_time(double value);
  public:

  // optional double mod_time = 10;
  bool has_mod_time() const;
  private:
  bool _internal_has_mod_time() const;
  public:
  void clear_mod_time();
  double mod_time() const;
  void set_mod_time(double value);
  private:
  double _internal_mod_time() const;
  void _internal_set_mod_time(double value);
  public:

  // optional bool visible_to_privileged_users = 5;
  bool has_visible_to_privileged_users() const;
  private:
  bool _internal_has_visible_to_privileged_users() const;
  public:
  void clear_visible_to_privileged_users();
  bool visible_to_privileged_users() const;
  void set_visible_to_privileged_users(bool value);
  private:
  bool _internal_visible_to_privileged_users() const;
  void _internal_set_visible_to_privileged_users(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.UserAdsGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ticketids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descripition_;
  double create_time_;
  double mod_time_;
  bool visible_to_privileged_users_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fscenario_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SimTicket

// optional string id = 1;
inline bool SimTicket::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SimTicket::has_id() const {
  return _internal_has_id();
}
inline void SimTicket::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SimTicket::id() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimTicket.id)
  return _internal_id();
}
inline void SimTicket::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimTicket.id)
}
inline std::string* SimTicket::mutable_id() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimTicket.id)
  return _internal_mutable_id();
}
inline const std::string& SimTicket::_internal_id() const {
  return id_.Get();
}
inline void SimTicket::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SimTicket::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.SimTicket.id)
}
inline void SimTicket::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.SimTicket.id)
}
inline void SimTicket::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.SimTicket.id)
}
inline std::string* SimTicket::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SimTicket::release_id() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimTicket.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SimTicket::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimTicket.id)
}

// optional string author_name = 2;
inline bool SimTicket::_internal_has_author_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SimTicket::has_author_name() const {
  return _internal_has_author_name();
}
inline void SimTicket::clear_author_name() {
  author_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SimTicket::author_name() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimTicket.author_name)
  return _internal_author_name();
}
inline void SimTicket::set_author_name(const std::string& value) {
  _internal_set_author_name(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimTicket.author_name)
}
inline std::string* SimTicket::mutable_author_name() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimTicket.author_name)
  return _internal_mutable_author_name();
}
inline const std::string& SimTicket::_internal_author_name() const {
  return author_name_.Get();
}
inline void SimTicket::_internal_set_author_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  author_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SimTicket::set_author_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  author_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.SimTicket.author_name)
}
inline void SimTicket::set_author_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  author_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.SimTicket.author_name)
}
inline void SimTicket::set_author_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  author_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.SimTicket.author_name)
}
inline std::string* SimTicket::_internal_mutable_author_name() {
  _has_bits_[0] |= 0x00000002u;
  return author_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SimTicket::release_author_name() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimTicket.author_name)
  if (!_internal_has_author_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return author_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SimTicket::set_allocated_author_name(std::string* author_name) {
  if (author_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  author_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), author_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimTicket.author_name)
}

// optional .apollo.simulation.Scenario scenario = 3;
inline bool SimTicket::_internal_has_scenario() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || scenario_ != nullptr);
  return value;
}
inline bool SimTicket::has_scenario() const {
  return _internal_has_scenario();
}
inline const ::apollo::simulation::Scenario& SimTicket::_internal_scenario() const {
  const ::apollo::simulation::Scenario* p = scenario_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::simulation::Scenario&>(
      ::apollo::simulation::_Scenario_default_instance_);
}
inline const ::apollo::simulation::Scenario& SimTicket::scenario() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimTicket.scenario)
  return _internal_scenario();
}
inline void SimTicket::unsafe_arena_set_allocated_scenario(
    ::apollo::simulation::Scenario* scenario) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario_);
  }
  scenario_ = scenario;
  if (scenario) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.dreamview.SimTicket.scenario)
}
inline ::apollo::simulation::Scenario* SimTicket::release_scenario() {
  _has_bits_[0] &= ~0x00000400u;
  ::apollo::simulation::Scenario* temp = scenario_;
  scenario_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::simulation::Scenario* SimTicket::unsafe_arena_release_scenario() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimTicket.scenario)
  _has_bits_[0] &= ~0x00000400u;
  ::apollo::simulation::Scenario* temp = scenario_;
  scenario_ = nullptr;
  return temp;
}
inline ::apollo::simulation::Scenario* SimTicket::_internal_mutable_scenario() {
  _has_bits_[0] |= 0x00000400u;
  if (scenario_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::simulation::Scenario>(GetArena());
    scenario_ = p;
  }
  return scenario_;
}
inline ::apollo::simulation::Scenario* SimTicket::mutable_scenario() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimTicket.scenario)
  return _internal_mutable_scenario();
}
inline void SimTicket::set_allocated_scenario(::apollo::simulation::Scenario* scenario) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario_);
  }
  if (scenario) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario)->GetArena();
    if (message_arena != submessage_arena) {
      scenario = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scenario, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  scenario_ = scenario;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimTicket.scenario)
}

// optional string type = 4;
inline bool SimTicket::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SimTicket::has_type() const {
  return _internal_has_type();
}
inline void SimTicket::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SimTicket::type() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimTicket.type)
  return _internal_type();
}
inline void SimTicket::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimTicket.type)
}
inline std::string* SimTicket::mutable_type() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimTicket.type)
  return _internal_mutable_type();
}
inline const std::string& SimTicket::_internal_type() const {
  return type_.Get();
}
inline void SimTicket::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SimTicket::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.SimTicket.type)
}
inline void SimTicket::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.SimTicket.type)
}
inline void SimTicket::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.SimTicket.type)
}
inline std::string* SimTicket::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000004u;
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SimTicket::release_type() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimTicket.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SimTicket::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimTicket.type)
}

// optional string map_id = 5;
inline bool SimTicket::_internal_has_map_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SimTicket::has_map_id() const {
  return _internal_has_map_id();
}
inline void SimTicket::clear_map_id() {
  map_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SimTicket::map_id() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimTicket.map_id)
  return _internal_map_id();
}
inline void SimTicket::set_map_id(const std::string& value) {
  _internal_set_map_id(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimTicket.map_id)
}
inline std::string* SimTicket::mutable_map_id() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimTicket.map_id)
  return _internal_mutable_map_id();
}
inline const std::string& SimTicket::_internal_map_id() const {
  return map_id_.Get();
}
inline void SimTicket::_internal_set_map_id(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  map_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SimTicket::set_map_id(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  map_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.SimTicket.map_id)
}
inline void SimTicket::set_map_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  map_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.SimTicket.map_id)
}
inline void SimTicket::set_map_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  map_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.SimTicket.map_id)
}
inline std::string* SimTicket::_internal_mutable_map_id() {
  _has_bits_[0] |= 0x00000008u;
  return map_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SimTicket::release_map_id() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimTicket.map_id)
  if (!_internal_has_map_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return map_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SimTicket::set_allocated_map_id(std::string* map_id) {
  if (map_id != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  map_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimTicket.map_id)
}

// optional string blob_path = 6;
inline bool SimTicket::_internal_has_blob_path() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SimTicket::has_blob_path() const {
  return _internal_has_blob_path();
}
inline void SimTicket::clear_blob_path() {
  blob_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SimTicket::blob_path() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimTicket.blob_path)
  return _internal_blob_path();
}
inline void SimTicket::set_blob_path(const std::string& value) {
  _internal_set_blob_path(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimTicket.blob_path)
}
inline std::string* SimTicket::mutable_blob_path() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimTicket.blob_path)
  return _internal_mutable_blob_path();
}
inline const std::string& SimTicket::_internal_blob_path() const {
  return blob_path_.Get();
}
inline void SimTicket::_internal_set_blob_path(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  blob_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SimTicket::set_blob_path(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  blob_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.SimTicket.blob_path)
}
inline void SimTicket::set_blob_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  blob_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.SimTicket.blob_path)
}
inline void SimTicket::set_blob_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  blob_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.SimTicket.blob_path)
}
inline std::string* SimTicket::_internal_mutable_blob_path() {
  _has_bits_[0] |= 0x00000010u;
  return blob_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SimTicket::release_blob_path() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimTicket.blob_path)
  if (!_internal_has_blob_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return blob_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SimTicket::set_allocated_blob_path(std::string* blob_path) {
  if (blob_path != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  blob_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blob_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimTicket.blob_path)
}

// repeated string tags = 7;
inline int SimTicket::_internal_tags_size() const {
  return tags_.size();
}
inline int SimTicket::tags_size() const {
  return _internal_tags_size();
}
inline void SimTicket::clear_tags() {
  tags_.Clear();
}
inline std::string* SimTicket::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.SimTicket.tags)
  return _internal_add_tags();
}
inline const std::string& SimTicket::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& SimTicket::tags(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimTicket.tags)
  return _internal_tags(index);
}
inline std::string* SimTicket::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimTicket.tags)
  return tags_.Mutable(index);
}
inline void SimTicket::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimTicket.tags)
  tags_.Mutable(index)->assign(value);
}
inline void SimTicket::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimTicket.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void SimTicket::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.SimTicket.tags)
}
inline void SimTicket::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.SimTicket.tags)
}
inline std::string* SimTicket::_internal_add_tags() {
  return tags_.Add();
}
inline void SimTicket::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.SimTicket.tags)
}
inline void SimTicket::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.SimTicket.tags)
}
inline void SimTicket::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.SimTicket.tags)
}
inline void SimTicket::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.SimTicket.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SimTicket::tags() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.SimTicket.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SimTicket::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.SimTicket.tags)
  return &tags_;
}

// optional string category = 8;
inline bool SimTicket::_internal_has_category() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SimTicket::has_category() const {
  return _internal_has_category();
}
inline void SimTicket::clear_category() {
  category_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& SimTicket::category() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimTicket.category)
  return _internal_category();
}
inline void SimTicket::set_category(const std::string& value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimTicket.category)
}
inline std::string* SimTicket::mutable_category() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimTicket.category)
  return _internal_mutable_category();
}
inline const std::string& SimTicket::_internal_category() const {
  return category_.Get();
}
inline void SimTicket::_internal_set_category(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  category_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SimTicket::set_category(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  category_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.SimTicket.category)
}
inline void SimTicket::set_category(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  category_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.SimTicket.category)
}
inline void SimTicket::set_category(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  category_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.SimTicket.category)
}
inline std::string* SimTicket::_internal_mutable_category() {
  _has_bits_[0] |= 0x00000020u;
  return category_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SimTicket::release_category() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimTicket.category)
  if (!_internal_has_category()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return category_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SimTicket::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  category_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimTicket.category)
}

// optional string time = 9;
inline bool SimTicket::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SimTicket::has_time() const {
  return _internal_has_time();
}
inline void SimTicket::clear_time() {
  time_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& SimTicket::time() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimTicket.time)
  return _internal_time();
}
inline void SimTicket::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimTicket.time)
}
inline std::string* SimTicket::mutable_time() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimTicket.time)
  return _internal_mutable_time();
}
inline const std::string& SimTicket::_internal_time() const {
  return time_.Get();
}
inline void SimTicket::_internal_set_time(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SimTicket::set_time(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  time_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.SimTicket.time)
}
inline void SimTicket::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.SimTicket.time)
}
inline void SimTicket::set_time(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.SimTicket.time)
}
inline std::string* SimTicket::_internal_mutable_time() {
  _has_bits_[0] |= 0x00000040u;
  return time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SimTicket::release_time() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimTicket.time)
  if (!_internal_has_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return time_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SimTicket::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimTicket.time)
}

// optional string create_time = 10;
inline bool SimTicket::_internal_has_create_time() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SimTicket::has_create_time() const {
  return _internal_has_create_time();
}
inline void SimTicket::clear_create_time() {
  create_time_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& SimTicket::create_time() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimTicket.create_time)
  return _internal_create_time();
}
inline void SimTicket::set_create_time(const std::string& value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimTicket.create_time)
}
inline std::string* SimTicket::mutable_create_time() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimTicket.create_time)
  return _internal_mutable_create_time();
}
inline const std::string& SimTicket::_internal_create_time() const {
  return create_time_.Get();
}
inline void SimTicket::_internal_set_create_time(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  create_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SimTicket::set_create_time(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  create_time_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.SimTicket.create_time)
}
inline void SimTicket::set_create_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  create_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.SimTicket.create_time)
}
inline void SimTicket::set_create_time(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  create_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.SimTicket.create_time)
}
inline std::string* SimTicket::_internal_mutable_create_time() {
  _has_bits_[0] |= 0x00000080u;
  return create_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SimTicket::release_create_time() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimTicket.create_time)
  if (!_internal_has_create_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return create_time_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SimTicket::set_allocated_create_time(std::string* create_time) {
  if (create_time != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  create_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimTicket.create_time)
}

// optional int32 number = 11;
inline bool SimTicket::_internal_has_number() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SimTicket::has_number() const {
  return _internal_has_number();
}
inline void SimTicket::clear_number() {
  number_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimTicket::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimTicket::number() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimTicket.number)
  return _internal_number();
}
inline void SimTicket::_internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  number_ = value;
}
inline void SimTicket::set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimTicket.number)
}

// optional string description_cn = 12;
inline bool SimTicket::_internal_has_description_cn() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SimTicket::has_description_cn() const {
  return _internal_has_description_cn();
}
inline void SimTicket::clear_description_cn() {
  description_cn_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& SimTicket::description_cn() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimTicket.description_cn)
  return _internal_description_cn();
}
inline void SimTicket::set_description_cn(const std::string& value) {
  _internal_set_description_cn(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimTicket.description_cn)
}
inline std::string* SimTicket::mutable_description_cn() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimTicket.description_cn)
  return _internal_mutable_description_cn();
}
inline const std::string& SimTicket::_internal_description_cn() const {
  return description_cn_.Get();
}
inline void SimTicket::_internal_set_description_cn(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  description_cn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SimTicket::set_description_cn(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  description_cn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.SimTicket.description_cn)
}
inline void SimTicket::set_description_cn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  description_cn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.SimTicket.description_cn)
}
inline void SimTicket::set_description_cn(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  description_cn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.SimTicket.description_cn)
}
inline std::string* SimTicket::_internal_mutable_description_cn() {
  _has_bits_[0] |= 0x00000100u;
  return description_cn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SimTicket::release_description_cn() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimTicket.description_cn)
  if (!_internal_has_description_cn()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return description_cn_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SimTicket::set_allocated_description_cn(std::string* description_cn) {
  if (description_cn != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  description_cn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description_cn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimTicket.description_cn)
}

// optional string description_en = 13;
inline bool SimTicket::_internal_has_description_en() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SimTicket::has_description_en() const {
  return _internal_has_description_en();
}
inline void SimTicket::clear_description_en() {
  description_en_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& SimTicket::description_en() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimTicket.description_en)
  return _internal_description_en();
}
inline void SimTicket::set_description_en(const std::string& value) {
  _internal_set_description_en(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimTicket.description_en)
}
inline std::string* SimTicket::mutable_description_en() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimTicket.description_en)
  return _internal_mutable_description_en();
}
inline const std::string& SimTicket::_internal_description_en() const {
  return description_en_.Get();
}
inline void SimTicket::_internal_set_description_en(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  description_en_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SimTicket::set_description_en(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  description_en_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.SimTicket.description_en)
}
inline void SimTicket::set_description_en(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  description_en_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.SimTicket.description_en)
}
inline void SimTicket::set_description_en(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  description_en_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.SimTicket.description_en)
}
inline std::string* SimTicket::_internal_mutable_description_en() {
  _has_bits_[0] |= 0x00000200u;
  return description_en_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SimTicket::release_description_en() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimTicket.description_en)
  if (!_internal_has_description_en()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return description_en_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SimTicket::set_allocated_description_en(std::string* description_en) {
  if (description_en != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  description_en_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description_en,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimTicket.description_en)
}

// repeated string description_en_tokens = 14;
inline int SimTicket::_internal_description_en_tokens_size() const {
  return description_en_tokens_.size();
}
inline int SimTicket::description_en_tokens_size() const {
  return _internal_description_en_tokens_size();
}
inline void SimTicket::clear_description_en_tokens() {
  description_en_tokens_.Clear();
}
inline std::string* SimTicket::add_description_en_tokens() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.SimTicket.description_en_tokens)
  return _internal_add_description_en_tokens();
}
inline const std::string& SimTicket::_internal_description_en_tokens(int index) const {
  return description_en_tokens_.Get(index);
}
inline const std::string& SimTicket::description_en_tokens(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimTicket.description_en_tokens)
  return _internal_description_en_tokens(index);
}
inline std::string* SimTicket::mutable_description_en_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimTicket.description_en_tokens)
  return description_en_tokens_.Mutable(index);
}
inline void SimTicket::set_description_en_tokens(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimTicket.description_en_tokens)
  description_en_tokens_.Mutable(index)->assign(value);
}
inline void SimTicket::set_description_en_tokens(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimTicket.description_en_tokens)
  description_en_tokens_.Mutable(index)->assign(std::move(value));
}
inline void SimTicket::set_description_en_tokens(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  description_en_tokens_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.SimTicket.description_en_tokens)
}
inline void SimTicket::set_description_en_tokens(int index, const char* value, size_t size) {
  description_en_tokens_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.SimTicket.description_en_tokens)
}
inline std::string* SimTicket::_internal_add_description_en_tokens() {
  return description_en_tokens_.Add();
}
inline void SimTicket::add_description_en_tokens(const std::string& value) {
  description_en_tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.SimTicket.description_en_tokens)
}
inline void SimTicket::add_description_en_tokens(std::string&& value) {
  description_en_tokens_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.SimTicket.description_en_tokens)
}
inline void SimTicket::add_description_en_tokens(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  description_en_tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.SimTicket.description_en_tokens)
}
inline void SimTicket::add_description_en_tokens(const char* value, size_t size) {
  description_en_tokens_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.SimTicket.description_en_tokens)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SimTicket::description_en_tokens() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.SimTicket.description_en_tokens)
  return description_en_tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SimTicket::mutable_description_en_tokens() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.SimTicket.description_en_tokens)
  return &description_en_tokens_;
}

// -------------------------------------------------------------------

// UserAdsGroup

// optional string id = 1;
inline bool UserAdsGroup::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserAdsGroup::has_id() const {
  return _internal_has_id();
}
inline void UserAdsGroup::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserAdsGroup::id() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.UserAdsGroup.id)
  return _internal_id();
}
inline void UserAdsGroup::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.UserAdsGroup.id)
}
inline std::string* UserAdsGroup::mutable_id() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.UserAdsGroup.id)
  return _internal_mutable_id();
}
inline const std::string& UserAdsGroup::_internal_id() const {
  return id_.Get();
}
inline void UserAdsGroup::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserAdsGroup::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.UserAdsGroup.id)
}
inline void UserAdsGroup::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.UserAdsGroup.id)
}
inline void UserAdsGroup::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.UserAdsGroup.id)
}
inline std::string* UserAdsGroup::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserAdsGroup::release_id() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.UserAdsGroup.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserAdsGroup::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.UserAdsGroup.id)
}

// optional string name = 2;
inline bool UserAdsGroup::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserAdsGroup::has_name() const {
  return _internal_has_name();
}
inline void UserAdsGroup::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserAdsGroup::name() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.UserAdsGroup.name)
  return _internal_name();
}
inline void UserAdsGroup::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.UserAdsGroup.name)
}
inline std::string* UserAdsGroup::mutable_name() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.UserAdsGroup.name)
  return _internal_mutable_name();
}
inline const std::string& UserAdsGroup::_internal_name() const {
  return name_.Get();
}
inline void UserAdsGroup::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserAdsGroup::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.UserAdsGroup.name)
}
inline void UserAdsGroup::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.UserAdsGroup.name)
}
inline void UserAdsGroup::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.UserAdsGroup.name)
}
inline std::string* UserAdsGroup::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserAdsGroup::release_name() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.UserAdsGroup.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserAdsGroup::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.UserAdsGroup.name)
}

// optional string userid = 3;
inline bool UserAdsGroup::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserAdsGroup::has_userid() const {
  return _internal_has_userid();
}
inline void UserAdsGroup::clear_userid() {
  userid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& UserAdsGroup::userid() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.UserAdsGroup.userid)
  return _internal_userid();
}
inline void UserAdsGroup::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.UserAdsGroup.userid)
}
inline std::string* UserAdsGroup::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.UserAdsGroup.userid)
  return _internal_mutable_userid();
}
inline const std::string& UserAdsGroup::_internal_userid() const {
  return userid_.Get();
}
inline void UserAdsGroup::_internal_set_userid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserAdsGroup::set_userid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  userid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.UserAdsGroup.userid)
}
inline void UserAdsGroup::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.UserAdsGroup.userid)
}
inline void UserAdsGroup::set_userid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.UserAdsGroup.userid)
}
inline std::string* UserAdsGroup::_internal_mutable_userid() {
  _has_bits_[0] |= 0x00000004u;
  return userid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserAdsGroup::release_userid() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.UserAdsGroup.userid)
  if (!_internal_has_userid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return userid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserAdsGroup::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.UserAdsGroup.userid)
}

// repeated string ticketids = 4;
inline int UserAdsGroup::_internal_ticketids_size() const {
  return ticketids_.size();
}
inline int UserAdsGroup::ticketids_size() const {
  return _internal_ticketids_size();
}
inline void UserAdsGroup::clear_ticketids() {
  ticketids_.Clear();
}
inline std::string* UserAdsGroup::add_ticketids() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.UserAdsGroup.ticketids)
  return _internal_add_ticketids();
}
inline const std::string& UserAdsGroup::_internal_ticketids(int index) const {
  return ticketids_.Get(index);
}
inline const std::string& UserAdsGroup::ticketids(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.UserAdsGroup.ticketids)
  return _internal_ticketids(index);
}
inline std::string* UserAdsGroup::mutable_ticketids(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.UserAdsGroup.ticketids)
  return ticketids_.Mutable(index);
}
inline void UserAdsGroup::set_ticketids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.UserAdsGroup.ticketids)
  ticketids_.Mutable(index)->assign(value);
}
inline void UserAdsGroup::set_ticketids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.UserAdsGroup.ticketids)
  ticketids_.Mutable(index)->assign(std::move(value));
}
inline void UserAdsGroup::set_ticketids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ticketids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.UserAdsGroup.ticketids)
}
inline void UserAdsGroup::set_ticketids(int index, const char* value, size_t size) {
  ticketids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.UserAdsGroup.ticketids)
}
inline std::string* UserAdsGroup::_internal_add_ticketids() {
  return ticketids_.Add();
}
inline void UserAdsGroup::add_ticketids(const std::string& value) {
  ticketids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.UserAdsGroup.ticketids)
}
inline void UserAdsGroup::add_ticketids(std::string&& value) {
  ticketids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.UserAdsGroup.ticketids)
}
inline void UserAdsGroup::add_ticketids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ticketids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.UserAdsGroup.ticketids)
}
inline void UserAdsGroup::add_ticketids(const char* value, size_t size) {
  ticketids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.UserAdsGroup.ticketids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UserAdsGroup::ticketids() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.UserAdsGroup.ticketids)
  return ticketids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UserAdsGroup::mutable_ticketids() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.UserAdsGroup.ticketids)
  return &ticketids_;
}

// optional bool visible_to_privileged_users = 5;
inline bool UserAdsGroup::_internal_has_visible_to_privileged_users() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool UserAdsGroup::has_visible_to_privileged_users() const {
  return _internal_has_visible_to_privileged_users();
}
inline void UserAdsGroup::clear_visible_to_privileged_users() {
  visible_to_privileged_users_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool UserAdsGroup::_internal_visible_to_privileged_users() const {
  return visible_to_privileged_users_;
}
inline bool UserAdsGroup::visible_to_privileged_users() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.UserAdsGroup.visible_to_privileged_users)
  return _internal_visible_to_privileged_users();
}
inline void UserAdsGroup::_internal_set_visible_to_privileged_users(bool value) {
  _has_bits_[0] |= 0x00000080u;
  visible_to_privileged_users_ = value;
}
inline void UserAdsGroup::set_visible_to_privileged_users(bool value) {
  _internal_set_visible_to_privileged_users(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.UserAdsGroup.visible_to_privileged_users)
}

// optional string type = 6;
inline bool UserAdsGroup::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UserAdsGroup::has_type() const {
  return _internal_has_type();
}
inline void UserAdsGroup::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& UserAdsGroup::type() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.UserAdsGroup.type)
  return _internal_type();
}
inline void UserAdsGroup::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.UserAdsGroup.type)
}
inline std::string* UserAdsGroup::mutable_type() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.UserAdsGroup.type)
  return _internal_mutable_type();
}
inline const std::string& UserAdsGroup::_internal_type() const {
  return type_.Get();
}
inline void UserAdsGroup::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserAdsGroup::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.UserAdsGroup.type)
}
inline void UserAdsGroup::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.UserAdsGroup.type)
}
inline void UserAdsGroup::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.UserAdsGroup.type)
}
inline std::string* UserAdsGroup::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000008u;
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserAdsGroup::release_type() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.UserAdsGroup.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserAdsGroup::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.UserAdsGroup.type)
}

// repeated string tags = 7;
inline int UserAdsGroup::_internal_tags_size() const {
  return tags_.size();
}
inline int UserAdsGroup::tags_size() const {
  return _internal_tags_size();
}
inline void UserAdsGroup::clear_tags() {
  tags_.Clear();
}
inline std::string* UserAdsGroup::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.UserAdsGroup.tags)
  return _internal_add_tags();
}
inline const std::string& UserAdsGroup::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& UserAdsGroup::tags(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.UserAdsGroup.tags)
  return _internal_tags(index);
}
inline std::string* UserAdsGroup::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.UserAdsGroup.tags)
  return tags_.Mutable(index);
}
inline void UserAdsGroup::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.UserAdsGroup.tags)
  tags_.Mutable(index)->assign(value);
}
inline void UserAdsGroup::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.UserAdsGroup.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void UserAdsGroup::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.UserAdsGroup.tags)
}
inline void UserAdsGroup::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.UserAdsGroup.tags)
}
inline std::string* UserAdsGroup::_internal_add_tags() {
  return tags_.Add();
}
inline void UserAdsGroup::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.UserAdsGroup.tags)
}
inline void UserAdsGroup::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.UserAdsGroup.tags)
}
inline void UserAdsGroup::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.UserAdsGroup.tags)
}
inline void UserAdsGroup::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.UserAdsGroup.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UserAdsGroup::tags() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.UserAdsGroup.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UserAdsGroup::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.UserAdsGroup.tags)
  return &tags_;
}

// optional string descripition = 8;
inline bool UserAdsGroup::_internal_has_descripition() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UserAdsGroup::has_descripition() const {
  return _internal_has_descripition();
}
inline void UserAdsGroup::clear_descripition() {
  descripition_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& UserAdsGroup::descripition() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.UserAdsGroup.descripition)
  return _internal_descripition();
}
inline void UserAdsGroup::set_descripition(const std::string& value) {
  _internal_set_descripition(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.UserAdsGroup.descripition)
}
inline std::string* UserAdsGroup::mutable_descripition() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.UserAdsGroup.descripition)
  return _internal_mutable_descripition();
}
inline const std::string& UserAdsGroup::_internal_descripition() const {
  return descripition_.Get();
}
inline void UserAdsGroup::_internal_set_descripition(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  descripition_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserAdsGroup::set_descripition(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  descripition_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.UserAdsGroup.descripition)
}
inline void UserAdsGroup::set_descripition(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  descripition_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.UserAdsGroup.descripition)
}
inline void UserAdsGroup::set_descripition(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  descripition_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.UserAdsGroup.descripition)
}
inline std::string* UserAdsGroup::_internal_mutable_descripition() {
  _has_bits_[0] |= 0x00000010u;
  return descripition_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserAdsGroup::release_descripition() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.UserAdsGroup.descripition)
  if (!_internal_has_descripition()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return descripition_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserAdsGroup::set_allocated_descripition(std::string* descripition) {
  if (descripition != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  descripition_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), descripition,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.UserAdsGroup.descripition)
}

// optional double create_time = 9;
inline bool UserAdsGroup::_internal_has_create_time() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool UserAdsGroup::has_create_time() const {
  return _internal_has_create_time();
}
inline void UserAdsGroup::clear_create_time() {
  create_time_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double UserAdsGroup::_internal_create_time() const {
  return create_time_;
}
inline double UserAdsGroup::create_time() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.UserAdsGroup.create_time)
  return _internal_create_time();
}
inline void UserAdsGroup::_internal_set_create_time(double value) {
  _has_bits_[0] |= 0x00000020u;
  create_time_ = value;
}
inline void UserAdsGroup::set_create_time(double value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.UserAdsGroup.create_time)
}

// optional double mod_time = 10;
inline bool UserAdsGroup::_internal_has_mod_time() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool UserAdsGroup::has_mod_time() const {
  return _internal_has_mod_time();
}
inline void UserAdsGroup::clear_mod_time() {
  mod_time_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double UserAdsGroup::_internal_mod_time() const {
  return mod_time_;
}
inline double UserAdsGroup::mod_time() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.UserAdsGroup.mod_time)
  return _internal_mod_time();
}
inline void UserAdsGroup::_internal_set_mod_time(double value) {
  _has_bits_[0] |= 0x00000040u;
  mod_time_ = value;
}
inline void UserAdsGroup::set_mod_time(double value) {
  _internal_set_mod_time(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.UserAdsGroup.mod_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fscenario_2eproto
