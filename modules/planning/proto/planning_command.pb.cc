// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_command.proto

#include "modules/planning/proto/planning_command.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParkingCommand_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2frouting_2fproto_2frouting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_RoutingResponse_modules_2frouting_2fproto_2frouting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
namespace apollo {
namespace planning {
class ParkingCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParkingCommand> _instance;
} _ParkingCommand_default_instance_;
class PlanningCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanningCommand> _instance;
} _PlanningCommand_default_instance_;
}  // namespace planning
}  // namespace apollo
static void InitDefaultsscc_info_ParkingCommand_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ParkingCommand_default_instance_;
    new (ptr) ::apollo::planning::ParkingCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParkingCommand_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ParkingCommand_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_PlanningCommand_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PlanningCommand_default_instance_;
    new (ptr) ::apollo::planning::PlanningCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PlanningCommand_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PlanningCommand_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,
      &scc_info_RoutingResponse_modules_2frouting_2fproto_2frouting_2eproto.base,
      &scc_info_ParkingCommand_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ParkingCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ParkingCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ParkingCommand, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ParkingCommand, parking_spot_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ParkingCommand, target_speed_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningCommand, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningCommand, command_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningCommand, lane_follow_command_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningCommand, target_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningCommand, is_motion_command_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningCommand, command_),
  0,
  4,
  1,
  2,
  3,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::apollo::planning::ParkingCommand)},
  { 11, 24, sizeof(::apollo::planning::PlanningCommand)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ParkingCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PlanningCommand_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-modules/planning/proto/planning_comman"
  "d.proto\022\017apollo.planning\032\031google/protobu"
  "f/any.proto\032!modules/common/proto/header"
  ".proto\032#modules/routing/proto/routing.pr"
  "oto\"f\n\016ParkingCommand\022%\n\006header\030\001 \001(\0132\025."
  "apollo.common.Header\022\027\n\017parking_spot_id\030"
  "\002 \002(\t\022\024\n\014target_speed\030\003 \001(\001\"\275\002\n\017Planning"
  "Command\022%\n\006header\030\001 \001(\0132\025.apollo.common."
  "Header\022\026\n\ncommand_id\030\002 \001(\003:\002-1\022<\n\023lane_f"
  "ollow_command\030\003 \001(\0132\037.apollo.routing.Rou"
  "tingResponse\022\024\n\014target_speed\030\004 \001(\001\022 \n\021is"
  "_motion_command\030\005 \001(\010:\005false\022:\n\017parking_"
  "command\030\006 \001(\0132\037.apollo.planning.ParkingC"
  "ommandH\000\022.\n\016custom_command\030\007 \001(\0132\024.googl"
  "e.protobuf.AnyH\000B\t\n\007command"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2frouting_2fproto_2frouting_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto_sccs[2] = {
  &scc_info_ParkingCommand_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto.base,
  &scc_info_PlanningCommand_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto = {
  false, false, descriptor_table_protodef_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto, "modules/planning/proto/planning_command.proto", 587,
  &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto_sccs, descriptor_table_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto, 2, file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto)), true);
namespace apollo {
namespace planning {

// ===================================================================

class ParkingCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<ParkingCommand>()._has_bits_);
  static const ::apollo::common::Header& header(const ParkingCommand* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_parking_spot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::apollo::common::Header&
ParkingCommand::_Internal::header(const ParkingCommand* msg) {
  return *msg->header_;
}
void ParkingCommand::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ParkingCommand::ParkingCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ParkingCommand)
}
ParkingCommand::ParkingCommand(const ParkingCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parking_spot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_parking_spot_id()) {
    parking_spot_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parking_spot_id(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  target_speed_ = from.target_speed_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ParkingCommand)
}

void ParkingCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParkingCommand_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto.base);
  parking_spot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&target_speed_) -
      reinterpret_cast<char*>(&header_)) + sizeof(target_speed_));
}

ParkingCommand::~ParkingCommand() {
  // @@protoc_insertion_point(destructor:apollo.planning.ParkingCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParkingCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  parking_spot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void ParkingCommand::ArenaDtor(void* object) {
  ParkingCommand* _this = reinterpret_cast< ParkingCommand* >(object);
  (void)_this;
}
void ParkingCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParkingCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParkingCommand& ParkingCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParkingCommand_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto.base);
  return *internal_default_instance();
}


void ParkingCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ParkingCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      parking_spot_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
  }
  target_speed_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParkingCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string parking_spot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_parking_spot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.ParkingCommand.parking_spot_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double target_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_target_speed(&has_bits);
          target_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParkingCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ParkingCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // required string parking_spot_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_parking_spot_id().data(), static_cast<int>(this->_internal_parking_spot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.ParkingCommand.parking_spot_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_parking_spot_id(), target);
  }

  // optional double target_speed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_target_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ParkingCommand)
  return target;
}

size_t ParkingCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ParkingCommand)
  size_t total_size = 0;

  // required string parking_spot_id = 2;
  if (_internal_has_parking_spot_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parking_spot_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional double target_speed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParkingCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ParkingCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParkingCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ParkingCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ParkingCommand)
    MergeFrom(*source);
  }
}

void ParkingCommand::MergeFrom(const ParkingCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ParkingCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_parking_spot_id(from._internal_parking_spot_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      target_speed_ = from.target_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParkingCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ParkingCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingCommand::CopyFrom(const ParkingCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ParkingCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingCommand::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ParkingCommand::InternalSwap(ParkingCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  parking_spot_id_.Swap(&other->parking_spot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParkingCommand, target_speed_)
      + sizeof(ParkingCommand::target_speed_)
      - PROTOBUF_FIELD_OFFSET(ParkingCommand, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParkingCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlanningCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningCommand>()._has_bits_);
  static const ::apollo::common::Header& header(const PlanningCommand* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_command_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::routing::RoutingResponse& lane_follow_command(const PlanningCommand* msg);
  static void set_has_lane_follow_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_motion_command(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::planning::ParkingCommand& parking_command(const PlanningCommand* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& custom_command(const PlanningCommand* msg);
};

const ::apollo::common::Header&
PlanningCommand::_Internal::header(const PlanningCommand* msg) {
  return *msg->header_;
}
const ::apollo::routing::RoutingResponse&
PlanningCommand::_Internal::lane_follow_command(const PlanningCommand* msg) {
  return *msg->lane_follow_command_;
}
const ::apollo::planning::ParkingCommand&
PlanningCommand::_Internal::parking_command(const PlanningCommand* msg) {
  return *msg->command_.parking_command_;
}
const PROTOBUF_NAMESPACE_ID::Any&
PlanningCommand::_Internal::custom_command(const PlanningCommand* msg) {
  return *msg->command_.custom_command_;
}
void PlanningCommand::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PlanningCommand::clear_lane_follow_command() {
  if (lane_follow_command_ != nullptr) lane_follow_command_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void PlanningCommand::set_allocated_parking_command(::apollo::planning::ParkingCommand* parking_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (parking_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(parking_command);
    if (message_arena != submessage_arena) {
      parking_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parking_command, submessage_arena);
    }
    set_has_parking_command();
    command_.parking_command_ = parking_command;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningCommand.parking_command)
}
void PlanningCommand::set_allocated_custom_command(PROTOBUF_NAMESPACE_ID::Any* custom_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (custom_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_command)->GetArena();
    if (message_arena != submessage_arena) {
      custom_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_command, submessage_arena);
    }
    set_has_custom_command();
    command_.custom_command_ = custom_command;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningCommand.custom_command)
}
void PlanningCommand::clear_custom_command() {
  if (_internal_has_custom_command()) {
    if (GetArena() == nullptr) {
      delete command_.custom_command_;
    }
    clear_has_command();
  }
}
PlanningCommand::PlanningCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PlanningCommand)
}
PlanningCommand::PlanningCommand(const PlanningCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_lane_follow_command()) {
    lane_follow_command_ = new ::apollo::routing::RoutingResponse(*from.lane_follow_command_);
  } else {
    lane_follow_command_ = nullptr;
  }
  ::memcpy(&target_speed_, &from.target_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_id_) -
    reinterpret_cast<char*>(&target_speed_)) + sizeof(command_id_));
  clear_has_command();
  switch (from.command_case()) {
    case kParkingCommand: {
      _internal_mutable_parking_command()->::apollo::planning::ParkingCommand::MergeFrom(from._internal_parking_command());
      break;
    }
    case kCustomCommand: {
      _internal_mutable_custom_command()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_custom_command());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlanningCommand)
}

void PlanningCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlanningCommand_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_motion_command_) -
      reinterpret_cast<char*>(&header_)) + sizeof(is_motion_command_));
  command_id_ = PROTOBUF_LONGLONG(-1);
  clear_has_command();
}

PlanningCommand::~PlanningCommand() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlanningCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlanningCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lane_follow_command_;
  if (has_command()) {
    clear_command();
  }
}

void PlanningCommand::ArenaDtor(void* object) {
  PlanningCommand* _this = reinterpret_cast< PlanningCommand* >(object);
  (void)_this;
}
void PlanningCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlanningCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanningCommand& PlanningCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanningCommand_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto.base);
  return *internal_default_instance();
}


void PlanningCommand::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.PlanningCommand)
  switch (command_case()) {
    case kParkingCommand: {
      if (GetArena() == nullptr) {
        delete command_.parking_command_;
      }
      break;
    }
    case kCustomCommand: {
      if (GetArena() == nullptr) {
        delete command_.custom_command_;
      }
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void PlanningCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlanningCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lane_follow_command_ != nullptr);
      lane_follow_command_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&target_speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_motion_command_) -
        reinterpret_cast<char*>(&target_speed_)) + sizeof(is_motion_command_));
    command_id_ = PROTOBUF_LONGLONG(-1);
  }
  clear_command();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanningCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 command_id = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_command_id(&has_bits);
          command_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.routing.RoutingResponse lane_follow_command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_follow_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double target_speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_target_speed(&has_bits);
          target_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_motion_command = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_motion_command(&has_bits);
          is_motion_command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.planning.ParkingCommand parking_command = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_parking_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any custom_command = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanningCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlanningCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional int64 command_id = 2 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_command_id(), target);
  }

  // optional .apollo.routing.RoutingResponse lane_follow_command = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::lane_follow_command(this), target, stream);
  }

  // optional double target_speed = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_target_speed(), target);
  }

  // optional bool is_motion_command = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_motion_command(), target);
  }

  switch (command_case()) {
    case kParkingCommand: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::parking_command(this), target, stream);
      break;
    }
    case kCustomCommand: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::custom_command(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlanningCommand)
  return target;
}

size_t PlanningCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlanningCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.routing.RoutingResponse lane_follow_command = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lane_follow_command_);
    }

    // optional double target_speed = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional bool is_motion_command = 5 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int64 command_id = 2 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_command_id());
    }

  }
  switch (command_case()) {
    // .apollo.planning.ParkingCommand parking_command = 6;
    case kParkingCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.parking_command_);
      break;
    }
    // .google.protobuf.Any custom_command = 7;
    case kCustomCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.custom_command_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PlanningCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanningCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PlanningCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PlanningCommand)
    MergeFrom(*source);
  }
}

void PlanningCommand::MergeFrom(const PlanningCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlanningCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_lane_follow_command()->::apollo::routing::RoutingResponse::MergeFrom(from._internal_lane_follow_command());
    }
    if (cached_has_bits & 0x00000004u) {
      target_speed_ = from.target_speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_motion_command_ = from.is_motion_command_;
    }
    if (cached_has_bits & 0x00000010u) {
      command_id_ = from.command_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.command_case()) {
    case kParkingCommand: {
      _internal_mutable_parking_command()->::apollo::planning::ParkingCommand::MergeFrom(from._internal_parking_command());
      break;
    }
    case kCustomCommand: {
      _internal_mutable_custom_command()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_custom_command());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
}

void PlanningCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PlanningCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningCommand::CopyFrom(const PlanningCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlanningCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningCommand::IsInitialized() const {
  switch (command_case()) {
    case kParkingCommand: {
      if (has_parking_command()) {
        if (!this->parking_command().IsInitialized()) return false;
      }
      break;
    }
    case kCustomCommand: {
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  return true;
}

void PlanningCommand::InternalSwap(PlanningCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlanningCommand, is_motion_command_)
      + sizeof(PlanningCommand::is_motion_command_)
      - PROTOBUF_FIELD_OFFSET(PlanningCommand, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
  swap(command_id_, other->command_id_);
  swap(command_, other->command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::ParkingCommand* Arena::CreateMaybeMessage< ::apollo::planning::ParkingCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ParkingCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PlanningCommand* Arena::CreateMaybeMessage< ::apollo::planning::PlanningCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PlanningCommand >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
