// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include "modules/common/proto/header.pb.h"
#include "modules/routing/proto/routing.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto;
namespace apollo {
namespace planning {
class ParkingCommand;
class ParkingCommandDefaultTypeInternal;
extern ParkingCommandDefaultTypeInternal _ParkingCommand_default_instance_;
class PlanningCommand;
class PlanningCommandDefaultTypeInternal;
extern PlanningCommandDefaultTypeInternal _PlanningCommand_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::ParkingCommand* Arena::CreateMaybeMessage<::apollo::planning::ParkingCommand>(Arena*);
template<> ::apollo::planning::PlanningCommand* Arena::CreateMaybeMessage<::apollo::planning::PlanningCommand>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

// ===================================================================

class ParkingCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ParkingCommand) */ {
 public:
  inline ParkingCommand() : ParkingCommand(nullptr) {}
  virtual ~ParkingCommand();

  ParkingCommand(const ParkingCommand& from);
  ParkingCommand(ParkingCommand&& from) noexcept
    : ParkingCommand() {
    *this = ::std::move(from);
  }

  inline ParkingCommand& operator=(const ParkingCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParkingCommand& operator=(ParkingCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParkingCommand& default_instance();

  static inline const ParkingCommand* internal_default_instance() {
    return reinterpret_cast<const ParkingCommand*>(
               &_ParkingCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ParkingCommand& a, ParkingCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ParkingCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParkingCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParkingCommand* New() const final {
    return CreateMaybeMessage<ParkingCommand>(nullptr);
  }

  ParkingCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParkingCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParkingCommand& from);
  void MergeFrom(const ParkingCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParkingCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ParkingCommand";
  }
  protected:
  explicit ParkingCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParkingSpotIdFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kTargetSpeedFieldNumber = 3,
  };
  // required string parking_spot_id = 2;
  bool has_parking_spot_id() const;
  private:
  bool _internal_has_parking_spot_id() const;
  public:
  void clear_parking_spot_id();
  const std::string& parking_spot_id() const;
  void set_parking_spot_id(const std::string& value);
  void set_parking_spot_id(std::string&& value);
  void set_parking_spot_id(const char* value);
  void set_parking_spot_id(const char* value, size_t size);
  std::string* mutable_parking_spot_id();
  std::string* release_parking_spot_id();
  void set_allocated_parking_spot_id(std::string* parking_spot_id);
  private:
  const std::string& _internal_parking_spot_id() const;
  void _internal_set_parking_spot_id(const std::string& value);
  std::string* _internal_mutable_parking_spot_id();
  public:

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional double target_speed = 3;
  bool has_target_speed() const;
  private:
  bool _internal_has_target_speed() const;
  public:
  void clear_target_speed();
  double target_speed() const;
  void set_target_speed(double value);
  private:
  double _internal_target_speed() const;
  void _internal_set_target_speed(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ParkingCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parking_spot_id_;
  ::apollo::common::Header* header_;
  double target_speed_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class PlanningCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PlanningCommand) */ {
 public:
  inline PlanningCommand() : PlanningCommand(nullptr) {}
  virtual ~PlanningCommand();

  PlanningCommand(const PlanningCommand& from);
  PlanningCommand(PlanningCommand&& from) noexcept
    : PlanningCommand() {
    *this = ::std::move(from);
  }

  inline PlanningCommand& operator=(const PlanningCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanningCommand& operator=(PlanningCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanningCommand& default_instance();

  enum CommandCase {
    kParkingCommand = 6,
    kCustomCommand = 7,
    COMMAND_NOT_SET = 0,
  };

  static inline const PlanningCommand* internal_default_instance() {
    return reinterpret_cast<const PlanningCommand*>(
               &_PlanningCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlanningCommand& a, PlanningCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanningCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlanningCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanningCommand* New() const final {
    return CreateMaybeMessage<PlanningCommand>(nullptr);
  }

  PlanningCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanningCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanningCommand& from);
  void MergeFrom(const PlanningCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanningCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.PlanningCommand";
  }
  protected:
  explicit PlanningCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kLaneFollowCommandFieldNumber = 3,
    kTargetSpeedFieldNumber = 4,
    kIsMotionCommandFieldNumber = 5,
    kCommandIdFieldNumber = 2,
    kParkingCommandFieldNumber = 6,
    kCustomCommandFieldNumber = 7,
  };
  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional .apollo.routing.RoutingResponse lane_follow_command = 3;
  bool has_lane_follow_command() const;
  private:
  bool _internal_has_lane_follow_command() const;
  public:
  void clear_lane_follow_command();
  const ::apollo::routing::RoutingResponse& lane_follow_command() const;
  ::apollo::routing::RoutingResponse* release_lane_follow_command();
  ::apollo::routing::RoutingResponse* mutable_lane_follow_command();
  void set_allocated_lane_follow_command(::apollo::routing::RoutingResponse* lane_follow_command);
  private:
  const ::apollo::routing::RoutingResponse& _internal_lane_follow_command() const;
  ::apollo::routing::RoutingResponse* _internal_mutable_lane_follow_command();
  public:
  void unsafe_arena_set_allocated_lane_follow_command(
      ::apollo::routing::RoutingResponse* lane_follow_command);
  ::apollo::routing::RoutingResponse* unsafe_arena_release_lane_follow_command();

  // optional double target_speed = 4;
  bool has_target_speed() const;
  private:
  bool _internal_has_target_speed() const;
  public:
  void clear_target_speed();
  double target_speed() const;
  void set_target_speed(double value);
  private:
  double _internal_target_speed() const;
  void _internal_set_target_speed(double value);
  public:

  // optional bool is_motion_command = 5 [default = false];
  bool has_is_motion_command() const;
  private:
  bool _internal_has_is_motion_command() const;
  public:
  void clear_is_motion_command();
  bool is_motion_command() const;
  void set_is_motion_command(bool value);
  private:
  bool _internal_is_motion_command() const;
  void _internal_set_is_motion_command(bool value);
  public:

  // optional int64 command_id = 2 [default = -1];
  bool has_command_id() const;
  private:
  bool _internal_has_command_id() const;
  public:
  void clear_command_id();
  ::PROTOBUF_NAMESPACE_ID::int64 command_id() const;
  void set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_command_id() const;
  void _internal_set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .apollo.planning.ParkingCommand parking_command = 6;
  bool has_parking_command() const;
  private:
  bool _internal_has_parking_command() const;
  public:
  void clear_parking_command();
  const ::apollo::planning::ParkingCommand& parking_command() const;
  ::apollo::planning::ParkingCommand* release_parking_command();
  ::apollo::planning::ParkingCommand* mutable_parking_command();
  void set_allocated_parking_command(::apollo::planning::ParkingCommand* parking_command);
  private:
  const ::apollo::planning::ParkingCommand& _internal_parking_command() const;
  ::apollo::planning::ParkingCommand* _internal_mutable_parking_command();
  public:
  void unsafe_arena_set_allocated_parking_command(
      ::apollo::planning::ParkingCommand* parking_command);
  ::apollo::planning::ParkingCommand* unsafe_arena_release_parking_command();

  // .google.protobuf.Any custom_command = 7;
  bool has_custom_command() const;
  private:
  bool _internal_has_custom_command() const;
  public:
  void clear_custom_command();
  const PROTOBUF_NAMESPACE_ID::Any& custom_command() const;
  PROTOBUF_NAMESPACE_ID::Any* release_custom_command();
  PROTOBUF_NAMESPACE_ID::Any* mutable_custom_command();
  void set_allocated_custom_command(PROTOBUF_NAMESPACE_ID::Any* custom_command);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_custom_command() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_custom_command();
  public:
  void unsafe_arena_set_allocated_custom_command(
      PROTOBUF_NAMESPACE_ID::Any* custom_command);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_custom_command();

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:apollo.planning.PlanningCommand)
 private:
  class _Internal;
  void set_has_parking_command();
  void set_has_custom_command();

  inline bool has_command() const;
  inline void clear_has_command();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::common::Header* header_;
  ::apollo::routing::RoutingResponse* lane_follow_command_;
  double target_speed_;
  bool is_motion_command_;
  ::PROTOBUF_NAMESPACE_ID::int64 command_id_;
  union CommandUnion {
    CommandUnion() {}
    ::apollo::planning::ParkingCommand* parking_command_;
    PROTOBUF_NAMESPACE_ID::Any* custom_command_;
  } command_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ParkingCommand

// optional .apollo.common.Header header = 1;
inline bool ParkingCommand::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool ParkingCommand::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& ParkingCommand::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& ParkingCommand::header() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ParkingCommand.header)
  return _internal_header();
}
inline void ParkingCommand::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ParkingCommand.header)
}
inline ::apollo::common::Header* ParkingCommand::release_header() {
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::common::Header* ParkingCommand::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.planning.ParkingCommand.header)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* ParkingCommand::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* ParkingCommand::mutable_header() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ParkingCommand.header)
  return _internal_mutable_header();
}
inline void ParkingCommand::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ParkingCommand.header)
}

// required string parking_spot_id = 2;
inline bool ParkingCommand::_internal_has_parking_spot_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ParkingCommand::has_parking_spot_id() const {
  return _internal_has_parking_spot_id();
}
inline void ParkingCommand::clear_parking_spot_id() {
  parking_spot_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ParkingCommand::parking_spot_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ParkingCommand.parking_spot_id)
  return _internal_parking_spot_id();
}
inline void ParkingCommand::set_parking_spot_id(const std::string& value) {
  _internal_set_parking_spot_id(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ParkingCommand.parking_spot_id)
}
inline std::string* ParkingCommand::mutable_parking_spot_id() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ParkingCommand.parking_spot_id)
  return _internal_mutable_parking_spot_id();
}
inline const std::string& ParkingCommand::_internal_parking_spot_id() const {
  return parking_spot_id_.Get();
}
inline void ParkingCommand::_internal_set_parking_spot_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  parking_spot_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ParkingCommand::set_parking_spot_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  parking_spot_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning.ParkingCommand.parking_spot_id)
}
inline void ParkingCommand::set_parking_spot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  parking_spot_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.planning.ParkingCommand.parking_spot_id)
}
inline void ParkingCommand::set_parking_spot_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  parking_spot_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.ParkingCommand.parking_spot_id)
}
inline std::string* ParkingCommand::_internal_mutable_parking_spot_id() {
  _has_bits_[0] |= 0x00000001u;
  return parking_spot_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ParkingCommand::release_parking_spot_id() {
  // @@protoc_insertion_point(field_release:apollo.planning.ParkingCommand.parking_spot_id)
  if (!_internal_has_parking_spot_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return parking_spot_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParkingCommand::set_allocated_parking_spot_id(std::string* parking_spot_id) {
  if (parking_spot_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  parking_spot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parking_spot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ParkingCommand.parking_spot_id)
}

// optional double target_speed = 3;
inline bool ParkingCommand::_internal_has_target_speed() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ParkingCommand::has_target_speed() const {
  return _internal_has_target_speed();
}
inline void ParkingCommand::clear_target_speed() {
  target_speed_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double ParkingCommand::_internal_target_speed() const {
  return target_speed_;
}
inline double ParkingCommand::target_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ParkingCommand.target_speed)
  return _internal_target_speed();
}
inline void ParkingCommand::_internal_set_target_speed(double value) {
  _has_bits_[0] |= 0x00000004u;
  target_speed_ = value;
}
inline void ParkingCommand::set_target_speed(double value) {
  _internal_set_target_speed(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ParkingCommand.target_speed)
}

// -------------------------------------------------------------------

// PlanningCommand

// optional .apollo.common.Header header = 1;
inline bool PlanningCommand::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool PlanningCommand::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& PlanningCommand::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& PlanningCommand::header() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningCommand.header)
  return _internal_header();
}
inline void PlanningCommand::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.PlanningCommand.header)
}
inline ::apollo::common::Header* PlanningCommand::release_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::common::Header* PlanningCommand::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningCommand.header)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* PlanningCommand::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* PlanningCommand::mutable_header() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningCommand.header)
  return _internal_mutable_header();
}
inline void PlanningCommand::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningCommand.header)
}

// optional int64 command_id = 2 [default = -1];
inline bool PlanningCommand::_internal_has_command_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PlanningCommand::has_command_id() const {
  return _internal_has_command_id();
}
inline void PlanningCommand::clear_command_id() {
  command_id_ = PROTOBUF_LONGLONG(-1);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlanningCommand::_internal_command_id() const {
  return command_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlanningCommand::command_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningCommand.command_id)
  return _internal_command_id();
}
inline void PlanningCommand::_internal_set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  command_id_ = value;
}
inline void PlanningCommand::set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_command_id(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningCommand.command_id)
}

// optional .apollo.routing.RoutingResponse lane_follow_command = 3;
inline bool PlanningCommand::_internal_has_lane_follow_command() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || lane_follow_command_ != nullptr);
  return value;
}
inline bool PlanningCommand::has_lane_follow_command() const {
  return _internal_has_lane_follow_command();
}
inline const ::apollo::routing::RoutingResponse& PlanningCommand::_internal_lane_follow_command() const {
  const ::apollo::routing::RoutingResponse* p = lane_follow_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::routing::RoutingResponse&>(
      ::apollo::routing::_RoutingResponse_default_instance_);
}
inline const ::apollo::routing::RoutingResponse& PlanningCommand::lane_follow_command() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningCommand.lane_follow_command)
  return _internal_lane_follow_command();
}
inline void PlanningCommand::unsafe_arena_set_allocated_lane_follow_command(
    ::apollo::routing::RoutingResponse* lane_follow_command) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lane_follow_command_);
  }
  lane_follow_command_ = lane_follow_command;
  if (lane_follow_command) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.PlanningCommand.lane_follow_command)
}
inline ::apollo::routing::RoutingResponse* PlanningCommand::release_lane_follow_command() {
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::routing::RoutingResponse* temp = lane_follow_command_;
  lane_follow_command_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::routing::RoutingResponse* PlanningCommand::unsafe_arena_release_lane_follow_command() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningCommand.lane_follow_command)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::routing::RoutingResponse* temp = lane_follow_command_;
  lane_follow_command_ = nullptr;
  return temp;
}
inline ::apollo::routing::RoutingResponse* PlanningCommand::_internal_mutable_lane_follow_command() {
  _has_bits_[0] |= 0x00000002u;
  if (lane_follow_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::routing::RoutingResponse>(GetArena());
    lane_follow_command_ = p;
  }
  return lane_follow_command_;
}
inline ::apollo::routing::RoutingResponse* PlanningCommand::mutable_lane_follow_command() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningCommand.lane_follow_command)
  return _internal_mutable_lane_follow_command();
}
inline void PlanningCommand::set_allocated_lane_follow_command(::apollo::routing::RoutingResponse* lane_follow_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lane_follow_command_);
  }
  if (lane_follow_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lane_follow_command)->GetArena();
    if (message_arena != submessage_arena) {
      lane_follow_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_follow_command, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lane_follow_command_ = lane_follow_command;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningCommand.lane_follow_command)
}

// optional double target_speed = 4;
inline bool PlanningCommand::_internal_has_target_speed() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlanningCommand::has_target_speed() const {
  return _internal_has_target_speed();
}
inline void PlanningCommand::clear_target_speed() {
  target_speed_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double PlanningCommand::_internal_target_speed() const {
  return target_speed_;
}
inline double PlanningCommand::target_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningCommand.target_speed)
  return _internal_target_speed();
}
inline void PlanningCommand::_internal_set_target_speed(double value) {
  _has_bits_[0] |= 0x00000004u;
  target_speed_ = value;
}
inline void PlanningCommand::set_target_speed(double value) {
  _internal_set_target_speed(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningCommand.target_speed)
}

// optional bool is_motion_command = 5 [default = false];
inline bool PlanningCommand::_internal_has_is_motion_command() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PlanningCommand::has_is_motion_command() const {
  return _internal_has_is_motion_command();
}
inline void PlanningCommand::clear_is_motion_command() {
  is_motion_command_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PlanningCommand::_internal_is_motion_command() const {
  return is_motion_command_;
}
inline bool PlanningCommand::is_motion_command() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningCommand.is_motion_command)
  return _internal_is_motion_command();
}
inline void PlanningCommand::_internal_set_is_motion_command(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_motion_command_ = value;
}
inline void PlanningCommand::set_is_motion_command(bool value) {
  _internal_set_is_motion_command(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningCommand.is_motion_command)
}

// .apollo.planning.ParkingCommand parking_command = 6;
inline bool PlanningCommand::_internal_has_parking_command() const {
  return command_case() == kParkingCommand;
}
inline bool PlanningCommand::has_parking_command() const {
  return _internal_has_parking_command();
}
inline void PlanningCommand::set_has_parking_command() {
  _oneof_case_[0] = kParkingCommand;
}
inline void PlanningCommand::clear_parking_command() {
  if (_internal_has_parking_command()) {
    if (GetArena() == nullptr) {
      delete command_.parking_command_;
    }
    clear_has_command();
  }
}
inline ::apollo::planning::ParkingCommand* PlanningCommand::release_parking_command() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningCommand.parking_command)
  if (_internal_has_parking_command()) {
    clear_has_command();
      ::apollo::planning::ParkingCommand* temp = command_.parking_command_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.parking_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::ParkingCommand& PlanningCommand::_internal_parking_command() const {
  return _internal_has_parking_command()
      ? *command_.parking_command_
      : reinterpret_cast< ::apollo::planning::ParkingCommand&>(::apollo::planning::_ParkingCommand_default_instance_);
}
inline const ::apollo::planning::ParkingCommand& PlanningCommand::parking_command() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningCommand.parking_command)
  return _internal_parking_command();
}
inline ::apollo::planning::ParkingCommand* PlanningCommand::unsafe_arena_release_parking_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.PlanningCommand.parking_command)
  if (_internal_has_parking_command()) {
    clear_has_command();
    ::apollo::planning::ParkingCommand* temp = command_.parking_command_;
    command_.parking_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PlanningCommand::unsafe_arena_set_allocated_parking_command(::apollo::planning::ParkingCommand* parking_command) {
  clear_command();
  if (parking_command) {
    set_has_parking_command();
    command_.parking_command_ = parking_command;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.PlanningCommand.parking_command)
}
inline ::apollo::planning::ParkingCommand* PlanningCommand::_internal_mutable_parking_command() {
  if (!_internal_has_parking_command()) {
    clear_command();
    set_has_parking_command();
    command_.parking_command_ = CreateMaybeMessage< ::apollo::planning::ParkingCommand >(GetArena());
  }
  return command_.parking_command_;
}
inline ::apollo::planning::ParkingCommand* PlanningCommand::mutable_parking_command() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningCommand.parking_command)
  return _internal_mutable_parking_command();
}

// .google.protobuf.Any custom_command = 7;
inline bool PlanningCommand::_internal_has_custom_command() const {
  return command_case() == kCustomCommand;
}
inline bool PlanningCommand::has_custom_command() const {
  return _internal_has_custom_command();
}
inline void PlanningCommand::set_has_custom_command() {
  _oneof_case_[0] = kCustomCommand;
}
inline PROTOBUF_NAMESPACE_ID::Any* PlanningCommand::release_custom_command() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningCommand.custom_command)
  if (_internal_has_custom_command()) {
    clear_has_command();
      PROTOBUF_NAMESPACE_ID::Any* temp = command_.custom_command_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.custom_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Any& PlanningCommand::_internal_custom_command() const {
  return _internal_has_custom_command()
      ? *command_.custom_command_
      : reinterpret_cast< PROTOBUF_NAMESPACE_ID::Any&>(PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& PlanningCommand::custom_command() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningCommand.custom_command)
  return _internal_custom_command();
}
inline PROTOBUF_NAMESPACE_ID::Any* PlanningCommand::unsafe_arena_release_custom_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.PlanningCommand.custom_command)
  if (_internal_has_custom_command()) {
    clear_has_command();
    PROTOBUF_NAMESPACE_ID::Any* temp = command_.custom_command_;
    command_.custom_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PlanningCommand::unsafe_arena_set_allocated_custom_command(PROTOBUF_NAMESPACE_ID::Any* custom_command) {
  clear_command();
  if (custom_command) {
    set_has_custom_command();
    command_.custom_command_ = custom_command;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.PlanningCommand.custom_command)
}
inline PROTOBUF_NAMESPACE_ID::Any* PlanningCommand::_internal_mutable_custom_command() {
  if (!_internal_has_custom_command()) {
    clear_command();
    set_has_custom_command();
    command_.custom_command_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Any >(GetArena());
  }
  return command_.custom_command_;
}
inline PROTOBUF_NAMESPACE_ID::Any* PlanningCommand::mutable_custom_command() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningCommand.custom_command)
  return _internal_mutable_custom_command();
}

inline bool PlanningCommand::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void PlanningCommand::clear_has_command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
inline PlanningCommand::CommandCase PlanningCommand::command_case() const {
  return PlanningCommand::CommandCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_5fcommand_2eproto
