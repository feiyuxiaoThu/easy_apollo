// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common_msgs/external_command_msgs/lane_follow_command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/common_msgs/external_command_msgs/geometry.pb.h"
#include "modules/common_msgs/external_command_msgs/lane_segment.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto;
namespace apollo {
namespace external_command {
class LaneFollowCommand;
class LaneFollowCommandDefaultTypeInternal;
extern LaneFollowCommandDefaultTypeInternal _LaneFollowCommand_default_instance_;
}  // namespace external_command
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::external_command::LaneFollowCommand* Arena::CreateMaybeMessage<::apollo::external_command::LaneFollowCommand>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace external_command {

// ===================================================================

class LaneFollowCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.external_command.LaneFollowCommand) */ {
 public:
  inline LaneFollowCommand() : LaneFollowCommand(nullptr) {}
  virtual ~LaneFollowCommand();

  LaneFollowCommand(const LaneFollowCommand& from);
  LaneFollowCommand(LaneFollowCommand&& from) noexcept
    : LaneFollowCommand() {
    *this = ::std::move(from);
  }

  inline LaneFollowCommand& operator=(const LaneFollowCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneFollowCommand& operator=(LaneFollowCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneFollowCommand& default_instance();

  static inline const LaneFollowCommand* internal_default_instance() {
    return reinterpret_cast<const LaneFollowCommand*>(
               &_LaneFollowCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LaneFollowCommand& a, LaneFollowCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneFollowCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneFollowCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneFollowCommand* New() const final {
    return CreateMaybeMessage<LaneFollowCommand>(nullptr);
  }

  LaneFollowCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneFollowCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneFollowCommand& from);
  void MergeFrom(const LaneFollowCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneFollowCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.external_command.LaneFollowCommand";
  }
  protected:
  explicit LaneFollowCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto);
    return ::descriptor_table_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWayPointFieldNumber = 4,
    kBlacklistedLaneFieldNumber = 6,
    kBlacklistedRoadFieldNumber = 7,
    kHeaderFieldNumber = 1,
    kEndPoseFieldNumber = 5,
    kTargetSpeedFieldNumber = 8,
    kIsStartPoseSetFieldNumber = 3,
    kCommandIdFieldNumber = 2,
  };
  // repeated .apollo.external_command.Pose way_point = 4;
  int way_point_size() const;
  private:
  int _internal_way_point_size() const;
  public:
  void clear_way_point();
  ::apollo::external_command::Pose* mutable_way_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::external_command::Pose >*
      mutable_way_point();
  private:
  const ::apollo::external_command::Pose& _internal_way_point(int index) const;
  ::apollo::external_command::Pose* _internal_add_way_point();
  public:
  const ::apollo::external_command::Pose& way_point(int index) const;
  ::apollo::external_command::Pose* add_way_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::external_command::Pose >&
      way_point() const;

  // repeated .apollo.external_command.LaneSegment blacklisted_lane = 6;
  int blacklisted_lane_size() const;
  private:
  int _internal_blacklisted_lane_size() const;
  public:
  void clear_blacklisted_lane();
  ::apollo::external_command::LaneSegment* mutable_blacklisted_lane(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::external_command::LaneSegment >*
      mutable_blacklisted_lane();
  private:
  const ::apollo::external_command::LaneSegment& _internal_blacklisted_lane(int index) const;
  ::apollo::external_command::LaneSegment* _internal_add_blacklisted_lane();
  public:
  const ::apollo::external_command::LaneSegment& blacklisted_lane(int index) const;
  ::apollo::external_command::LaneSegment* add_blacklisted_lane();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::external_command::LaneSegment >&
      blacklisted_lane() const;

  // repeated string blacklisted_road = 7;
  int blacklisted_road_size() const;
  private:
  int _internal_blacklisted_road_size() const;
  public:
  void clear_blacklisted_road();
  const std::string& blacklisted_road(int index) const;
  std::string* mutable_blacklisted_road(int index);
  void set_blacklisted_road(int index, const std::string& value);
  void set_blacklisted_road(int index, std::string&& value);
  void set_blacklisted_road(int index, const char* value);
  void set_blacklisted_road(int index, const char* value, size_t size);
  std::string* add_blacklisted_road();
  void add_blacklisted_road(const std::string& value);
  void add_blacklisted_road(std::string&& value);
  void add_blacklisted_road(const char* value);
  void add_blacklisted_road(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blacklisted_road() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blacklisted_road();
  private:
  const std::string& _internal_blacklisted_road(int index) const;
  std::string* _internal_add_blacklisted_road();
  public:

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // required .apollo.external_command.Pose end_pose = 5;
  bool has_end_pose() const;
  private:
  bool _internal_has_end_pose() const;
  public:
  void clear_end_pose();
  const ::apollo::external_command::Pose& end_pose() const;
  ::apollo::external_command::Pose* release_end_pose();
  ::apollo::external_command::Pose* mutable_end_pose();
  void set_allocated_end_pose(::apollo::external_command::Pose* end_pose);
  private:
  const ::apollo::external_command::Pose& _internal_end_pose() const;
  ::apollo::external_command::Pose* _internal_mutable_end_pose();
  public:
  void unsafe_arena_set_allocated_end_pose(
      ::apollo::external_command::Pose* end_pose);
  ::apollo::external_command::Pose* unsafe_arena_release_end_pose();

  // optional double target_speed = 8;
  bool has_target_speed() const;
  private:
  bool _internal_has_target_speed() const;
  public:
  void clear_target_speed();
  double target_speed() const;
  void set_target_speed(double value);
  private:
  double _internal_target_speed() const;
  void _internal_set_target_speed(double value);
  public:

  // optional bool is_start_pose_set = 3 [default = false];
  bool has_is_start_pose_set() const;
  private:
  bool _internal_has_is_start_pose_set() const;
  public:
  void clear_is_start_pose_set();
  bool is_start_pose_set() const;
  void set_is_start_pose_set(bool value);
  private:
  bool _internal_is_start_pose_set() const;
  void _internal_set_is_start_pose_set(bool value);
  public:

  // optional int64 command_id = 2 [default = -1];
  bool has_command_id() const;
  private:
  bool _internal_has_command_id() const;
  public:
  void clear_command_id();
  ::PROTOBUF_NAMESPACE_ID::int64 command_id() const;
  void set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_command_id() const;
  void _internal_set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.external_command.LaneFollowCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::external_command::Pose > way_point_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::external_command::LaneSegment > blacklisted_lane_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blacklisted_road_;
  ::apollo::common::Header* header_;
  ::apollo::external_command::Pose* end_pose_;
  double target_speed_;
  bool is_start_pose_set_;
  ::PROTOBUF_NAMESPACE_ID::int64 command_id_;
  friend struct ::TableStruct_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaneFollowCommand

// optional .apollo.common.Header header = 1;
inline bool LaneFollowCommand::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool LaneFollowCommand::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& LaneFollowCommand::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& LaneFollowCommand::header() const {
  // @@protoc_insertion_point(field_get:apollo.external_command.LaneFollowCommand.header)
  return _internal_header();
}
inline void LaneFollowCommand::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.external_command.LaneFollowCommand.header)
}
inline ::apollo::common::Header* LaneFollowCommand::release_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::common::Header* LaneFollowCommand::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.external_command.LaneFollowCommand.header)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* LaneFollowCommand::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* LaneFollowCommand::mutable_header() {
  // @@protoc_insertion_point(field_mutable:apollo.external_command.LaneFollowCommand.header)
  return _internal_mutable_header();
}
inline void LaneFollowCommand::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.external_command.LaneFollowCommand.header)
}

// optional int64 command_id = 2 [default = -1];
inline bool LaneFollowCommand::_internal_has_command_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LaneFollowCommand::has_command_id() const {
  return _internal_has_command_id();
}
inline void LaneFollowCommand::clear_command_id() {
  command_id_ = PROTOBUF_LONGLONG(-1);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LaneFollowCommand::_internal_command_id() const {
  return command_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LaneFollowCommand::command_id() const {
  // @@protoc_insertion_point(field_get:apollo.external_command.LaneFollowCommand.command_id)
  return _internal_command_id();
}
inline void LaneFollowCommand::_internal_set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  command_id_ = value;
}
inline void LaneFollowCommand::set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_command_id(value);
  // @@protoc_insertion_point(field_set:apollo.external_command.LaneFollowCommand.command_id)
}

// optional bool is_start_pose_set = 3 [default = false];
inline bool LaneFollowCommand::_internal_has_is_start_pose_set() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LaneFollowCommand::has_is_start_pose_set() const {
  return _internal_has_is_start_pose_set();
}
inline void LaneFollowCommand::clear_is_start_pose_set() {
  is_start_pose_set_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool LaneFollowCommand::_internal_is_start_pose_set() const {
  return is_start_pose_set_;
}
inline bool LaneFollowCommand::is_start_pose_set() const {
  // @@protoc_insertion_point(field_get:apollo.external_command.LaneFollowCommand.is_start_pose_set)
  return _internal_is_start_pose_set();
}
inline void LaneFollowCommand::_internal_set_is_start_pose_set(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_start_pose_set_ = value;
}
inline void LaneFollowCommand::set_is_start_pose_set(bool value) {
  _internal_set_is_start_pose_set(value);
  // @@protoc_insertion_point(field_set:apollo.external_command.LaneFollowCommand.is_start_pose_set)
}

// repeated .apollo.external_command.Pose way_point = 4;
inline int LaneFollowCommand::_internal_way_point_size() const {
  return way_point_.size();
}
inline int LaneFollowCommand::way_point_size() const {
  return _internal_way_point_size();
}
inline ::apollo::external_command::Pose* LaneFollowCommand::mutable_way_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.external_command.LaneFollowCommand.way_point)
  return way_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::external_command::Pose >*
LaneFollowCommand::mutable_way_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.external_command.LaneFollowCommand.way_point)
  return &way_point_;
}
inline const ::apollo::external_command::Pose& LaneFollowCommand::_internal_way_point(int index) const {
  return way_point_.Get(index);
}
inline const ::apollo::external_command::Pose& LaneFollowCommand::way_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.external_command.LaneFollowCommand.way_point)
  return _internal_way_point(index);
}
inline ::apollo::external_command::Pose* LaneFollowCommand::_internal_add_way_point() {
  return way_point_.Add();
}
inline ::apollo::external_command::Pose* LaneFollowCommand::add_way_point() {
  // @@protoc_insertion_point(field_add:apollo.external_command.LaneFollowCommand.way_point)
  return _internal_add_way_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::external_command::Pose >&
LaneFollowCommand::way_point() const {
  // @@protoc_insertion_point(field_list:apollo.external_command.LaneFollowCommand.way_point)
  return way_point_;
}

// required .apollo.external_command.Pose end_pose = 5;
inline bool LaneFollowCommand::_internal_has_end_pose() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || end_pose_ != nullptr);
  return value;
}
inline bool LaneFollowCommand::has_end_pose() const {
  return _internal_has_end_pose();
}
inline const ::apollo::external_command::Pose& LaneFollowCommand::_internal_end_pose() const {
  const ::apollo::external_command::Pose* p = end_pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::external_command::Pose&>(
      ::apollo::external_command::_Pose_default_instance_);
}
inline const ::apollo::external_command::Pose& LaneFollowCommand::end_pose() const {
  // @@protoc_insertion_point(field_get:apollo.external_command.LaneFollowCommand.end_pose)
  return _internal_end_pose();
}
inline void LaneFollowCommand::unsafe_arena_set_allocated_end_pose(
    ::apollo::external_command::Pose* end_pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_pose_);
  }
  end_pose_ = end_pose;
  if (end_pose) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.external_command.LaneFollowCommand.end_pose)
}
inline ::apollo::external_command::Pose* LaneFollowCommand::release_end_pose() {
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::external_command::Pose* temp = end_pose_;
  end_pose_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::external_command::Pose* LaneFollowCommand::unsafe_arena_release_end_pose() {
  // @@protoc_insertion_point(field_release:apollo.external_command.LaneFollowCommand.end_pose)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::external_command::Pose* temp = end_pose_;
  end_pose_ = nullptr;
  return temp;
}
inline ::apollo::external_command::Pose* LaneFollowCommand::_internal_mutable_end_pose() {
  _has_bits_[0] |= 0x00000002u;
  if (end_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::external_command::Pose>(GetArena());
    end_pose_ = p;
  }
  return end_pose_;
}
inline ::apollo::external_command::Pose* LaneFollowCommand::mutable_end_pose() {
  // @@protoc_insertion_point(field_mutable:apollo.external_command.LaneFollowCommand.end_pose)
  return _internal_mutable_end_pose();
}
inline void LaneFollowCommand::set_allocated_end_pose(::apollo::external_command::Pose* end_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_pose_);
  }
  if (end_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_pose)->GetArena();
    if (message_arena != submessage_arena) {
      end_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_pose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  end_pose_ = end_pose;
  // @@protoc_insertion_point(field_set_allocated:apollo.external_command.LaneFollowCommand.end_pose)
}

// repeated .apollo.external_command.LaneSegment blacklisted_lane = 6;
inline int LaneFollowCommand::_internal_blacklisted_lane_size() const {
  return blacklisted_lane_.size();
}
inline int LaneFollowCommand::blacklisted_lane_size() const {
  return _internal_blacklisted_lane_size();
}
inline ::apollo::external_command::LaneSegment* LaneFollowCommand::mutable_blacklisted_lane(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.external_command.LaneFollowCommand.blacklisted_lane)
  return blacklisted_lane_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::external_command::LaneSegment >*
LaneFollowCommand::mutable_blacklisted_lane() {
  // @@protoc_insertion_point(field_mutable_list:apollo.external_command.LaneFollowCommand.blacklisted_lane)
  return &blacklisted_lane_;
}
inline const ::apollo::external_command::LaneSegment& LaneFollowCommand::_internal_blacklisted_lane(int index) const {
  return blacklisted_lane_.Get(index);
}
inline const ::apollo::external_command::LaneSegment& LaneFollowCommand::blacklisted_lane(int index) const {
  // @@protoc_insertion_point(field_get:apollo.external_command.LaneFollowCommand.blacklisted_lane)
  return _internal_blacklisted_lane(index);
}
inline ::apollo::external_command::LaneSegment* LaneFollowCommand::_internal_add_blacklisted_lane() {
  return blacklisted_lane_.Add();
}
inline ::apollo::external_command::LaneSegment* LaneFollowCommand::add_blacklisted_lane() {
  // @@protoc_insertion_point(field_add:apollo.external_command.LaneFollowCommand.blacklisted_lane)
  return _internal_add_blacklisted_lane();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::external_command::LaneSegment >&
LaneFollowCommand::blacklisted_lane() const {
  // @@protoc_insertion_point(field_list:apollo.external_command.LaneFollowCommand.blacklisted_lane)
  return blacklisted_lane_;
}

// repeated string blacklisted_road = 7;
inline int LaneFollowCommand::_internal_blacklisted_road_size() const {
  return blacklisted_road_.size();
}
inline int LaneFollowCommand::blacklisted_road_size() const {
  return _internal_blacklisted_road_size();
}
inline void LaneFollowCommand::clear_blacklisted_road() {
  blacklisted_road_.Clear();
}
inline std::string* LaneFollowCommand::add_blacklisted_road() {
  // @@protoc_insertion_point(field_add_mutable:apollo.external_command.LaneFollowCommand.blacklisted_road)
  return _internal_add_blacklisted_road();
}
inline const std::string& LaneFollowCommand::_internal_blacklisted_road(int index) const {
  return blacklisted_road_.Get(index);
}
inline const std::string& LaneFollowCommand::blacklisted_road(int index) const {
  // @@protoc_insertion_point(field_get:apollo.external_command.LaneFollowCommand.blacklisted_road)
  return _internal_blacklisted_road(index);
}
inline std::string* LaneFollowCommand::mutable_blacklisted_road(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.external_command.LaneFollowCommand.blacklisted_road)
  return blacklisted_road_.Mutable(index);
}
inline void LaneFollowCommand::set_blacklisted_road(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.external_command.LaneFollowCommand.blacklisted_road)
  blacklisted_road_.Mutable(index)->assign(value);
}
inline void LaneFollowCommand::set_blacklisted_road(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.external_command.LaneFollowCommand.blacklisted_road)
  blacklisted_road_.Mutable(index)->assign(std::move(value));
}
inline void LaneFollowCommand::set_blacklisted_road(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blacklisted_road_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.external_command.LaneFollowCommand.blacklisted_road)
}
inline void LaneFollowCommand::set_blacklisted_road(int index, const char* value, size_t size) {
  blacklisted_road_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.external_command.LaneFollowCommand.blacklisted_road)
}
inline std::string* LaneFollowCommand::_internal_add_blacklisted_road() {
  return blacklisted_road_.Add();
}
inline void LaneFollowCommand::add_blacklisted_road(const std::string& value) {
  blacklisted_road_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.external_command.LaneFollowCommand.blacklisted_road)
}
inline void LaneFollowCommand::add_blacklisted_road(std::string&& value) {
  blacklisted_road_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.external_command.LaneFollowCommand.blacklisted_road)
}
inline void LaneFollowCommand::add_blacklisted_road(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blacklisted_road_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.external_command.LaneFollowCommand.blacklisted_road)
}
inline void LaneFollowCommand::add_blacklisted_road(const char* value, size_t size) {
  blacklisted_road_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.external_command.LaneFollowCommand.blacklisted_road)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LaneFollowCommand::blacklisted_road() const {
  // @@protoc_insertion_point(field_list:apollo.external_command.LaneFollowCommand.blacklisted_road)
  return blacklisted_road_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LaneFollowCommand::mutable_blacklisted_road() {
  // @@protoc_insertion_point(field_mutable_list:apollo.external_command.LaneFollowCommand.blacklisted_road)
  return &blacklisted_road_;
}

// optional double target_speed = 8;
inline bool LaneFollowCommand::_internal_has_target_speed() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LaneFollowCommand::has_target_speed() const {
  return _internal_has_target_speed();
}
inline void LaneFollowCommand::clear_target_speed() {
  target_speed_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double LaneFollowCommand::_internal_target_speed() const {
  return target_speed_;
}
inline double LaneFollowCommand::target_speed() const {
  // @@protoc_insertion_point(field_get:apollo.external_command.LaneFollowCommand.target_speed)
  return _internal_target_speed();
}
inline void LaneFollowCommand::_internal_set_target_speed(double value) {
  _has_bits_[0] |= 0x00000004u;
  target_speed_ = value;
}
inline void LaneFollowCommand::set_target_speed(double value) {
  _internal_set_target_speed(value);
  // @@protoc_insertion_point(field_set:apollo.external_command.LaneFollowCommand.target_speed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace external_command
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto
