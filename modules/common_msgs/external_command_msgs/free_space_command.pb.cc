// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common_msgs/external_command_msgs/free_space_command.proto

#include "modules/common_msgs/external_command_msgs/free_space_command.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pose_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoiPolygon_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2fgeometry_2eproto;
namespace apollo {
namespace external_command {
class FreeSpaceCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FreeSpaceCommand> _instance;
} _FreeSpaceCommand_default_instance_;
}  // namespace external_command
}  // namespace apollo
static void InitDefaultsscc_info_FreeSpaceCommand_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2ffree_5fspace_5fcommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::external_command::_FreeSpaceCommand_default_instance_;
    new (ptr) ::apollo::external_command::FreeSpaceCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FreeSpaceCommand_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2ffree_5fspace_5fcommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_FreeSpaceCommand_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2ffree_5fspace_5fcommand_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,
      &scc_info_Pose_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2fgeometry_2eproto.base,
      &scc_info_RoiPolygon_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2fgeometry_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2ffree_5fspace_5fcommand_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2ffree_5fspace_5fcommand_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2ffree_5fspace_5fcommand_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2ffree_5fspace_5fcommand_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::external_command::FreeSpaceCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::external_command::FreeSpaceCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::external_command::FreeSpaceCommand, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::external_command::FreeSpaceCommand, command_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::external_command::FreeSpaceCommand, parking_spot_pose_),
  PROTOBUF_FIELD_OFFSET(::apollo::external_command::FreeSpaceCommand, non_drivable_roi_),
  PROTOBUF_FIELD_OFFSET(::apollo::external_command::FreeSpaceCommand, drivable_roi_),
  PROTOBUF_FIELD_OFFSET(::apollo::external_command::FreeSpaceCommand, target_speed_),
  0,
  4,
  1,
  ~0u,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::apollo::external_command::FreeSpaceCommand)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::external_command::_FreeSpaceCommand_default_instance_),
};

const char descriptor_table_protodef_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2ffree_5fspace_5fcommand_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nBmodules/common_msgs/external_command_m"
  "sgs/free_space_command.proto\022\027apollo.ext"
  "ernal_command\032!modules/common/proto/head"
  "er.proto\0328modules/common_msgs/external_c"
  "ommand_msgs/geometry.proto\"\233\002\n\020FreeSpace"
  "Command\022%\n\006header\030\001 \001(\0132\025.apollo.common."
  "Header\022\026\n\ncommand_id\030\002 \001(\003:\002-1\0228\n\021parkin"
  "g_spot_pose\030\003 \002(\0132\035.apollo.external_comm"
  "and.Pose\022=\n\020non_drivable_roi\030\004 \003(\0132#.apo"
  "llo.external_command.RoiPolygon\0229\n\014driva"
  "ble_roi\030\005 \002(\0132#.apollo.external_command."
  "RoiPolygon\022\024\n\014target_speed\030\006 \001(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2ffree_5fspace_5fcommand_2eproto_deps[2] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2fgeometry_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2ffree_5fspace_5fcommand_2eproto_sccs[1] = {
  &scc_info_FreeSpaceCommand_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2ffree_5fspace_5fcommand_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2ffree_5fspace_5fcommand_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2ffree_5fspace_5fcommand_2eproto = {
  false, false, descriptor_table_protodef_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2ffree_5fspace_5fcommand_2eproto, "modules/common_msgs/external_command_msgs/free_space_command.proto", 472,
  &descriptor_table_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2ffree_5fspace_5fcommand_2eproto_once, descriptor_table_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2ffree_5fspace_5fcommand_2eproto_sccs, descriptor_table_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2ffree_5fspace_5fcommand_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2ffree_5fspace_5fcommand_2eproto::offsets,
  file_level_metadata_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2ffree_5fspace_5fcommand_2eproto, 1, file_level_enum_descriptors_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2ffree_5fspace_5fcommand_2eproto, file_level_service_descriptors_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2ffree_5fspace_5fcommand_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2ffree_5fspace_5fcommand_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2ffree_5fspace_5fcommand_2eproto)), true);
namespace apollo {
namespace external_command {

// ===================================================================

class FreeSpaceCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<FreeSpaceCommand>()._has_bits_);
  static const ::apollo::common::Header& header(const FreeSpaceCommand* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_command_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::external_command::Pose& parking_spot_pose(const FreeSpaceCommand* msg);
  static void set_has_parking_spot_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::external_command::RoiPolygon& drivable_roi(const FreeSpaceCommand* msg);
  static void set_has_drivable_roi(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_target_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::apollo::common::Header&
FreeSpaceCommand::_Internal::header(const FreeSpaceCommand* msg) {
  return *msg->header_;
}
const ::apollo::external_command::Pose&
FreeSpaceCommand::_Internal::parking_spot_pose(const FreeSpaceCommand* msg) {
  return *msg->parking_spot_pose_;
}
const ::apollo::external_command::RoiPolygon&
FreeSpaceCommand::_Internal::drivable_roi(const FreeSpaceCommand* msg) {
  return *msg->drivable_roi_;
}
void FreeSpaceCommand::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void FreeSpaceCommand::clear_parking_spot_pose() {
  if (parking_spot_pose_ != nullptr) parking_spot_pose_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void FreeSpaceCommand::clear_non_drivable_roi() {
  non_drivable_roi_.Clear();
}
void FreeSpaceCommand::clear_drivable_roi() {
  if (drivable_roi_ != nullptr) drivable_roi_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
FreeSpaceCommand::FreeSpaceCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  non_drivable_roi_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.external_command.FreeSpaceCommand)
}
FreeSpaceCommand::FreeSpaceCommand(const FreeSpaceCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      non_drivable_roi_(from.non_drivable_roi_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_parking_spot_pose()) {
    parking_spot_pose_ = new ::apollo::external_command::Pose(*from.parking_spot_pose_);
  } else {
    parking_spot_pose_ = nullptr;
  }
  if (from._internal_has_drivable_roi()) {
    drivable_roi_ = new ::apollo::external_command::RoiPolygon(*from.drivable_roi_);
  } else {
    drivable_roi_ = nullptr;
  }
  ::memcpy(&target_speed_, &from.target_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_id_) -
    reinterpret_cast<char*>(&target_speed_)) + sizeof(command_id_));
  // @@protoc_insertion_point(copy_constructor:apollo.external_command.FreeSpaceCommand)
}

void FreeSpaceCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FreeSpaceCommand_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2ffree_5fspace_5fcommand_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&target_speed_) -
      reinterpret_cast<char*>(&header_)) + sizeof(target_speed_));
  command_id_ = PROTOBUF_LONGLONG(-1);
}

FreeSpaceCommand::~FreeSpaceCommand() {
  // @@protoc_insertion_point(destructor:apollo.external_command.FreeSpaceCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FreeSpaceCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete parking_spot_pose_;
  if (this != internal_default_instance()) delete drivable_roi_;
}

void FreeSpaceCommand::ArenaDtor(void* object) {
  FreeSpaceCommand* _this = reinterpret_cast< FreeSpaceCommand* >(object);
  (void)_this;
}
void FreeSpaceCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FreeSpaceCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FreeSpaceCommand& FreeSpaceCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FreeSpaceCommand_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2ffree_5fspace_5fcommand_2eproto.base);
  return *internal_default_instance();
}


void FreeSpaceCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.external_command.FreeSpaceCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  non_drivable_roi_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(parking_spot_pose_ != nullptr);
      parking_spot_pose_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(drivable_roi_ != nullptr);
      drivable_roi_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    target_speed_ = 0;
    command_id_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FreeSpaceCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 command_id = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_command_id(&has_bits);
          command_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .apollo.external_command.Pose parking_spot_pose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_parking_spot_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.external_command.RoiPolygon non_drivable_roi = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_non_drivable_roi(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // required .apollo.external_command.RoiPolygon drivable_roi = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_drivable_roi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double target_speed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_target_speed(&has_bits);
          target_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FreeSpaceCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.external_command.FreeSpaceCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional int64 command_id = 2 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_command_id(), target);
  }

  // required .apollo.external_command.Pose parking_spot_pose = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::parking_spot_pose(this), target, stream);
  }

  // repeated .apollo.external_command.RoiPolygon non_drivable_roi = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_non_drivable_roi_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_non_drivable_roi(i), target, stream);
  }

  // required .apollo.external_command.RoiPolygon drivable_roi = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::drivable_roi(this), target, stream);
  }

  // optional double target_speed = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_target_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.external_command.FreeSpaceCommand)
  return target;
}

size_t FreeSpaceCommand::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:apollo.external_command.FreeSpaceCommand)
  size_t total_size = 0;

  if (_internal_has_parking_spot_pose()) {
    // required .apollo.external_command.Pose parking_spot_pose = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parking_spot_pose_);
  }

  if (_internal_has_drivable_roi()) {
    // required .apollo.external_command.RoiPolygon drivable_roi = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *drivable_roi_);
  }

  return total_size;
}
size_t FreeSpaceCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.external_command.FreeSpaceCommand)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .apollo.external_command.Pose parking_spot_pose = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parking_spot_pose_);

    // required .apollo.external_command.RoiPolygon drivable_roi = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *drivable_roi_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.external_command.RoiPolygon non_drivable_roi = 4;
  total_size += 1UL * this->_internal_non_drivable_roi_size();
  for (const auto& msg : this->non_drivable_roi_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .apollo.common.Header header = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (cached_has_bits & 0x00000018u) {
    // optional double target_speed = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int64 command_id = 2 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_command_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FreeSpaceCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.external_command.FreeSpaceCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const FreeSpaceCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FreeSpaceCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.external_command.FreeSpaceCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.external_command.FreeSpaceCommand)
    MergeFrom(*source);
  }
}

void FreeSpaceCommand::MergeFrom(const FreeSpaceCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.external_command.FreeSpaceCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  non_drivable_roi_.MergeFrom(from.non_drivable_roi_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_parking_spot_pose()->::apollo::external_command::Pose::MergeFrom(from._internal_parking_spot_pose());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_drivable_roi()->::apollo::external_command::RoiPolygon::MergeFrom(from._internal_drivable_roi());
    }
    if (cached_has_bits & 0x00000008u) {
      target_speed_ = from.target_speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      command_id_ = from.command_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FreeSpaceCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.external_command.FreeSpaceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreeSpaceCommand::CopyFrom(const FreeSpaceCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.external_command.FreeSpaceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreeSpaceCommand::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(non_drivable_roi_)) return false;
  if (_internal_has_parking_spot_pose()) {
    if (!parking_spot_pose_->IsInitialized()) return false;
  }
  if (_internal_has_drivable_roi()) {
    if (!drivable_roi_->IsInitialized()) return false;
  }
  return true;
}

void FreeSpaceCommand::InternalSwap(FreeSpaceCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  non_drivable_roi_.InternalSwap(&other->non_drivable_roi_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FreeSpaceCommand, target_speed_)
      + sizeof(FreeSpaceCommand::target_speed_)
      - PROTOBUF_FIELD_OFFSET(FreeSpaceCommand, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
  swap(command_id_, other->command_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FreeSpaceCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace external_command
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::external_command::FreeSpaceCommand* Arena::CreateMaybeMessage< ::apollo::external_command::FreeSpaceCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::external_command::FreeSpaceCommand >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
