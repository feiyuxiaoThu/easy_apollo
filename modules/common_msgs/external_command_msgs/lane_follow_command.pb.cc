// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common_msgs/external_command_msgs/lane_follow_command.proto

#include "modules/common_msgs/external_command_msgs/lane_follow_command.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5fsegment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneSegment_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5fsegment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pose_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2fgeometry_2eproto;
namespace apollo {
namespace external_command {
class LaneFollowCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneFollowCommand> _instance;
} _LaneFollowCommand_default_instance_;
}  // namespace external_command
}  // namespace apollo
static void InitDefaultsscc_info_LaneFollowCommand_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::external_command::_LaneFollowCommand_default_instance_;
    new (ptr) ::apollo::external_command::LaneFollowCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LaneFollowCommand_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_LaneFollowCommand_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,
      &scc_info_Pose_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2fgeometry_2eproto.base,
      &scc_info_LaneSegment_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5fsegment_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::external_command::LaneFollowCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::external_command::LaneFollowCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::external_command::LaneFollowCommand, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::external_command::LaneFollowCommand, command_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::external_command::LaneFollowCommand, is_start_pose_set_),
  PROTOBUF_FIELD_OFFSET(::apollo::external_command::LaneFollowCommand, way_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::external_command::LaneFollowCommand, end_pose_),
  PROTOBUF_FIELD_OFFSET(::apollo::external_command::LaneFollowCommand, blacklisted_lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::external_command::LaneFollowCommand, blacklisted_road_),
  PROTOBUF_FIELD_OFFSET(::apollo::external_command::LaneFollowCommand, target_speed_),
  0,
  4,
  3,
  ~0u,
  1,
  ~0u,
  ~0u,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::apollo::external_command::LaneFollowCommand)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::external_command::_LaneFollowCommand_default_instance_),
};

const char descriptor_table_protodef_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nCmodules/common_msgs/external_command_m"
  "sgs/lane_follow_command.proto\022\027apollo.ex"
  "ternal_command\032!modules/common/proto/hea"
  "der.proto\0328modules/common_msgs/external_"
  "command_msgs/geometry.proto\032<modules/com"
  "mon_msgs/external_command_msgs/lane_segm"
  "ent.proto\"\307\002\n\021LaneFollowCommand\022%\n\006heade"
  "r\030\001 \001(\0132\025.apollo.common.Header\022\026\n\ncomman"
  "d_id\030\002 \001(\003:\002-1\022 \n\021is_start_pose_set\030\003 \001("
  "\010:\005false\0220\n\tway_point\030\004 \003(\0132\035.apollo.ext"
  "ernal_command.Pose\022/\n\010end_pose\030\005 \002(\0132\035.a"
  "pollo.external_command.Pose\022>\n\020blacklist"
  "ed_lane\030\006 \003(\0132$.apollo.external_command."
  "LaneSegment\022\030\n\020blacklisted_road\030\007 \003(\t\022\024\n"
  "\014target_speed\030\010 \001(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto_deps[3] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5fsegment_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto_sccs[1] = {
  &scc_info_LaneFollowCommand_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto = {
  false, false, descriptor_table_protodef_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto, "modules/common_msgs/external_command_msgs/lane_follow_command.proto", 579,
  &descriptor_table_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto_once, descriptor_table_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto_sccs, descriptor_table_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto::offsets,
  file_level_metadata_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto, 1, file_level_enum_descriptors_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto, file_level_service_descriptors_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto)), true);
namespace apollo {
namespace external_command {

// ===================================================================

class LaneFollowCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneFollowCommand>()._has_bits_);
  static const ::apollo::common::Header& header(const LaneFollowCommand* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_command_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_start_pose_set(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::external_command::Pose& end_pose(const LaneFollowCommand* msg);
  static void set_has_end_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::apollo::common::Header&
LaneFollowCommand::_Internal::header(const LaneFollowCommand* msg) {
  return *msg->header_;
}
const ::apollo::external_command::Pose&
LaneFollowCommand::_Internal::end_pose(const LaneFollowCommand* msg) {
  return *msg->end_pose_;
}
void LaneFollowCommand::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void LaneFollowCommand::clear_way_point() {
  way_point_.Clear();
}
void LaneFollowCommand::clear_end_pose() {
  if (end_pose_ != nullptr) end_pose_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void LaneFollowCommand::clear_blacklisted_lane() {
  blacklisted_lane_.Clear();
}
LaneFollowCommand::LaneFollowCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  way_point_(arena),
  blacklisted_lane_(arena),
  blacklisted_road_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.external_command.LaneFollowCommand)
}
LaneFollowCommand::LaneFollowCommand(const LaneFollowCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      way_point_(from.way_point_),
      blacklisted_lane_(from.blacklisted_lane_),
      blacklisted_road_(from.blacklisted_road_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_end_pose()) {
    end_pose_ = new ::apollo::external_command::Pose(*from.end_pose_);
  } else {
    end_pose_ = nullptr;
  }
  ::memcpy(&target_speed_, &from.target_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_id_) -
    reinterpret_cast<char*>(&target_speed_)) + sizeof(command_id_));
  // @@protoc_insertion_point(copy_constructor:apollo.external_command.LaneFollowCommand)
}

void LaneFollowCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneFollowCommand_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_start_pose_set_) -
      reinterpret_cast<char*>(&header_)) + sizeof(is_start_pose_set_));
  command_id_ = PROTOBUF_LONGLONG(-1);
}

LaneFollowCommand::~LaneFollowCommand() {
  // @@protoc_insertion_point(destructor:apollo.external_command.LaneFollowCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LaneFollowCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete end_pose_;
}

void LaneFollowCommand::ArenaDtor(void* object) {
  LaneFollowCommand* _this = reinterpret_cast< LaneFollowCommand* >(object);
  (void)_this;
}
void LaneFollowCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneFollowCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneFollowCommand& LaneFollowCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneFollowCommand_modules_2fcommon_5fmsgs_2fexternal_5fcommand_5fmsgs_2flane_5ffollow_5fcommand_2eproto.base);
  return *internal_default_instance();
}


void LaneFollowCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.external_command.LaneFollowCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  way_point_.Clear();
  blacklisted_lane_.Clear();
  blacklisted_road_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(end_pose_ != nullptr);
      end_pose_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&target_speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_start_pose_set_) -
        reinterpret_cast<char*>(&target_speed_)) + sizeof(is_start_pose_set_));
    command_id_ = PROTOBUF_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneFollowCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 command_id = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_command_id(&has_bits);
          command_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_start_pose_set = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_start_pose_set(&has_bits);
          is_start_pose_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.external_command.Pose way_point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_way_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // required .apollo.external_command.Pose end_pose = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.external_command.LaneSegment blacklisted_lane = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blacklisted_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string blacklisted_road = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blacklisted_road();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.external_command.LaneFollowCommand.blacklisted_road");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double target_speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_target_speed(&has_bits);
          target_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneFollowCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.external_command.LaneFollowCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional int64 command_id = 2 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_command_id(), target);
  }

  // optional bool is_start_pose_set = 3 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_start_pose_set(), target);
  }

  // repeated .apollo.external_command.Pose way_point = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_way_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_way_point(i), target, stream);
  }

  // required .apollo.external_command.Pose end_pose = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::end_pose(this), target, stream);
  }

  // repeated .apollo.external_command.LaneSegment blacklisted_lane = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blacklisted_lane_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_blacklisted_lane(i), target, stream);
  }

  // repeated string blacklisted_road = 7;
  for (int i = 0, n = this->_internal_blacklisted_road_size(); i < n; i++) {
    const auto& s = this->_internal_blacklisted_road(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.external_command.LaneFollowCommand.blacklisted_road");
    target = stream->WriteString(7, s, target);
  }

  // optional double target_speed = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_target_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.external_command.LaneFollowCommand)
  return target;
}

size_t LaneFollowCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.external_command.LaneFollowCommand)
  size_t total_size = 0;

  // required .apollo.external_command.Pose end_pose = 5;
  if (_internal_has_end_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_pose_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.external_command.Pose way_point = 4;
  total_size += 1UL * this->_internal_way_point_size();
  for (const auto& msg : this->way_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.external_command.LaneSegment blacklisted_lane = 6;
  total_size += 1UL * this->_internal_blacklisted_lane_size();
  for (const auto& msg : this->blacklisted_lane_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string blacklisted_road = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(blacklisted_road_.size());
  for (int i = 0, n = blacklisted_road_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      blacklisted_road_.Get(i));
  }

  // optional .apollo.common.Header header = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional double target_speed = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional bool is_start_pose_set = 3 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int64 command_id = 2 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_command_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneFollowCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.external_command.LaneFollowCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneFollowCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneFollowCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.external_command.LaneFollowCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.external_command.LaneFollowCommand)
    MergeFrom(*source);
  }
}

void LaneFollowCommand::MergeFrom(const LaneFollowCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.external_command.LaneFollowCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  way_point_.MergeFrom(from.way_point_);
  blacklisted_lane_.MergeFrom(from.blacklisted_lane_);
  blacklisted_road_.MergeFrom(from.blacklisted_road_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_end_pose()->::apollo::external_command::Pose::MergeFrom(from._internal_end_pose());
    }
    if (cached_has_bits & 0x00000004u) {
      target_speed_ = from.target_speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_start_pose_set_ = from.is_start_pose_set_;
    }
    if (cached_has_bits & 0x00000010u) {
      command_id_ = from.command_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneFollowCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.external_command.LaneFollowCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneFollowCommand::CopyFrom(const LaneFollowCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.external_command.LaneFollowCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneFollowCommand::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(way_point_)) return false;
  if (_internal_has_end_pose()) {
    if (!end_pose_->IsInitialized()) return false;
  }
  return true;
}

void LaneFollowCommand::InternalSwap(LaneFollowCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  way_point_.InternalSwap(&other->way_point_);
  blacklisted_lane_.InternalSwap(&other->blacklisted_lane_);
  blacklisted_road_.InternalSwap(&other->blacklisted_road_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneFollowCommand, is_start_pose_set_)
      + sizeof(LaneFollowCommand::is_start_pose_set_)
      - PROTOBUF_FIELD_OFFSET(LaneFollowCommand, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
  swap(command_id_, other->command_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneFollowCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace external_command
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::external_command::LaneFollowCommand* Arena::CreateMaybeMessage< ::apollo::external_command::LaneFollowCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::external_command::LaneFollowCommand >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
