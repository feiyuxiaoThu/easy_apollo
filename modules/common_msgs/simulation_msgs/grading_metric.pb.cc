// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common_msgs/simulation_msgs/grading_metric.proto

#include "modules/common_msgs/simulation_msgs/grading_metric.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<29> scc_info_CheckpointCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Metric_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto;
namespace apollo {
namespace simulation {
class GradingConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GradingConfig> _instance;
} _GradingConfig_default_instance_;
class MetricDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Metric> _instance;
} _Metric_default_instance_;
}  // namespace simulation
}  // namespace apollo
static void InitDefaultsscc_info_GradingConfig_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_GradingConfig_default_instance_;
    new (ptr) ::apollo::simulation::GradingConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GradingConfig_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GradingConfig_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto}, {
      &scc_info_Metric_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto.base,}};

static void InitDefaultsscc_info_Metric_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_Metric_default_instance_;
    new (ptr) ::apollo::simulation::Metric();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Metric_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Metric_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto}, {
      &scc_info_CheckpointCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::GradingConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::GradingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::GradingConfig, metric_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::GradingConfig, use_score_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::GradingConfig, use_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::GradingConfig, compute_time_metric_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::GradingConfig, compute_time_as_first_true_),
  ~0u,
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::Metric, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::Metric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::Metric, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::Metric, description_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::Metric, condition_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::Metric, is_critical_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::Metric, require_all_time_pass_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::Metric, once_pass_stay_pass_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::Metric, get_deduction_score_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::apollo::simulation::GradingConfig)},
  { 15, 27, sizeof(::apollo::simulation::Metric)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_GradingConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_Metric_default_instance_),
};

const char descriptor_table_protodef_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n8modules/common_msgs/simulation_msgs/gr"
  "ading_metric.proto\022\021apollo.simulation\032;m"
  "odules/common_msgs/simulation_msgs/gradi"
  "ng_condition.proto\"\303\001\n\rGradingConfig\022)\n\006"
  "metric\030\001 \003(\0132\031.apollo.simulation.Metric\022"
  "\030\n\tuse_score\030\002 \001(\010:\005false\022\027\n\010use_time\030\003 "
  "\001(\010:\005false\022*\n\030compute_time_metric_name\030\004"
  " \001(\t:\010ReachEnd\022(\n\032compute_time_as_first_"
  "true\030\005 \001(\010:\004true\"\342\001\n\006Metric\022\014\n\004name\030\001 \001("
  "\t\022\023\n\013description\030\002 \001(\t\022/\n\tcondition\030\003 \001("
  "\0132\034.apollo.simulation.Condition\022\031\n\013is_cr"
  "itical\030\004 \001(\010:\004true\022#\n\025require_all_time_p"
  "ass\030\005 \001(\010:\004true\022!\n\023once_pass_stay_pass\030\006"
  " \001(\010:\004true\022!\n\023get_deduction_score\030\007 \001(\010:"
  "\004true"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto_sccs[2] = {
  &scc_info_GradingConfig_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto.base,
  &scc_info_Metric_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto = {
  false, false, descriptor_table_protodef_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto, "modules/common_msgs/simulation_msgs/grading_metric.proto", 565,
  &descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto_once, descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto_sccs, descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto::offsets,
  file_level_metadata_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto, 2, file_level_enum_descriptors_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto, file_level_service_descriptors_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto)), true);
namespace apollo {
namespace simulation {

// ===================================================================

class GradingConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<GradingConfig>()._has_bits_);
  static void set_has_use_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_use_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_compute_time_metric_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_compute_time_as_first_true(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString GradingConfig::_i_give_permission_to_break_this_code_default_compute_time_metric_name_{{{"ReachEnd", 8}}, {nullptr}};
GradingConfig::GradingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metric_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.GradingConfig)
}
GradingConfig::GradingConfig(const GradingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metric_(from.metric_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  compute_time_metric_name_.UnsafeSetDefault(nullptr);
  if (from._internal_has_compute_time_metric_name()) {
    compute_time_metric_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_compute_time_metric_name(), 
      GetArena());
  }
  ::memcpy(&use_score_, &from.use_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&compute_time_as_first_true_) -
    reinterpret_cast<char*>(&use_score_)) + sizeof(compute_time_as_first_true_));
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.GradingConfig)
}

void GradingConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GradingConfig_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto.base);
  compute_time_metric_name_.UnsafeSetDefault(nullptr);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&use_score_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&use_time_) -
      reinterpret_cast<char*>(&use_score_)) + sizeof(use_time_));
  compute_time_as_first_true_ = true;
}

GradingConfig::~GradingConfig() {
  // @@protoc_insertion_point(destructor:apollo.simulation.GradingConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GradingConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  compute_time_metric_name_.DestroyNoArena(nullptr);
}

void GradingConfig::ArenaDtor(void* object) {
  GradingConfig* _this = reinterpret_cast< GradingConfig* >(object);
  (void)_this;
}
void GradingConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GradingConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GradingConfig& GradingConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GradingConfig_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto.base);
  return *internal_default_instance();
}


void GradingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.GradingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metric_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    compute_time_metric_name_.ClearToDefault(::apollo::simulation::GradingConfig::_i_give_permission_to_break_this_code_default_compute_time_metric_name_, GetArena());
     }
  ::memset(&use_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_time_) -
      reinterpret_cast<char*>(&use_score_)) + sizeof(use_time_));
  compute_time_as_first_true_ = true;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GradingConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.simulation.Metric metric = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metric(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool use_score = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_use_score(&has_bits);
          use_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_time = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_use_time(&has_bits);
          use_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string compute_time_metric_name = 4 [default = "ReachEnd"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_compute_time_metric_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.simulation.GradingConfig.compute_time_metric_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool compute_time_as_first_true = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_compute_time_as_first_true(&has_bits);
          compute_time_as_first_true_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GradingConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.GradingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.simulation.Metric metric = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metric_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_metric(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool use_score = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_use_score(), target);
  }

  // optional bool use_time = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_use_time(), target);
  }

  // optional string compute_time_metric_name = 4 [default = "ReachEnd"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_compute_time_metric_name().data(), static_cast<int>(this->_internal_compute_time_metric_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.simulation.GradingConfig.compute_time_metric_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_compute_time_metric_name(), target);
  }

  // optional bool compute_time_as_first_true = 5 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_compute_time_as_first_true(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.GradingConfig)
  return target;
}

size_t GradingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.GradingConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.simulation.Metric metric = 1;
  total_size += 1UL * this->_internal_metric_size();
  for (const auto& msg : this->metric_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string compute_time_metric_name = 4 [default = "ReachEnd"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_compute_time_metric_name());
    }

    // optional bool use_score = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool use_time = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool compute_time_as_first_true = 5 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GradingConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.GradingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const GradingConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GradingConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.GradingConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.GradingConfig)
    MergeFrom(*source);
  }
}

void GradingConfig::MergeFrom(const GradingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.GradingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metric_.MergeFrom(from.metric_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_compute_time_metric_name(from._internal_compute_time_metric_name());
    }
    if (cached_has_bits & 0x00000002u) {
      use_score_ = from.use_score_;
    }
    if (cached_has_bits & 0x00000004u) {
      use_time_ = from.use_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      compute_time_as_first_true_ = from.compute_time_as_first_true_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GradingConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.GradingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GradingConfig::CopyFrom(const GradingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.GradingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GradingConfig::IsInitialized() const {
  return true;
}

void GradingConfig::InternalSwap(GradingConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metric_.InternalSwap(&other->metric_);
  compute_time_metric_name_.Swap(&other->compute_time_metric_name_, nullptr, GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GradingConfig, use_time_)
      + sizeof(GradingConfig::use_time_)
      - PROTOBUF_FIELD_OFFSET(GradingConfig, use_score_)>(
          reinterpret_cast<char*>(&use_score_),
          reinterpret_cast<char*>(&other->use_score_));
  swap(compute_time_as_first_true_, other->compute_time_as_first_true_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GradingConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Metric::_Internal {
 public:
  using HasBits = decltype(std::declval<Metric>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::simulation::Condition& condition(const Metric* msg);
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_critical(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_require_all_time_pass(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_once_pass_stay_pass(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_get_deduction_score(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::apollo::simulation::Condition&
Metric::_Internal::condition(const Metric* msg) {
  return *msg->condition_;
}
void Metric::clear_condition() {
  if (condition_ != nullptr) condition_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
Metric::Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.Metric)
}
Metric::Metric(const Metric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  if (from._internal_has_condition()) {
    condition_ = new ::apollo::simulation::Condition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  ::memcpy(&is_critical_, &from.is_critical_,
    static_cast<size_t>(reinterpret_cast<char*>(&get_deduction_score_) -
    reinterpret_cast<char*>(&is_critical_)) + sizeof(get_deduction_score_));
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.Metric)
}

void Metric::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Metric_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  condition_ = nullptr;
  is_critical_ = true;
  require_all_time_pass_ = true;
  once_pass_stay_pass_ = true;
  get_deduction_score_ = true;
}

Metric::~Metric() {
  // @@protoc_insertion_point(destructor:apollo.simulation.Metric)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Metric::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete condition_;
}

void Metric::ArenaDtor(void* object) {
  Metric* _this = reinterpret_cast< Metric* >(object);
  (void)_this;
}
void Metric::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Metric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Metric& Metric::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Metric_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto.base);
  return *internal_default_instance();
}


void Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.Metric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(condition_ != nullptr);
      condition_->Clear();
    }
    is_critical_ = true;
    require_all_time_pass_ = true;
    once_pass_stay_pass_ = true;
    get_deduction_score_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.simulation.Metric.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.simulation.Metric.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.simulation.Condition condition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_critical = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_critical(&has_bits);
          is_critical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool require_all_time_pass = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_require_all_time_pass(&has_bits);
          require_all_time_pass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool once_pass_stay_pass = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_once_pass_stay_pass(&has_bits);
          once_pass_stay_pass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool get_deduction_score = 7 [default = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_get_deduction_score(&has_bits);
          get_deduction_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Metric::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.Metric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.simulation.Metric.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.simulation.Metric.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // optional .apollo.simulation.Condition condition = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::condition(this), target, stream);
  }

  // optional bool is_critical = 4 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_critical(), target);
  }

  // optional bool require_all_time_pass = 5 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_require_all_time_pass(), target);
  }

  // optional bool once_pass_stay_pass = 6 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_once_pass_stay_pass(), target);
  }

  // optional bool get_deduction_score = 7 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_get_deduction_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.Metric)
  return target;
}

size_t Metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.Metric)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string description = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional .apollo.simulation.Condition condition = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_);
    }

    // optional bool is_critical = 4 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool require_all_time_pass = 5 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool once_pass_stay_pass = 6 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool get_deduction_score = 7 [default = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Metric::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.Metric)
  GOOGLE_DCHECK_NE(&from, this);
  const Metric* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Metric>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.Metric)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.Metric)
    MergeFrom(*source);
  }
}

void Metric::MergeFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.Metric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_condition()->::apollo::simulation::Condition::MergeFrom(from._internal_condition());
    }
    if (cached_has_bits & 0x00000008u) {
      is_critical_ = from.is_critical_;
    }
    if (cached_has_bits & 0x00000010u) {
      require_all_time_pass_ = from.require_all_time_pass_;
    }
    if (cached_has_bits & 0x00000020u) {
      once_pass_stay_pass_ = from.once_pass_stay_pass_;
    }
    if (cached_has_bits & 0x00000040u) {
      get_deduction_score_ = from.get_deduction_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Metric::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metric::CopyFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metric::IsInitialized() const {
  return true;
}

void Metric::InternalSwap(Metric* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(condition_, other->condition_);
  swap(is_critical_, other->is_critical_);
  swap(require_all_time_pass_, other->require_all_time_pass_);
  swap(once_pass_stay_pass_, other->once_pass_stay_pass_);
  swap(get_deduction_score_, other->get_deduction_score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Metric::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace simulation
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::simulation::GradingConfig* Arena::CreateMaybeMessage< ::apollo::simulation::GradingConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::GradingConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::Metric* Arena::CreateMaybeMessage< ::apollo::simulation::Metric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::Metric >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
