// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common_msgs/simulation_msgs/scenario.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common_msgs/simulation_msgs/agent.pb.h"
#include "modules/common_msgs/simulation_msgs/grading_metric.pb.h"
#include "modules/perception/proto/traffic_light_detection.pb.h"
#include "modules/planning/proto/pad_msg.pb.h"
#include "modules/routing/proto/routing.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto;
namespace apollo {
namespace simulation {
class DriveActionConfig;
class DriveActionConfigDefaultTypeInternal;
extern DriveActionConfigDefaultTypeInternal _DriveActionConfig_default_instance_;
class FuzzingConfig;
class FuzzingConfigDefaultTypeInternal;
extern FuzzingConfigDefaultTypeInternal _FuzzingConfig_default_instance_;
class Scenario;
class ScenarioDefaultTypeInternal;
extern ScenarioDefaultTypeInternal _Scenario_default_instance_;
class Scenario_Point;
class Scenario_PointDefaultTypeInternal;
extern Scenario_PointDefaultTypeInternal _Scenario_Point_default_instance_;
class Scenario_TL;
class Scenario_TLDefaultTypeInternal;
extern Scenario_TLDefaultTypeInternal _Scenario_TL_default_instance_;
class Scenario_TL_Location;
class Scenario_TL_LocationDefaultTypeInternal;
extern Scenario_TL_LocationDefaultTypeInternal _Scenario_TL_Location_default_instance_;
class Scenario_TL_State;
class Scenario_TL_StateDefaultTypeInternal;
extern Scenario_TL_StateDefaultTypeInternal _Scenario_TL_State_default_instance_;
}  // namespace simulation
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::simulation::DriveActionConfig* Arena::CreateMaybeMessage<::apollo::simulation::DriveActionConfig>(Arena*);
template<> ::apollo::simulation::FuzzingConfig* Arena::CreateMaybeMessage<::apollo::simulation::FuzzingConfig>(Arena*);
template<> ::apollo::simulation::Scenario* Arena::CreateMaybeMessage<::apollo::simulation::Scenario>(Arena*);
template<> ::apollo::simulation::Scenario_Point* Arena::CreateMaybeMessage<::apollo::simulation::Scenario_Point>(Arena*);
template<> ::apollo::simulation::Scenario_TL* Arena::CreateMaybeMessage<::apollo::simulation::Scenario_TL>(Arena*);
template<> ::apollo::simulation::Scenario_TL_Location* Arena::CreateMaybeMessage<::apollo::simulation::Scenario_TL_Location>(Arena*);
template<> ::apollo::simulation::Scenario_TL_State* Arena::CreateMaybeMessage<::apollo::simulation::Scenario_TL_State>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace simulation {

enum Scenario_TL_TriggerType : int {
  Scenario_TL_TriggerType_NA = 0,
  Scenario_TL_TriggerType_DISTANCE = 1,
  Scenario_TL_TriggerType_TIME = 2
};
bool Scenario_TL_TriggerType_IsValid(int value);
constexpr Scenario_TL_TriggerType Scenario_TL_TriggerType_TriggerType_MIN = Scenario_TL_TriggerType_NA;
constexpr Scenario_TL_TriggerType Scenario_TL_TriggerType_TriggerType_MAX = Scenario_TL_TriggerType_TIME;
constexpr int Scenario_TL_TriggerType_TriggerType_ARRAYSIZE = Scenario_TL_TriggerType_TriggerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scenario_TL_TriggerType_descriptor();
template<typename T>
inline const std::string& Scenario_TL_TriggerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scenario_TL_TriggerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scenario_TL_TriggerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scenario_TL_TriggerType_descriptor(), enum_t_value);
}
inline bool Scenario_TL_TriggerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Scenario_TL_TriggerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scenario_TL_TriggerType>(
    Scenario_TL_TriggerType_descriptor(), name, value);
}
enum Scenario_DefaultLightBehavior : int {
  Scenario_DefaultLightBehavior_ALWAYS_GREEN = 0,
  Scenario_DefaultLightBehavior_CYCLICAL = 1
};
bool Scenario_DefaultLightBehavior_IsValid(int value);
constexpr Scenario_DefaultLightBehavior Scenario_DefaultLightBehavior_DefaultLightBehavior_MIN = Scenario_DefaultLightBehavior_ALWAYS_GREEN;
constexpr Scenario_DefaultLightBehavior Scenario_DefaultLightBehavior_DefaultLightBehavior_MAX = Scenario_DefaultLightBehavior_CYCLICAL;
constexpr int Scenario_DefaultLightBehavior_DefaultLightBehavior_ARRAYSIZE = Scenario_DefaultLightBehavior_DefaultLightBehavior_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scenario_DefaultLightBehavior_descriptor();
template<typename T>
inline const std::string& Scenario_DefaultLightBehavior_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scenario_DefaultLightBehavior>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scenario_DefaultLightBehavior_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scenario_DefaultLightBehavior_descriptor(), enum_t_value);
}
inline bool Scenario_DefaultLightBehavior_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Scenario_DefaultLightBehavior* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scenario_DefaultLightBehavior>(
    Scenario_DefaultLightBehavior_descriptor(), name, value);
}
enum Scenario_Mode : int {
  Scenario_Mode_WORLDSIM = 0,
  Scenario_Mode_LOGSIM = 1,
  Scenario_Mode_LOGSIM_CONTROL = 2,
  Scenario_Mode_LOGSIM_PERCEPTION = 3
};
bool Scenario_Mode_IsValid(int value);
constexpr Scenario_Mode Scenario_Mode_Mode_MIN = Scenario_Mode_WORLDSIM;
constexpr Scenario_Mode Scenario_Mode_Mode_MAX = Scenario_Mode_LOGSIM_PERCEPTION;
constexpr int Scenario_Mode_Mode_ARRAYSIZE = Scenario_Mode_Mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scenario_Mode_descriptor();
template<typename T>
inline const std::string& Scenario_Mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scenario_Mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scenario_Mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scenario_Mode_descriptor(), enum_t_value);
}
inline bool Scenario_Mode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Scenario_Mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scenario_Mode>(
    Scenario_Mode_descriptor(), name, value);
}
// ===================================================================

class FuzzingConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.simulation.FuzzingConfig) */ {
 public:
  inline FuzzingConfig() : FuzzingConfig(nullptr) {}
  virtual ~FuzzingConfig();

  FuzzingConfig(const FuzzingConfig& from);
  FuzzingConfig(FuzzingConfig&& from) noexcept
    : FuzzingConfig() {
    *this = ::std::move(from);
  }

  inline FuzzingConfig& operator=(const FuzzingConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FuzzingConfig& operator=(FuzzingConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FuzzingConfig& default_instance();

  static inline const FuzzingConfig* internal_default_instance() {
    return reinterpret_cast<const FuzzingConfig*>(
               &_FuzzingConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FuzzingConfig& a, FuzzingConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FuzzingConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FuzzingConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FuzzingConfig* New() const final {
    return CreateMaybeMessage<FuzzingConfig>(nullptr);
  }

  FuzzingConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FuzzingConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FuzzingConfig& from);
  void MergeFrom(const FuzzingConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuzzingConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.simulation.FuzzingConfig";
  }
  protected:
  explicit FuzzingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto);
    return ::descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.simulation.FuzzingConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto;
};
// -------------------------------------------------------------------

class DriveActionConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.simulation.DriveActionConfig) */ {
 public:
  inline DriveActionConfig() : DriveActionConfig(nullptr) {}
  virtual ~DriveActionConfig();

  DriveActionConfig(const DriveActionConfig& from);
  DriveActionConfig(DriveActionConfig&& from) noexcept
    : DriveActionConfig() {
    *this = ::std::move(from);
  }

  inline DriveActionConfig& operator=(const DriveActionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DriveActionConfig& operator=(DriveActionConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DriveActionConfig& default_instance();

  static inline const DriveActionConfig* internal_default_instance() {
    return reinterpret_cast<const DriveActionConfig*>(
               &_DriveActionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DriveActionConfig& a, DriveActionConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DriveActionConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DriveActionConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DriveActionConfig* New() const final {
    return CreateMaybeMessage<DriveActionConfig>(nullptr);
  }

  DriveActionConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DriveActionConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DriveActionConfig& from);
  void MergeFrom(const DriveActionConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DriveActionConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.simulation.DriveActionConfig";
  }
  protected:
  explicit DriveActionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto);
    return ::descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTriggerTimeFieldNumber = 2,
    kDriveActionFieldNumber = 1,
  };
  // optional double trigger_time = 2 [default = 0];
  bool has_trigger_time() const;
  private:
  bool _internal_has_trigger_time() const;
  public:
  void clear_trigger_time();
  double trigger_time() const;
  void set_trigger_time(double value);
  private:
  double _internal_trigger_time() const;
  void _internal_set_trigger_time(double value);
  public:

  // optional .apollo.planning.DrivingAction drive_action = 1 [default = NONE];
  bool has_drive_action() const;
  private:
  bool _internal_has_drive_action() const;
  public:
  void clear_drive_action();
  ::apollo::planning::DrivingAction drive_action() const;
  void set_drive_action(::apollo::planning::DrivingAction value);
  private:
  ::apollo::planning::DrivingAction _internal_drive_action() const;
  void _internal_set_drive_action(::apollo::planning::DrivingAction value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.simulation.DriveActionConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double trigger_time_;
  int drive_action_;
  friend struct ::TableStruct_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto;
};
// -------------------------------------------------------------------

class Scenario_Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.simulation.Scenario.Point) */ {
 public:
  inline Scenario_Point() : Scenario_Point(nullptr) {}
  virtual ~Scenario_Point();

  Scenario_Point(const Scenario_Point& from);
  Scenario_Point(Scenario_Point&& from) noexcept
    : Scenario_Point() {
    *this = ::std::move(from);
  }

  inline Scenario_Point& operator=(const Scenario_Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scenario_Point& operator=(Scenario_Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scenario_Point& default_instance();

  static inline const Scenario_Point* internal_default_instance() {
    return reinterpret_cast<const Scenario_Point*>(
               &_Scenario_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Scenario_Point& a, Scenario_Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Scenario_Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scenario_Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scenario_Point* New() const final {
    return CreateMaybeMessage<Scenario_Point>(nullptr);
  }

  Scenario_Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scenario_Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scenario_Point& from);
  void MergeFrom(const Scenario_Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scenario_Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.simulation.Scenario.Point";
  }
  protected:
  explicit Scenario_Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto);
    return ::descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kHeadingFieldNumber = 3,
  };
  // optional double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double heading = 3;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.simulation.Scenario.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double heading_;
  friend struct ::TableStruct_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto;
};
// -------------------------------------------------------------------

class Scenario_TL_Location PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.simulation.Scenario.TL.Location) */ {
 public:
  inline Scenario_TL_Location() : Scenario_TL_Location(nullptr) {}
  virtual ~Scenario_TL_Location();

  Scenario_TL_Location(const Scenario_TL_Location& from);
  Scenario_TL_Location(Scenario_TL_Location&& from) noexcept
    : Scenario_TL_Location() {
    *this = ::std::move(from);
  }

  inline Scenario_TL_Location& operator=(const Scenario_TL_Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scenario_TL_Location& operator=(Scenario_TL_Location&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scenario_TL_Location& default_instance();

  static inline const Scenario_TL_Location* internal_default_instance() {
    return reinterpret_cast<const Scenario_TL_Location*>(
               &_Scenario_TL_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Scenario_TL_Location& a, Scenario_TL_Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Scenario_TL_Location* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scenario_TL_Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scenario_TL_Location* New() const final {
    return CreateMaybeMessage<Scenario_TL_Location>(nullptr);
  }

  Scenario_TL_Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scenario_TL_Location>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scenario_TL_Location& from);
  void MergeFrom(const Scenario_TL_Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scenario_TL_Location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.simulation.Scenario.TL.Location";
  }
  protected:
  explicit Scenario_TL_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto);
    return ::descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.simulation.Scenario.TL.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double z_;
  friend struct ::TableStruct_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto;
};
// -------------------------------------------------------------------

class Scenario_TL_State PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.simulation.Scenario.TL.State) */ {
 public:
  inline Scenario_TL_State() : Scenario_TL_State(nullptr) {}
  virtual ~Scenario_TL_State();

  Scenario_TL_State(const Scenario_TL_State& from);
  Scenario_TL_State(Scenario_TL_State&& from) noexcept
    : Scenario_TL_State() {
    *this = ::std::move(from);
  }

  inline Scenario_TL_State& operator=(const Scenario_TL_State& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scenario_TL_State& operator=(Scenario_TL_State&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scenario_TL_State& default_instance();

  static inline const Scenario_TL_State* internal_default_instance() {
    return reinterpret_cast<const Scenario_TL_State*>(
               &_Scenario_TL_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Scenario_TL_State& a, Scenario_TL_State& b) {
    a.Swap(&b);
  }
  inline void Swap(Scenario_TL_State* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scenario_TL_State* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scenario_TL_State* New() const final {
    return CreateMaybeMessage<Scenario_TL_State>(nullptr);
  }

  Scenario_TL_State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scenario_TL_State>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scenario_TL_State& from);
  void MergeFrom(const Scenario_TL_State& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scenario_TL_State* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.simulation.Scenario.TL.State";
  }
  protected:
  explicit Scenario_TL_State(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto);
    return ::descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlinkFieldNumber = 2,
    kColorFieldNumber = 1,
    kKeepTimeFieldNumber = 3,
  };
  // optional bool blink = 2 [default = false];
  bool has_blink() const;
  private:
  bool _internal_has_blink() const;
  public:
  void clear_blink();
  bool blink() const;
  void set_blink(bool value);
  private:
  bool _internal_blink() const;
  void _internal_set_blink(bool value);
  public:

  // optional .apollo.perception.TrafficLight.Color color = 1 [default = GREEN];
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  ::apollo::perception::TrafficLight_Color color() const;
  void set_color(::apollo::perception::TrafficLight_Color value);
  private:
  ::apollo::perception::TrafficLight_Color _internal_color() const;
  void _internal_set_color(::apollo::perception::TrafficLight_Color value);
  public:

  // optional double keep_time = 3 [default = 10];
  bool has_keep_time() const;
  private:
  bool _internal_has_keep_time() const;
  public:
  void clear_keep_time();
  double keep_time() const;
  void set_keep_time(double value);
  private:
  double _internal_keep_time() const;
  void _internal_set_keep_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.simulation.Scenario.TL.State)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool blink_;
  int color_;
  double keep_time_;
  friend struct ::TableStruct_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto;
};
// -------------------------------------------------------------------

class Scenario_TL PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.simulation.Scenario.TL) */ {
 public:
  inline Scenario_TL() : Scenario_TL(nullptr) {}
  virtual ~Scenario_TL();

  Scenario_TL(const Scenario_TL& from);
  Scenario_TL(Scenario_TL&& from) noexcept
    : Scenario_TL() {
    *this = ::std::move(from);
  }

  inline Scenario_TL& operator=(const Scenario_TL& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scenario_TL& operator=(Scenario_TL&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scenario_TL& default_instance();

  static inline const Scenario_TL* internal_default_instance() {
    return reinterpret_cast<const Scenario_TL*>(
               &_Scenario_TL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Scenario_TL& a, Scenario_TL& b) {
    a.Swap(&b);
  }
  inline void Swap(Scenario_TL* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scenario_TL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scenario_TL* New() const final {
    return CreateMaybeMessage<Scenario_TL>(nullptr);
  }

  Scenario_TL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scenario_TL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scenario_TL& from);
  void MergeFrom(const Scenario_TL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scenario_TL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.simulation.Scenario.TL";
  }
  protected:
  explicit Scenario_TL(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto);
    return ::descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Scenario_TL_Location Location;
  typedef Scenario_TL_State State;

  typedef Scenario_TL_TriggerType TriggerType;
  static constexpr TriggerType NA =
    Scenario_TL_TriggerType_NA;
  static constexpr TriggerType DISTANCE =
    Scenario_TL_TriggerType_DISTANCE;
  static constexpr TriggerType TIME =
    Scenario_TL_TriggerType_TIME;
  static inline bool TriggerType_IsValid(int value) {
    return Scenario_TL_TriggerType_IsValid(value);
  }
  static constexpr TriggerType TriggerType_MIN =
    Scenario_TL_TriggerType_TriggerType_MIN;
  static constexpr TriggerType TriggerType_MAX =
    Scenario_TL_TriggerType_TriggerType_MAX;
  static constexpr int TriggerType_ARRAYSIZE =
    Scenario_TL_TriggerType_TriggerType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TriggerType_descriptor() {
    return Scenario_TL_TriggerType_descriptor();
  }
  template<typename T>
  static inline const std::string& TriggerType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TriggerType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TriggerType_Name.");
    return Scenario_TL_TriggerType_Name(enum_t_value);
  }
  static inline bool TriggerType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TriggerType* value) {
    return Scenario_TL_TriggerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStateGroupFieldNumber = 6,
    kIdFieldNumber = 1,
    kLocationFieldNumber = 2,
    kInitialStateFieldNumber = 5,
    kTriggerTypeFieldNumber = 3,
    kTriggerValueFieldNumber = 4,
  };
  // repeated .apollo.simulation.Scenario.TL.State state_group = 6;
  int state_group_size() const;
  private:
  int _internal_state_group_size() const;
  public:
  void clear_state_group();
  ::apollo::simulation::Scenario_TL_State* mutable_state_group(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::simulation::Scenario_TL_State >*
      mutable_state_group();
  private:
  const ::apollo::simulation::Scenario_TL_State& _internal_state_group(int index) const;
  ::apollo::simulation::Scenario_TL_State* _internal_add_state_group();
  public:
  const ::apollo::simulation::Scenario_TL_State& state_group(int index) const;
  ::apollo::simulation::Scenario_TL_State* add_state_group();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::simulation::Scenario_TL_State >&
      state_group() const;

  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional .apollo.simulation.Scenario.TL.Location location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::apollo::simulation::Scenario_TL_Location& location() const;
  ::apollo::simulation::Scenario_TL_Location* release_location();
  ::apollo::simulation::Scenario_TL_Location* mutable_location();
  void set_allocated_location(::apollo::simulation::Scenario_TL_Location* location);
  private:
  const ::apollo::simulation::Scenario_TL_Location& _internal_location() const;
  ::apollo::simulation::Scenario_TL_Location* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::apollo::simulation::Scenario_TL_Location* location);
  ::apollo::simulation::Scenario_TL_Location* unsafe_arena_release_location();

  // optional .apollo.simulation.Scenario.TL.State initial_state = 5;
  bool has_initial_state() const;
  private:
  bool _internal_has_initial_state() const;
  public:
  void clear_initial_state();
  const ::apollo::simulation::Scenario_TL_State& initial_state() const;
  ::apollo::simulation::Scenario_TL_State* release_initial_state();
  ::apollo::simulation::Scenario_TL_State* mutable_initial_state();
  void set_allocated_initial_state(::apollo::simulation::Scenario_TL_State* initial_state);
  private:
  const ::apollo::simulation::Scenario_TL_State& _internal_initial_state() const;
  ::apollo::simulation::Scenario_TL_State* _internal_mutable_initial_state();
  public:
  void unsafe_arena_set_allocated_initial_state(
      ::apollo::simulation::Scenario_TL_State* initial_state);
  ::apollo::simulation::Scenario_TL_State* unsafe_arena_release_initial_state();

  // optional .apollo.simulation.Scenario.TL.TriggerType trigger_type = 3 [default = NA];
  bool has_trigger_type() const;
  private:
  bool _internal_has_trigger_type() const;
  public:
  void clear_trigger_type();
  ::apollo::simulation::Scenario_TL_TriggerType trigger_type() const;
  void set_trigger_type(::apollo::simulation::Scenario_TL_TriggerType value);
  private:
  ::apollo::simulation::Scenario_TL_TriggerType _internal_trigger_type() const;
  void _internal_set_trigger_type(::apollo::simulation::Scenario_TL_TriggerType value);
  public:

  // optional double trigger_value = 4 [default = 30];
  bool has_trigger_value() const;
  private:
  bool _internal_has_trigger_value() const;
  public:
  void clear_trigger_value();
  double trigger_value() const;
  void set_trigger_value(double value);
  private:
  double _internal_trigger_value() const;
  void _internal_set_trigger_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.simulation.Scenario.TL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::simulation::Scenario_TL_State > state_group_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::apollo::simulation::Scenario_TL_Location* location_;
  ::apollo::simulation::Scenario_TL_State* initial_state_;
  int trigger_type_;
  double trigger_value_;
  friend struct ::TableStruct_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto;
};
// -------------------------------------------------------------------

class Scenario PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.simulation.Scenario) */ {
 public:
  inline Scenario() : Scenario(nullptr) {}
  virtual ~Scenario();

  Scenario(const Scenario& from);
  Scenario(Scenario&& from) noexcept
    : Scenario() {
    *this = ::std::move(from);
  }

  inline Scenario& operator=(const Scenario& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scenario& operator=(Scenario&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scenario& default_instance();

  static inline const Scenario* internal_default_instance() {
    return reinterpret_cast<const Scenario*>(
               &_Scenario_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Scenario& a, Scenario& b) {
    a.Swap(&b);
  }
  inline void Swap(Scenario* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scenario* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scenario* New() const final {
    return CreateMaybeMessage<Scenario>(nullptr);
  }

  Scenario* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scenario>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scenario& from);
  void MergeFrom(const Scenario& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scenario* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.simulation.Scenario";
  }
  protected:
  explicit Scenario(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto);
    return ::descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Scenario_Point Point;
  typedef Scenario_TL TL;

  typedef Scenario_DefaultLightBehavior DefaultLightBehavior;
  static constexpr DefaultLightBehavior ALWAYS_GREEN =
    Scenario_DefaultLightBehavior_ALWAYS_GREEN;
  static constexpr DefaultLightBehavior CYCLICAL =
    Scenario_DefaultLightBehavior_CYCLICAL;
  static inline bool DefaultLightBehavior_IsValid(int value) {
    return Scenario_DefaultLightBehavior_IsValid(value);
  }
  static constexpr DefaultLightBehavior DefaultLightBehavior_MIN =
    Scenario_DefaultLightBehavior_DefaultLightBehavior_MIN;
  static constexpr DefaultLightBehavior DefaultLightBehavior_MAX =
    Scenario_DefaultLightBehavior_DefaultLightBehavior_MAX;
  static constexpr int DefaultLightBehavior_ARRAYSIZE =
    Scenario_DefaultLightBehavior_DefaultLightBehavior_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DefaultLightBehavior_descriptor() {
    return Scenario_DefaultLightBehavior_descriptor();
  }
  template<typename T>
  static inline const std::string& DefaultLightBehavior_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DefaultLightBehavior>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DefaultLightBehavior_Name.");
    return Scenario_DefaultLightBehavior_Name(enum_t_value);
  }
  static inline bool DefaultLightBehavior_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DefaultLightBehavior* value) {
    return Scenario_DefaultLightBehavior_Parse(name, value);
  }

  typedef Scenario_Mode Mode;
  static constexpr Mode WORLDSIM =
    Scenario_Mode_WORLDSIM;
  static constexpr Mode LOGSIM =
    Scenario_Mode_LOGSIM;
  static constexpr Mode LOGSIM_CONTROL =
    Scenario_Mode_LOGSIM_CONTROL;
  static constexpr Mode LOGSIM_PERCEPTION =
    Scenario_Mode_LOGSIM_PERCEPTION;
  static inline bool Mode_IsValid(int value) {
    return Scenario_Mode_IsValid(value);
  }
  static constexpr Mode Mode_MIN =
    Scenario_Mode_Mode_MIN;
  static constexpr Mode Mode_MAX =
    Scenario_Mode_Mode_MAX;
  static constexpr int Mode_ARRAYSIZE =
    Scenario_Mode_Mode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Mode_descriptor() {
    return Scenario_Mode_descriptor();
  }
  template<typename T>
  static inline const std::string& Mode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Mode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Mode_Name.");
    return Scenario_Mode_Name(enum_t_value);
  }
  static inline bool Mode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Mode* value) {
    return Scenario_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOriginLogFilePathFieldNumber = 6,
    kAgentFieldNumber = 12,
    kDriveActionConfigFieldNumber = 13,
    kTrafficLightsFieldNumber = 24,
    kSelectDefaultMetricFieldNumber = 26,
    kDeselectDefaultMetricFieldNumber = 27,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kMapDirFieldNumber = 10,
    kBaseGradeConfigFileFieldNumber = 18,
    kVehicleFieldNumber = 29,
    kStartFieldNumber = 3,
    kEndFieldNumber = 4,
    kParkingPointFieldNumber = 5,
    kRoutingRequestFieldNumber = 9,
    kGradeConfigFieldNumber = 11,
    kFuzzingConfigFieldNumber = 14,
    kLogFileStartTimeFieldNumber = 7,
    kLogFileEndTimeFieldNumber = 8,
    kStartVelocityFieldNumber = 16,
    kStartAccelerationFieldNumber = 17,
    kSimulatorTimeFieldNumber = 15,
    kDefaultLightBehaviorFieldNumber = 20,
    kModeFieldNumber = 25,
    kTrafficFlowFieldNumber = 30,
    kDetectDistanceFieldNumber = 19,
    kRedTimeFieldNumber = 21,
    kGreenTimeFieldNumber = 22,
    kYellowTimeFieldNumber = 23,
    kBacktrackTimeFieldNumber = 28,
  };
  // repeated string origin_log_file_path = 6;
  int origin_log_file_path_size() const;
  private:
  int _internal_origin_log_file_path_size() const;
  public:
  void clear_origin_log_file_path();
  const std::string& origin_log_file_path(int index) const;
  std::string* mutable_origin_log_file_path(int index);
  void set_origin_log_file_path(int index, const std::string& value);
  void set_origin_log_file_path(int index, std::string&& value);
  void set_origin_log_file_path(int index, const char* value);
  void set_origin_log_file_path(int index, const char* value, size_t size);
  std::string* add_origin_log_file_path();
  void add_origin_log_file_path(const std::string& value);
  void add_origin_log_file_path(std::string&& value);
  void add_origin_log_file_path(const char* value);
  void add_origin_log_file_path(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& origin_log_file_path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_origin_log_file_path();
  private:
  const std::string& _internal_origin_log_file_path(int index) const;
  std::string* _internal_add_origin_log_file_path();
  public:

  // repeated .apollo.simulation.AgentConfig agent = 12;
  int agent_size() const;
  private:
  int _internal_agent_size() const;
  public:
  void clear_agent();
  ::apollo::simulation::AgentConfig* mutable_agent(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::simulation::AgentConfig >*
      mutable_agent();
  private:
  const ::apollo::simulation::AgentConfig& _internal_agent(int index) const;
  ::apollo::simulation::AgentConfig* _internal_add_agent();
  public:
  const ::apollo::simulation::AgentConfig& agent(int index) const;
  ::apollo::simulation::AgentConfig* add_agent();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::simulation::AgentConfig >&
      agent() const;

  // repeated .apollo.simulation.DriveActionConfig drive_action_config = 13;
  int drive_action_config_size() const;
  private:
  int _internal_drive_action_config_size() const;
  public:
  void clear_drive_action_config();
  ::apollo::simulation::DriveActionConfig* mutable_drive_action_config(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::simulation::DriveActionConfig >*
      mutable_drive_action_config();
  private:
  const ::apollo::simulation::DriveActionConfig& _internal_drive_action_config(int index) const;
  ::apollo::simulation::DriveActionConfig* _internal_add_drive_action_config();
  public:
  const ::apollo::simulation::DriveActionConfig& drive_action_config(int index) const;
  ::apollo::simulation::DriveActionConfig* add_drive_action_config();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::simulation::DriveActionConfig >&
      drive_action_config() const;

  // repeated .apollo.simulation.Scenario.TL traffic_lights = 24;
  int traffic_lights_size() const;
  private:
  int _internal_traffic_lights_size() const;
  public:
  void clear_traffic_lights();
  ::apollo::simulation::Scenario_TL* mutable_traffic_lights(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::simulation::Scenario_TL >*
      mutable_traffic_lights();
  private:
  const ::apollo::simulation::Scenario_TL& _internal_traffic_lights(int index) const;
  ::apollo::simulation::Scenario_TL* _internal_add_traffic_lights();
  public:
  const ::apollo::simulation::Scenario_TL& traffic_lights(int index) const;
  ::apollo::simulation::Scenario_TL* add_traffic_lights();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::simulation::Scenario_TL >&
      traffic_lights() const;

  // repeated string select_default_metric = 26;
  int select_default_metric_size() const;
  private:
  int _internal_select_default_metric_size() const;
  public:
  void clear_select_default_metric();
  const std::string& select_default_metric(int index) const;
  std::string* mutable_select_default_metric(int index);
  void set_select_default_metric(int index, const std::string& value);
  void set_select_default_metric(int index, std::string&& value);
  void set_select_default_metric(int index, const char* value);
  void set_select_default_metric(int index, const char* value, size_t size);
  std::string* add_select_default_metric();
  void add_select_default_metric(const std::string& value);
  void add_select_default_metric(std::string&& value);
  void add_select_default_metric(const char* value);
  void add_select_default_metric(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& select_default_metric() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_select_default_metric();
  private:
  const std::string& _internal_select_default_metric(int index) const;
  std::string* _internal_add_select_default_metric();
  public:

  // repeated string deselect_default_metric = 27;
  int deselect_default_metric_size() const;
  private:
  int _internal_deselect_default_metric_size() const;
  public:
  void clear_deselect_default_metric();
  const std::string& deselect_default_metric(int index) const;
  std::string* mutable_deselect_default_metric(int index);
  void set_deselect_default_metric(int index, const std::string& value);
  void set_deselect_default_metric(int index, std::string&& value);
  void set_deselect_default_metric(int index, const char* value);
  void set_deselect_default_metric(int index, const char* value, size_t size);
  std::string* add_deselect_default_metric();
  void add_deselect_default_metric(const std::string& value);
  void add_deselect_default_metric(std::string&& value);
  void add_deselect_default_metric(const char* value);
  void add_deselect_default_metric(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& deselect_default_metric() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_deselect_default_metric();
  private:
  const std::string& _internal_deselect_default_metric(int index) const;
  std::string* _internal_add_deselect_default_metric();
  public:

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string description = 2;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional string map_dir = 10;
  bool has_map_dir() const;
  private:
  bool _internal_has_map_dir() const;
  public:
  void clear_map_dir();
  const std::string& map_dir() const;
  void set_map_dir(const std::string& value);
  void set_map_dir(std::string&& value);
  void set_map_dir(const char* value);
  void set_map_dir(const char* value, size_t size);
  std::string* mutable_map_dir();
  std::string* release_map_dir();
  void set_allocated_map_dir(std::string* map_dir);
  private:
  const std::string& _internal_map_dir() const;
  void _internal_set_map_dir(const std::string& value);
  std::string* _internal_mutable_map_dir();
  public:

  // optional string base_grade_config_file = 18;
  bool has_base_grade_config_file() const;
  private:
  bool _internal_has_base_grade_config_file() const;
  public:
  void clear_base_grade_config_file();
  const std::string& base_grade_config_file() const;
  void set_base_grade_config_file(const std::string& value);
  void set_base_grade_config_file(std::string&& value);
  void set_base_grade_config_file(const char* value);
  void set_base_grade_config_file(const char* value, size_t size);
  std::string* mutable_base_grade_config_file();
  std::string* release_base_grade_config_file();
  void set_allocated_base_grade_config_file(std::string* base_grade_config_file);
  private:
  const std::string& _internal_base_grade_config_file() const;
  void _internal_set_base_grade_config_file(const std::string& value);
  std::string* _internal_mutable_base_grade_config_file();
  public:

  // optional string vehicle = 29;
  bool has_vehicle() const;
  private:
  bool _internal_has_vehicle() const;
  public:
  void clear_vehicle();
  const std::string& vehicle() const;
  void set_vehicle(const std::string& value);
  void set_vehicle(std::string&& value);
  void set_vehicle(const char* value);
  void set_vehicle(const char* value, size_t size);
  std::string* mutable_vehicle();
  std::string* release_vehicle();
  void set_allocated_vehicle(std::string* vehicle);
  private:
  const std::string& _internal_vehicle() const;
  void _internal_set_vehicle(const std::string& value);
  std::string* _internal_mutable_vehicle();
  public:

  // optional .apollo.simulation.Scenario.Point start = 3;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::apollo::simulation::Scenario_Point& start() const;
  ::apollo::simulation::Scenario_Point* release_start();
  ::apollo::simulation::Scenario_Point* mutable_start();
  void set_allocated_start(::apollo::simulation::Scenario_Point* start);
  private:
  const ::apollo::simulation::Scenario_Point& _internal_start() const;
  ::apollo::simulation::Scenario_Point* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::apollo::simulation::Scenario_Point* start);
  ::apollo::simulation::Scenario_Point* unsafe_arena_release_start();

  // optional .apollo.simulation.Scenario.Point end = 4;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::apollo::simulation::Scenario_Point& end() const;
  ::apollo::simulation::Scenario_Point* release_end();
  ::apollo::simulation::Scenario_Point* mutable_end();
  void set_allocated_end(::apollo::simulation::Scenario_Point* end);
  private:
  const ::apollo::simulation::Scenario_Point& _internal_end() const;
  ::apollo::simulation::Scenario_Point* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::apollo::simulation::Scenario_Point* end);
  ::apollo::simulation::Scenario_Point* unsafe_arena_release_end();

  // optional .apollo.simulation.Scenario.Point parking_point = 5;
  bool has_parking_point() const;
  private:
  bool _internal_has_parking_point() const;
  public:
  void clear_parking_point();
  const ::apollo::simulation::Scenario_Point& parking_point() const;
  ::apollo::simulation::Scenario_Point* release_parking_point();
  ::apollo::simulation::Scenario_Point* mutable_parking_point();
  void set_allocated_parking_point(::apollo::simulation::Scenario_Point* parking_point);
  private:
  const ::apollo::simulation::Scenario_Point& _internal_parking_point() const;
  ::apollo::simulation::Scenario_Point* _internal_mutable_parking_point();
  public:
  void unsafe_arena_set_allocated_parking_point(
      ::apollo::simulation::Scenario_Point* parking_point);
  ::apollo::simulation::Scenario_Point* unsafe_arena_release_parking_point();

  // optional .apollo.routing.RoutingRequest routing_request = 9;
  bool has_routing_request() const;
  private:
  bool _internal_has_routing_request() const;
  public:
  void clear_routing_request();
  const ::apollo::routing::RoutingRequest& routing_request() const;
  ::apollo::routing::RoutingRequest* release_routing_request();
  ::apollo::routing::RoutingRequest* mutable_routing_request();
  void set_allocated_routing_request(::apollo::routing::RoutingRequest* routing_request);
  private:
  const ::apollo::routing::RoutingRequest& _internal_routing_request() const;
  ::apollo::routing::RoutingRequest* _internal_mutable_routing_request();
  public:
  void unsafe_arena_set_allocated_routing_request(
      ::apollo::routing::RoutingRequest* routing_request);
  ::apollo::routing::RoutingRequest* unsafe_arena_release_routing_request();

  // optional .apollo.simulation.GradingConfig grade_config = 11;
  bool has_grade_config() const;
  private:
  bool _internal_has_grade_config() const;
  public:
  void clear_grade_config();
  const ::apollo::simulation::GradingConfig& grade_config() const;
  ::apollo::simulation::GradingConfig* release_grade_config();
  ::apollo::simulation::GradingConfig* mutable_grade_config();
  void set_allocated_grade_config(::apollo::simulation::GradingConfig* grade_config);
  private:
  const ::apollo::simulation::GradingConfig& _internal_grade_config() const;
  ::apollo::simulation::GradingConfig* _internal_mutable_grade_config();
  public:
  void unsafe_arena_set_allocated_grade_config(
      ::apollo::simulation::GradingConfig* grade_config);
  ::apollo::simulation::GradingConfig* unsafe_arena_release_grade_config();

  // optional .apollo.simulation.FuzzingConfig fuzzing_config = 14;
  bool has_fuzzing_config() const;
  private:
  bool _internal_has_fuzzing_config() const;
  public:
  void clear_fuzzing_config();
  const ::apollo::simulation::FuzzingConfig& fuzzing_config() const;
  ::apollo::simulation::FuzzingConfig* release_fuzzing_config();
  ::apollo::simulation::FuzzingConfig* mutable_fuzzing_config();
  void set_allocated_fuzzing_config(::apollo::simulation::FuzzingConfig* fuzzing_config);
  private:
  const ::apollo::simulation::FuzzingConfig& _internal_fuzzing_config() const;
  ::apollo::simulation::FuzzingConfig* _internal_mutable_fuzzing_config();
  public:
  void unsafe_arena_set_allocated_fuzzing_config(
      ::apollo::simulation::FuzzingConfig* fuzzing_config);
  ::apollo::simulation::FuzzingConfig* unsafe_arena_release_fuzzing_config();

  // optional double log_file_start_time = 7;
  bool has_log_file_start_time() const;
  private:
  bool _internal_has_log_file_start_time() const;
  public:
  void clear_log_file_start_time();
  double log_file_start_time() const;
  void set_log_file_start_time(double value);
  private:
  double _internal_log_file_start_time() const;
  void _internal_set_log_file_start_time(double value);
  public:

  // optional double log_file_end_time = 8;
  bool has_log_file_end_time() const;
  private:
  bool _internal_has_log_file_end_time() const;
  public:
  void clear_log_file_end_time();
  double log_file_end_time() const;
  void set_log_file_end_time(double value);
  private:
  double _internal_log_file_end_time() const;
  void _internal_set_log_file_end_time(double value);
  public:

  // optional double start_velocity = 16 [default = 0];
  bool has_start_velocity() const;
  private:
  bool _internal_has_start_velocity() const;
  public:
  void clear_start_velocity();
  double start_velocity() const;
  void set_start_velocity(double value);
  private:
  double _internal_start_velocity() const;
  void _internal_set_start_velocity(double value);
  public:

  // optional double start_acceleration = 17 [default = 0];
  bool has_start_acceleration() const;
  private:
  bool _internal_has_start_acceleration() const;
  public:
  void clear_start_acceleration();
  double start_acceleration() const;
  void set_start_acceleration(double value);
  private:
  double _internal_start_acceleration() const;
  void _internal_set_start_acceleration(double value);
  public:

  // optional int32 simulator_time = 15;
  bool has_simulator_time() const;
  private:
  bool _internal_has_simulator_time() const;
  public:
  void clear_simulator_time();
  ::PROTOBUF_NAMESPACE_ID::int32 simulator_time() const;
  void set_simulator_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_simulator_time() const;
  void _internal_set_simulator_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.simulation.Scenario.DefaultLightBehavior default_light_behavior = 20 [default = ALWAYS_GREEN];
  bool has_default_light_behavior() const;
  private:
  bool _internal_has_default_light_behavior() const;
  public:
  void clear_default_light_behavior();
  ::apollo::simulation::Scenario_DefaultLightBehavior default_light_behavior() const;
  void set_default_light_behavior(::apollo::simulation::Scenario_DefaultLightBehavior value);
  private:
  ::apollo::simulation::Scenario_DefaultLightBehavior _internal_default_light_behavior() const;
  void _internal_set_default_light_behavior(::apollo::simulation::Scenario_DefaultLightBehavior value);
  public:

  // optional .apollo.simulation.Scenario.Mode mode = 25 [default = WORLDSIM];
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::apollo::simulation::Scenario_Mode mode() const;
  void set_mode(::apollo::simulation::Scenario_Mode value);
  private:
  ::apollo::simulation::Scenario_Mode _internal_mode() const;
  void _internal_set_mode(::apollo::simulation::Scenario_Mode value);
  public:

  // optional bool traffic_flow = 30 [default = false];
  bool has_traffic_flow() const;
  private:
  bool _internal_has_traffic_flow() const;
  public:
  void clear_traffic_flow();
  bool traffic_flow() const;
  void set_traffic_flow(bool value);
  private:
  bool _internal_traffic_flow() const;
  void _internal_set_traffic_flow(bool value);
  public:

  // optional double detect_distance = 19 [default = 120];
  bool has_detect_distance() const;
  private:
  bool _internal_has_detect_distance() const;
  public:
  void clear_detect_distance();
  double detect_distance() const;
  void set_detect_distance(double value);
  private:
  double _internal_detect_distance() const;
  void _internal_set_detect_distance(double value);
  public:

  // optional double red_time = 21 [default = 15];
  bool has_red_time() const;
  private:
  bool _internal_has_red_time() const;
  public:
  void clear_red_time();
  double red_time() const;
  void set_red_time(double value);
  private:
  double _internal_red_time() const;
  void _internal_set_red_time(double value);
  public:

  // optional double green_time = 22 [default = 13];
  bool has_green_time() const;
  private:
  bool _internal_has_green_time() const;
  public:
  void clear_green_time();
  double green_time() const;
  void set_green_time(double value);
  private:
  double _internal_green_time() const;
  void _internal_set_green_time(double value);
  public:

  // optional double yellow_time = 23 [default = 3];
  bool has_yellow_time() const;
  private:
  bool _internal_has_yellow_time() const;
  public:
  void clear_yellow_time();
  double yellow_time() const;
  void set_yellow_time(double value);
  private:
  double _internal_yellow_time() const;
  void _internal_set_yellow_time(double value);
  public:

  // optional double backtrack_time = 28 [default = 1];
  bool has_backtrack_time() const;
  private:
  bool _internal_has_backtrack_time() const;
  public:
  void clear_backtrack_time();
  double backtrack_time() const;
  void set_backtrack_time(double value);
  private:
  double _internal_backtrack_time() const;
  void _internal_set_backtrack_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.simulation.Scenario)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> origin_log_file_path_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::simulation::AgentConfig > agent_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::simulation::DriveActionConfig > drive_action_config_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::simulation::Scenario_TL > traffic_lights_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> select_default_metric_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> deselect_default_metric_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_grade_config_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vehicle_;
  ::apollo::simulation::Scenario_Point* start_;
  ::apollo::simulation::Scenario_Point* end_;
  ::apollo::simulation::Scenario_Point* parking_point_;
  ::apollo::routing::RoutingRequest* routing_request_;
  ::apollo::simulation::GradingConfig* grade_config_;
  ::apollo::simulation::FuzzingConfig* fuzzing_config_;
  double log_file_start_time_;
  double log_file_end_time_;
  double start_velocity_;
  double start_acceleration_;
  ::PROTOBUF_NAMESPACE_ID::int32 simulator_time_;
  int default_light_behavior_;
  int mode_;
  bool traffic_flow_;
  double detect_distance_;
  double red_time_;
  double green_time_;
  double yellow_time_;
  double backtrack_time_;
  friend struct ::TableStruct_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FuzzingConfig

// -------------------------------------------------------------------

// DriveActionConfig

// optional .apollo.planning.DrivingAction drive_action = 1 [default = NONE];
inline bool DriveActionConfig::_internal_has_drive_action() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DriveActionConfig::has_drive_action() const {
  return _internal_has_drive_action();
}
inline void DriveActionConfig::clear_drive_action() {
  drive_action_ = 100;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::planning::DrivingAction DriveActionConfig::_internal_drive_action() const {
  return static_cast< ::apollo::planning::DrivingAction >(drive_action_);
}
inline ::apollo::planning::DrivingAction DriveActionConfig::drive_action() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.DriveActionConfig.drive_action)
  return _internal_drive_action();
}
inline void DriveActionConfig::_internal_set_drive_action(::apollo::planning::DrivingAction value) {
  assert(::apollo::planning::DrivingAction_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  drive_action_ = value;
}
inline void DriveActionConfig::set_drive_action(::apollo::planning::DrivingAction value) {
  _internal_set_drive_action(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.DriveActionConfig.drive_action)
}

// optional double trigger_time = 2 [default = 0];
inline bool DriveActionConfig::_internal_has_trigger_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DriveActionConfig::has_trigger_time() const {
  return _internal_has_trigger_time();
}
inline void DriveActionConfig::clear_trigger_time() {
  trigger_time_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double DriveActionConfig::_internal_trigger_time() const {
  return trigger_time_;
}
inline double DriveActionConfig::trigger_time() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.DriveActionConfig.trigger_time)
  return _internal_trigger_time();
}
inline void DriveActionConfig::_internal_set_trigger_time(double value) {
  _has_bits_[0] |= 0x00000001u;
  trigger_time_ = value;
}
inline void DriveActionConfig::set_trigger_time(double value) {
  _internal_set_trigger_time(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.DriveActionConfig.trigger_time)
}

// -------------------------------------------------------------------

// Scenario_Point

// optional double x = 1;
inline bool Scenario_Point::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Scenario_Point::has_x() const {
  return _internal_has_x();
}
inline void Scenario_Point::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Scenario_Point::_internal_x() const {
  return x_;
}
inline double Scenario_Point::x() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.Point.x)
  return _internal_x();
}
inline void Scenario_Point::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Scenario_Point::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.Point.x)
}

// optional double y = 2;
inline bool Scenario_Point::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Scenario_Point::has_y() const {
  return _internal_has_y();
}
inline void Scenario_Point::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Scenario_Point::_internal_y() const {
  return y_;
}
inline double Scenario_Point::y() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.Point.y)
  return _internal_y();
}
inline void Scenario_Point::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Scenario_Point::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.Point.y)
}

// optional double heading = 3;
inline bool Scenario_Point::_internal_has_heading() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Scenario_Point::has_heading() const {
  return _internal_has_heading();
}
inline void Scenario_Point::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Scenario_Point::_internal_heading() const {
  return heading_;
}
inline double Scenario_Point::heading() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.Point.heading)
  return _internal_heading();
}
inline void Scenario_Point::_internal_set_heading(double value) {
  _has_bits_[0] |= 0x00000004u;
  heading_ = value;
}
inline void Scenario_Point::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.Point.heading)
}

// -------------------------------------------------------------------

// Scenario_TL_Location

// optional double x = 1;
inline bool Scenario_TL_Location::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Scenario_TL_Location::has_x() const {
  return _internal_has_x();
}
inline void Scenario_TL_Location::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Scenario_TL_Location::_internal_x() const {
  return x_;
}
inline double Scenario_TL_Location::x() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.TL.Location.x)
  return _internal_x();
}
inline void Scenario_TL_Location::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Scenario_TL_Location::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.TL.Location.x)
}

// optional double y = 2;
inline bool Scenario_TL_Location::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Scenario_TL_Location::has_y() const {
  return _internal_has_y();
}
inline void Scenario_TL_Location::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Scenario_TL_Location::_internal_y() const {
  return y_;
}
inline double Scenario_TL_Location::y() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.TL.Location.y)
  return _internal_y();
}
inline void Scenario_TL_Location::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Scenario_TL_Location::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.TL.Location.y)
}

// optional double z = 3;
inline bool Scenario_TL_Location::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Scenario_TL_Location::has_z() const {
  return _internal_has_z();
}
inline void Scenario_TL_Location::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Scenario_TL_Location::_internal_z() const {
  return z_;
}
inline double Scenario_TL_Location::z() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.TL.Location.z)
  return _internal_z();
}
inline void Scenario_TL_Location::_internal_set_z(double value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void Scenario_TL_Location::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.TL.Location.z)
}

// -------------------------------------------------------------------

// Scenario_TL_State

// optional .apollo.perception.TrafficLight.Color color = 1 [default = GREEN];
inline bool Scenario_TL_State::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Scenario_TL_State::has_color() const {
  return _internal_has_color();
}
inline void Scenario_TL_State::clear_color() {
  color_ = 3;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::perception::TrafficLight_Color Scenario_TL_State::_internal_color() const {
  return static_cast< ::apollo::perception::TrafficLight_Color >(color_);
}
inline ::apollo::perception::TrafficLight_Color Scenario_TL_State::color() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.TL.State.color)
  return _internal_color();
}
inline void Scenario_TL_State::_internal_set_color(::apollo::perception::TrafficLight_Color value) {
  assert(::apollo::perception::TrafficLight_Color_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  color_ = value;
}
inline void Scenario_TL_State::set_color(::apollo::perception::TrafficLight_Color value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.TL.State.color)
}

// optional bool blink = 2 [default = false];
inline bool Scenario_TL_State::_internal_has_blink() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Scenario_TL_State::has_blink() const {
  return _internal_has_blink();
}
inline void Scenario_TL_State::clear_blink() {
  blink_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Scenario_TL_State::_internal_blink() const {
  return blink_;
}
inline bool Scenario_TL_State::blink() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.TL.State.blink)
  return _internal_blink();
}
inline void Scenario_TL_State::_internal_set_blink(bool value) {
  _has_bits_[0] |= 0x00000001u;
  blink_ = value;
}
inline void Scenario_TL_State::set_blink(bool value) {
  _internal_set_blink(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.TL.State.blink)
}

// optional double keep_time = 3 [default = 10];
inline bool Scenario_TL_State::_internal_has_keep_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Scenario_TL_State::has_keep_time() const {
  return _internal_has_keep_time();
}
inline void Scenario_TL_State::clear_keep_time() {
  keep_time_ = 10;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Scenario_TL_State::_internal_keep_time() const {
  return keep_time_;
}
inline double Scenario_TL_State::keep_time() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.TL.State.keep_time)
  return _internal_keep_time();
}
inline void Scenario_TL_State::_internal_set_keep_time(double value) {
  _has_bits_[0] |= 0x00000004u;
  keep_time_ = value;
}
inline void Scenario_TL_State::set_keep_time(double value) {
  _internal_set_keep_time(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.TL.State.keep_time)
}

// -------------------------------------------------------------------

// Scenario_TL

// optional string id = 1;
inline bool Scenario_TL::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Scenario_TL::has_id() const {
  return _internal_has_id();
}
inline void Scenario_TL::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Scenario_TL::id() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.TL.id)
  return _internal_id();
}
inline void Scenario_TL::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.TL.id)
}
inline std::string* Scenario_TL::mutable_id() {
  // @@protoc_insertion_point(field_mutable:apollo.simulation.Scenario.TL.id)
  return _internal_mutable_id();
}
inline const std::string& Scenario_TL::_internal_id() const {
  return id_.Get();
}
inline void Scenario_TL::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Scenario_TL::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.simulation.Scenario.TL.id)
}
inline void Scenario_TL::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.simulation.Scenario.TL.id)
}
inline void Scenario_TL::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.simulation.Scenario.TL.id)
}
inline std::string* Scenario_TL::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Scenario_TL::release_id() {
  // @@protoc_insertion_point(field_release:apollo.simulation.Scenario.TL.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Scenario_TL::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Scenario.TL.id)
}

// optional .apollo.simulation.Scenario.TL.Location location = 2;
inline bool Scenario_TL::_internal_has_location() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || location_ != nullptr);
  return value;
}
inline bool Scenario_TL::has_location() const {
  return _internal_has_location();
}
inline void Scenario_TL::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::simulation::Scenario_TL_Location& Scenario_TL::_internal_location() const {
  const ::apollo::simulation::Scenario_TL_Location* p = location_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::simulation::Scenario_TL_Location&>(
      ::apollo::simulation::_Scenario_TL_Location_default_instance_);
}
inline const ::apollo::simulation::Scenario_TL_Location& Scenario_TL::location() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.TL.location)
  return _internal_location();
}
inline void Scenario_TL::unsafe_arena_set_allocated_location(
    ::apollo::simulation::Scenario_TL_Location* location) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.simulation.Scenario.TL.location)
}
inline ::apollo::simulation::Scenario_TL_Location* Scenario_TL::release_location() {
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::simulation::Scenario_TL_Location* temp = location_;
  location_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::simulation::Scenario_TL_Location* Scenario_TL::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:apollo.simulation.Scenario.TL.location)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::simulation::Scenario_TL_Location* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::apollo::simulation::Scenario_TL_Location* Scenario_TL::_internal_mutable_location() {
  _has_bits_[0] |= 0x00000002u;
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::simulation::Scenario_TL_Location>(GetArena());
    location_ = p;
  }
  return location_;
}
inline ::apollo::simulation::Scenario_TL_Location* Scenario_TL::mutable_location() {
  // @@protoc_insertion_point(field_mutable:apollo.simulation.Scenario.TL.location)
  return _internal_mutable_location();
}
inline void Scenario_TL::set_allocated_location(::apollo::simulation::Scenario_TL_Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Scenario.TL.location)
}

// optional .apollo.simulation.Scenario.TL.TriggerType trigger_type = 3 [default = NA];
inline bool Scenario_TL::_internal_has_trigger_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Scenario_TL::has_trigger_type() const {
  return _internal_has_trigger_type();
}
inline void Scenario_TL::clear_trigger_type() {
  trigger_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::simulation::Scenario_TL_TriggerType Scenario_TL::_internal_trigger_type() const {
  return static_cast< ::apollo::simulation::Scenario_TL_TriggerType >(trigger_type_);
}
inline ::apollo::simulation::Scenario_TL_TriggerType Scenario_TL::trigger_type() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.TL.trigger_type)
  return _internal_trigger_type();
}
inline void Scenario_TL::_internal_set_trigger_type(::apollo::simulation::Scenario_TL_TriggerType value) {
  assert(::apollo::simulation::Scenario_TL_TriggerType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  trigger_type_ = value;
}
inline void Scenario_TL::set_trigger_type(::apollo::simulation::Scenario_TL_TriggerType value) {
  _internal_set_trigger_type(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.TL.trigger_type)
}

// optional double trigger_value = 4 [default = 30];
inline bool Scenario_TL::_internal_has_trigger_value() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Scenario_TL::has_trigger_value() const {
  return _internal_has_trigger_value();
}
inline void Scenario_TL::clear_trigger_value() {
  trigger_value_ = 30;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Scenario_TL::_internal_trigger_value() const {
  return trigger_value_;
}
inline double Scenario_TL::trigger_value() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.TL.trigger_value)
  return _internal_trigger_value();
}
inline void Scenario_TL::_internal_set_trigger_value(double value) {
  _has_bits_[0] |= 0x00000010u;
  trigger_value_ = value;
}
inline void Scenario_TL::set_trigger_value(double value) {
  _internal_set_trigger_value(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.TL.trigger_value)
}

// optional .apollo.simulation.Scenario.TL.State initial_state = 5;
inline bool Scenario_TL::_internal_has_initial_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || initial_state_ != nullptr);
  return value;
}
inline bool Scenario_TL::has_initial_state() const {
  return _internal_has_initial_state();
}
inline void Scenario_TL::clear_initial_state() {
  if (initial_state_ != nullptr) initial_state_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::simulation::Scenario_TL_State& Scenario_TL::_internal_initial_state() const {
  const ::apollo::simulation::Scenario_TL_State* p = initial_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::simulation::Scenario_TL_State&>(
      ::apollo::simulation::_Scenario_TL_State_default_instance_);
}
inline const ::apollo::simulation::Scenario_TL_State& Scenario_TL::initial_state() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.TL.initial_state)
  return _internal_initial_state();
}
inline void Scenario_TL::unsafe_arena_set_allocated_initial_state(
    ::apollo::simulation::Scenario_TL_State* initial_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initial_state_);
  }
  initial_state_ = initial_state;
  if (initial_state) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.simulation.Scenario.TL.initial_state)
}
inline ::apollo::simulation::Scenario_TL_State* Scenario_TL::release_initial_state() {
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::simulation::Scenario_TL_State* temp = initial_state_;
  initial_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::simulation::Scenario_TL_State* Scenario_TL::unsafe_arena_release_initial_state() {
  // @@protoc_insertion_point(field_release:apollo.simulation.Scenario.TL.initial_state)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::simulation::Scenario_TL_State* temp = initial_state_;
  initial_state_ = nullptr;
  return temp;
}
inline ::apollo::simulation::Scenario_TL_State* Scenario_TL::_internal_mutable_initial_state() {
  _has_bits_[0] |= 0x00000004u;
  if (initial_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::simulation::Scenario_TL_State>(GetArena());
    initial_state_ = p;
  }
  return initial_state_;
}
inline ::apollo::simulation::Scenario_TL_State* Scenario_TL::mutable_initial_state() {
  // @@protoc_insertion_point(field_mutable:apollo.simulation.Scenario.TL.initial_state)
  return _internal_mutable_initial_state();
}
inline void Scenario_TL::set_allocated_initial_state(::apollo::simulation::Scenario_TL_State* initial_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete initial_state_;
  }
  if (initial_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(initial_state);
    if (message_arena != submessage_arena) {
      initial_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initial_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  initial_state_ = initial_state;
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Scenario.TL.initial_state)
}

// repeated .apollo.simulation.Scenario.TL.State state_group = 6;
inline int Scenario_TL::_internal_state_group_size() const {
  return state_group_.size();
}
inline int Scenario_TL::state_group_size() const {
  return _internal_state_group_size();
}
inline void Scenario_TL::clear_state_group() {
  state_group_.Clear();
}
inline ::apollo::simulation::Scenario_TL_State* Scenario_TL::mutable_state_group(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.simulation.Scenario.TL.state_group)
  return state_group_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::simulation::Scenario_TL_State >*
Scenario_TL::mutable_state_group() {
  // @@protoc_insertion_point(field_mutable_list:apollo.simulation.Scenario.TL.state_group)
  return &state_group_;
}
inline const ::apollo::simulation::Scenario_TL_State& Scenario_TL::_internal_state_group(int index) const {
  return state_group_.Get(index);
}
inline const ::apollo::simulation::Scenario_TL_State& Scenario_TL::state_group(int index) const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.TL.state_group)
  return _internal_state_group(index);
}
inline ::apollo::simulation::Scenario_TL_State* Scenario_TL::_internal_add_state_group() {
  return state_group_.Add();
}
inline ::apollo::simulation::Scenario_TL_State* Scenario_TL::add_state_group() {
  // @@protoc_insertion_point(field_add:apollo.simulation.Scenario.TL.state_group)
  return _internal_add_state_group();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::simulation::Scenario_TL_State >&
Scenario_TL::state_group() const {
  // @@protoc_insertion_point(field_list:apollo.simulation.Scenario.TL.state_group)
  return state_group_;
}

// -------------------------------------------------------------------

// Scenario

// optional string name = 1;
inline bool Scenario::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Scenario::has_name() const {
  return _internal_has_name();
}
inline void Scenario::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Scenario::name() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.name)
  return _internal_name();
}
inline void Scenario::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.name)
}
inline std::string* Scenario::mutable_name() {
  // @@protoc_insertion_point(field_mutable:apollo.simulation.Scenario.name)
  return _internal_mutable_name();
}
inline const std::string& Scenario::_internal_name() const {
  return name_.Get();
}
inline void Scenario::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Scenario::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.simulation.Scenario.name)
}
inline void Scenario::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.simulation.Scenario.name)
}
inline void Scenario::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.simulation.Scenario.name)
}
inline std::string* Scenario::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Scenario::release_name() {
  // @@protoc_insertion_point(field_release:apollo.simulation.Scenario.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Scenario::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Scenario.name)
}

// optional string description = 2;
inline bool Scenario::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Scenario::has_description() const {
  return _internal_has_description();
}
inline void Scenario::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Scenario::description() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.description)
  return _internal_description();
}
inline void Scenario::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.description)
}
inline std::string* Scenario::mutable_description() {
  // @@protoc_insertion_point(field_mutable:apollo.simulation.Scenario.description)
  return _internal_mutable_description();
}
inline const std::string& Scenario::_internal_description() const {
  return description_.Get();
}
inline void Scenario::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Scenario::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.simulation.Scenario.description)
}
inline void Scenario::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.simulation.Scenario.description)
}
inline void Scenario::set_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.simulation.Scenario.description)
}
inline std::string* Scenario::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Scenario::release_description() {
  // @@protoc_insertion_point(field_release:apollo.simulation.Scenario.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Scenario::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Scenario.description)
}

// optional .apollo.simulation.Scenario.Point start = 3;
inline bool Scenario::_internal_has_start() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || start_ != nullptr);
  return value;
}
inline bool Scenario::has_start() const {
  return _internal_has_start();
}
inline void Scenario::clear_start() {
  if (start_ != nullptr) start_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::apollo::simulation::Scenario_Point& Scenario::_internal_start() const {
  const ::apollo::simulation::Scenario_Point* p = start_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::simulation::Scenario_Point&>(
      ::apollo::simulation::_Scenario_Point_default_instance_);
}
inline const ::apollo::simulation::Scenario_Point& Scenario::start() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.start)
  return _internal_start();
}
inline void Scenario::unsafe_arena_set_allocated_start(
    ::apollo::simulation::Scenario_Point* start) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  start_ = start;
  if (start) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.simulation.Scenario.start)
}
inline ::apollo::simulation::Scenario_Point* Scenario::release_start() {
  _has_bits_[0] &= ~0x00000020u;
  ::apollo::simulation::Scenario_Point* temp = start_;
  start_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::simulation::Scenario_Point* Scenario::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:apollo.simulation.Scenario.start)
  _has_bits_[0] &= ~0x00000020u;
  ::apollo::simulation::Scenario_Point* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::apollo::simulation::Scenario_Point* Scenario::_internal_mutable_start() {
  _has_bits_[0] |= 0x00000020u;
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::simulation::Scenario_Point>(GetArena());
    start_ = p;
  }
  return start_;
}
inline ::apollo::simulation::Scenario_Point* Scenario::mutable_start() {
  // @@protoc_insertion_point(field_mutable:apollo.simulation.Scenario.start)
  return _internal_mutable_start();
}
inline void Scenario::set_allocated_start(::apollo::simulation::Scenario_Point* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_;
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start);
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Scenario.start)
}

// optional .apollo.simulation.Scenario.Point end = 4;
inline bool Scenario::_internal_has_end() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || end_ != nullptr);
  return value;
}
inline bool Scenario::has_end() const {
  return _internal_has_end();
}
inline void Scenario::clear_end() {
  if (end_ != nullptr) end_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::apollo::simulation::Scenario_Point& Scenario::_internal_end() const {
  const ::apollo::simulation::Scenario_Point* p = end_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::simulation::Scenario_Point&>(
      ::apollo::simulation::_Scenario_Point_default_instance_);
}
inline const ::apollo::simulation::Scenario_Point& Scenario::end() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.end)
  return _internal_end();
}
inline void Scenario::unsafe_arena_set_allocated_end(
    ::apollo::simulation::Scenario_Point* end) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  end_ = end;
  if (end) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.simulation.Scenario.end)
}
inline ::apollo::simulation::Scenario_Point* Scenario::release_end() {
  _has_bits_[0] &= ~0x00000040u;
  ::apollo::simulation::Scenario_Point* temp = end_;
  end_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::simulation::Scenario_Point* Scenario::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:apollo.simulation.Scenario.end)
  _has_bits_[0] &= ~0x00000040u;
  ::apollo::simulation::Scenario_Point* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::apollo::simulation::Scenario_Point* Scenario::_internal_mutable_end() {
  _has_bits_[0] |= 0x00000040u;
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::simulation::Scenario_Point>(GetArena());
    end_ = p;
  }
  return end_;
}
inline ::apollo::simulation::Scenario_Point* Scenario::mutable_end() {
  // @@protoc_insertion_point(field_mutable:apollo.simulation.Scenario.end)
  return _internal_mutable_end();
}
inline void Scenario::set_allocated_end(::apollo::simulation::Scenario_Point* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete end_;
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(end);
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Scenario.end)
}

// optional .apollo.simulation.Scenario.Point parking_point = 5;
inline bool Scenario::_internal_has_parking_point() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || parking_point_ != nullptr);
  return value;
}
inline bool Scenario::has_parking_point() const {
  return _internal_has_parking_point();
}
inline void Scenario::clear_parking_point() {
  if (parking_point_ != nullptr) parking_point_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::apollo::simulation::Scenario_Point& Scenario::_internal_parking_point() const {
  const ::apollo::simulation::Scenario_Point* p = parking_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::simulation::Scenario_Point&>(
      ::apollo::simulation::_Scenario_Point_default_instance_);
}
inline const ::apollo::simulation::Scenario_Point& Scenario::parking_point() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.parking_point)
  return _internal_parking_point();
}
inline void Scenario::unsafe_arena_set_allocated_parking_point(
    ::apollo::simulation::Scenario_Point* parking_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parking_point_);
  }
  parking_point_ = parking_point;
  if (parking_point) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.simulation.Scenario.parking_point)
}
inline ::apollo::simulation::Scenario_Point* Scenario::release_parking_point() {
  _has_bits_[0] &= ~0x00000080u;
  ::apollo::simulation::Scenario_Point* temp = parking_point_;
  parking_point_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::simulation::Scenario_Point* Scenario::unsafe_arena_release_parking_point() {
  // @@protoc_insertion_point(field_release:apollo.simulation.Scenario.parking_point)
  _has_bits_[0] &= ~0x00000080u;
  ::apollo::simulation::Scenario_Point* temp = parking_point_;
  parking_point_ = nullptr;
  return temp;
}
inline ::apollo::simulation::Scenario_Point* Scenario::_internal_mutable_parking_point() {
  _has_bits_[0] |= 0x00000080u;
  if (parking_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::simulation::Scenario_Point>(GetArena());
    parking_point_ = p;
  }
  return parking_point_;
}
inline ::apollo::simulation::Scenario_Point* Scenario::mutable_parking_point() {
  // @@protoc_insertion_point(field_mutable:apollo.simulation.Scenario.parking_point)
  return _internal_mutable_parking_point();
}
inline void Scenario::set_allocated_parking_point(::apollo::simulation::Scenario_Point* parking_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete parking_point_;
  }
  if (parking_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(parking_point);
    if (message_arena != submessage_arena) {
      parking_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parking_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  parking_point_ = parking_point;
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Scenario.parking_point)
}

// repeated string origin_log_file_path = 6;
inline int Scenario::_internal_origin_log_file_path_size() const {
  return origin_log_file_path_.size();
}
inline int Scenario::origin_log_file_path_size() const {
  return _internal_origin_log_file_path_size();
}
inline void Scenario::clear_origin_log_file_path() {
  origin_log_file_path_.Clear();
}
inline std::string* Scenario::add_origin_log_file_path() {
  // @@protoc_insertion_point(field_add_mutable:apollo.simulation.Scenario.origin_log_file_path)
  return _internal_add_origin_log_file_path();
}
inline const std::string& Scenario::_internal_origin_log_file_path(int index) const {
  return origin_log_file_path_.Get(index);
}
inline const std::string& Scenario::origin_log_file_path(int index) const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.origin_log_file_path)
  return _internal_origin_log_file_path(index);
}
inline std::string* Scenario::mutable_origin_log_file_path(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.simulation.Scenario.origin_log_file_path)
  return origin_log_file_path_.Mutable(index);
}
inline void Scenario::set_origin_log_file_path(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.origin_log_file_path)
  origin_log_file_path_.Mutable(index)->assign(value);
}
inline void Scenario::set_origin_log_file_path(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.origin_log_file_path)
  origin_log_file_path_.Mutable(index)->assign(std::move(value));
}
inline void Scenario::set_origin_log_file_path(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  origin_log_file_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.simulation.Scenario.origin_log_file_path)
}
inline void Scenario::set_origin_log_file_path(int index, const char* value, size_t size) {
  origin_log_file_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.simulation.Scenario.origin_log_file_path)
}
inline std::string* Scenario::_internal_add_origin_log_file_path() {
  return origin_log_file_path_.Add();
}
inline void Scenario::add_origin_log_file_path(const std::string& value) {
  origin_log_file_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.simulation.Scenario.origin_log_file_path)
}
inline void Scenario::add_origin_log_file_path(std::string&& value) {
  origin_log_file_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.simulation.Scenario.origin_log_file_path)
}
inline void Scenario::add_origin_log_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  origin_log_file_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.simulation.Scenario.origin_log_file_path)
}
inline void Scenario::add_origin_log_file_path(const char* value, size_t size) {
  origin_log_file_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.simulation.Scenario.origin_log_file_path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Scenario::origin_log_file_path() const {
  // @@protoc_insertion_point(field_list:apollo.simulation.Scenario.origin_log_file_path)
  return origin_log_file_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Scenario::mutable_origin_log_file_path() {
  // @@protoc_insertion_point(field_mutable_list:apollo.simulation.Scenario.origin_log_file_path)
  return &origin_log_file_path_;
}

// optional double log_file_start_time = 7;
inline bool Scenario::_internal_has_log_file_start_time() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Scenario::has_log_file_start_time() const {
  return _internal_has_log_file_start_time();
}
inline void Scenario::clear_log_file_start_time() {
  log_file_start_time_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double Scenario::_internal_log_file_start_time() const {
  return log_file_start_time_;
}
inline double Scenario::log_file_start_time() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.log_file_start_time)
  return _internal_log_file_start_time();
}
inline void Scenario::_internal_set_log_file_start_time(double value) {
  _has_bits_[0] |= 0x00000800u;
  log_file_start_time_ = value;
}
inline void Scenario::set_log_file_start_time(double value) {
  _internal_set_log_file_start_time(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.log_file_start_time)
}

// optional double log_file_end_time = 8;
inline bool Scenario::_internal_has_log_file_end_time() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Scenario::has_log_file_end_time() const {
  return _internal_has_log_file_end_time();
}
inline void Scenario::clear_log_file_end_time() {
  log_file_end_time_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double Scenario::_internal_log_file_end_time() const {
  return log_file_end_time_;
}
inline double Scenario::log_file_end_time() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.log_file_end_time)
  return _internal_log_file_end_time();
}
inline void Scenario::_internal_set_log_file_end_time(double value) {
  _has_bits_[0] |= 0x00001000u;
  log_file_end_time_ = value;
}
inline void Scenario::set_log_file_end_time(double value) {
  _internal_set_log_file_end_time(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.log_file_end_time)
}

// optional .apollo.routing.RoutingRequest routing_request = 9;
inline bool Scenario::_internal_has_routing_request() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || routing_request_ != nullptr);
  return value;
}
inline bool Scenario::has_routing_request() const {
  return _internal_has_routing_request();
}
inline const ::apollo::routing::RoutingRequest& Scenario::_internal_routing_request() const {
  const ::apollo::routing::RoutingRequest* p = routing_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::routing::RoutingRequest&>(
      ::apollo::routing::_RoutingRequest_default_instance_);
}
inline const ::apollo::routing::RoutingRequest& Scenario::routing_request() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.routing_request)
  return _internal_routing_request();
}
inline void Scenario::unsafe_arena_set_allocated_routing_request(
    ::apollo::routing::RoutingRequest* routing_request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routing_request_);
  }
  routing_request_ = routing_request;
  if (routing_request) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.simulation.Scenario.routing_request)
}
inline ::apollo::routing::RoutingRequest* Scenario::release_routing_request() {
  _has_bits_[0] &= ~0x00000100u;
  ::apollo::routing::RoutingRequest* temp = routing_request_;
  routing_request_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::routing::RoutingRequest* Scenario::unsafe_arena_release_routing_request() {
  // @@protoc_insertion_point(field_release:apollo.simulation.Scenario.routing_request)
  _has_bits_[0] &= ~0x00000100u;
  ::apollo::routing::RoutingRequest* temp = routing_request_;
  routing_request_ = nullptr;
  return temp;
}
inline ::apollo::routing::RoutingRequest* Scenario::_internal_mutable_routing_request() {
  _has_bits_[0] |= 0x00000100u;
  if (routing_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::routing::RoutingRequest>(GetArena());
    routing_request_ = p;
  }
  return routing_request_;
}
inline ::apollo::routing::RoutingRequest* Scenario::mutable_routing_request() {
  // @@protoc_insertion_point(field_mutable:apollo.simulation.Scenario.routing_request)
  return _internal_mutable_routing_request();
}
inline void Scenario::set_allocated_routing_request(::apollo::routing::RoutingRequest* routing_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(routing_request_);
  }
  if (routing_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routing_request)->GetArena();
    if (message_arena != submessage_arena) {
      routing_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_request, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  routing_request_ = routing_request;
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Scenario.routing_request)
}

// optional string map_dir = 10;
inline bool Scenario::_internal_has_map_dir() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Scenario::has_map_dir() const {
  return _internal_has_map_dir();
}
inline void Scenario::clear_map_dir() {
  map_dir_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Scenario::map_dir() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.map_dir)
  return _internal_map_dir();
}
inline void Scenario::set_map_dir(const std::string& value) {
  _internal_set_map_dir(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.map_dir)
}
inline std::string* Scenario::mutable_map_dir() {
  // @@protoc_insertion_point(field_mutable:apollo.simulation.Scenario.map_dir)
  return _internal_mutable_map_dir();
}
inline const std::string& Scenario::_internal_map_dir() const {
  return map_dir_.Get();
}
inline void Scenario::_internal_set_map_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  map_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Scenario::set_map_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  map_dir_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.simulation.Scenario.map_dir)
}
inline void Scenario::set_map_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  map_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.simulation.Scenario.map_dir)
}
inline void Scenario::set_map_dir(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  map_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.simulation.Scenario.map_dir)
}
inline std::string* Scenario::_internal_mutable_map_dir() {
  _has_bits_[0] |= 0x00000004u;
  return map_dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Scenario::release_map_dir() {
  // @@protoc_insertion_point(field_release:apollo.simulation.Scenario.map_dir)
  if (!_internal_has_map_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return map_dir_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Scenario::set_allocated_map_dir(std::string* map_dir) {
  if (map_dir != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  map_dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map_dir,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Scenario.map_dir)
}

// optional .apollo.simulation.GradingConfig grade_config = 11;
inline bool Scenario::_internal_has_grade_config() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || grade_config_ != nullptr);
  return value;
}
inline bool Scenario::has_grade_config() const {
  return _internal_has_grade_config();
}
inline const ::apollo::simulation::GradingConfig& Scenario::_internal_grade_config() const {
  const ::apollo::simulation::GradingConfig* p = grade_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::simulation::GradingConfig&>(
      ::apollo::simulation::_GradingConfig_default_instance_);
}
inline const ::apollo::simulation::GradingConfig& Scenario::grade_config() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.grade_config)
  return _internal_grade_config();
}
inline void Scenario::unsafe_arena_set_allocated_grade_config(
    ::apollo::simulation::GradingConfig* grade_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grade_config_);
  }
  grade_config_ = grade_config;
  if (grade_config) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.simulation.Scenario.grade_config)
}
inline ::apollo::simulation::GradingConfig* Scenario::release_grade_config() {
  _has_bits_[0] &= ~0x00000200u;
  ::apollo::simulation::GradingConfig* temp = grade_config_;
  grade_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::simulation::GradingConfig* Scenario::unsafe_arena_release_grade_config() {
  // @@protoc_insertion_point(field_release:apollo.simulation.Scenario.grade_config)
  _has_bits_[0] &= ~0x00000200u;
  ::apollo::simulation::GradingConfig* temp = grade_config_;
  grade_config_ = nullptr;
  return temp;
}
inline ::apollo::simulation::GradingConfig* Scenario::_internal_mutable_grade_config() {
  _has_bits_[0] |= 0x00000200u;
  if (grade_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::simulation::GradingConfig>(GetArena());
    grade_config_ = p;
  }
  return grade_config_;
}
inline ::apollo::simulation::GradingConfig* Scenario::mutable_grade_config() {
  // @@protoc_insertion_point(field_mutable:apollo.simulation.Scenario.grade_config)
  return _internal_mutable_grade_config();
}
inline void Scenario::set_allocated_grade_config(::apollo::simulation::GradingConfig* grade_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(grade_config_);
  }
  if (grade_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grade_config)->GetArena();
    if (message_arena != submessage_arena) {
      grade_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grade_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  grade_config_ = grade_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Scenario.grade_config)
}

// repeated .apollo.simulation.AgentConfig agent = 12;
inline int Scenario::_internal_agent_size() const {
  return agent_.size();
}
inline int Scenario::agent_size() const {
  return _internal_agent_size();
}
inline ::apollo::simulation::AgentConfig* Scenario::mutable_agent(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.simulation.Scenario.agent)
  return agent_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::simulation::AgentConfig >*
Scenario::mutable_agent() {
  // @@protoc_insertion_point(field_mutable_list:apollo.simulation.Scenario.agent)
  return &agent_;
}
inline const ::apollo::simulation::AgentConfig& Scenario::_internal_agent(int index) const {
  return agent_.Get(index);
}
inline const ::apollo::simulation::AgentConfig& Scenario::agent(int index) const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.agent)
  return _internal_agent(index);
}
inline ::apollo::simulation::AgentConfig* Scenario::_internal_add_agent() {
  return agent_.Add();
}
inline ::apollo::simulation::AgentConfig* Scenario::add_agent() {
  // @@protoc_insertion_point(field_add:apollo.simulation.Scenario.agent)
  return _internal_add_agent();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::simulation::AgentConfig >&
Scenario::agent() const {
  // @@protoc_insertion_point(field_list:apollo.simulation.Scenario.agent)
  return agent_;
}

// repeated .apollo.simulation.DriveActionConfig drive_action_config = 13;
inline int Scenario::_internal_drive_action_config_size() const {
  return drive_action_config_.size();
}
inline int Scenario::drive_action_config_size() const {
  return _internal_drive_action_config_size();
}
inline void Scenario::clear_drive_action_config() {
  drive_action_config_.Clear();
}
inline ::apollo::simulation::DriveActionConfig* Scenario::mutable_drive_action_config(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.simulation.Scenario.drive_action_config)
  return drive_action_config_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::simulation::DriveActionConfig >*
Scenario::mutable_drive_action_config() {
  // @@protoc_insertion_point(field_mutable_list:apollo.simulation.Scenario.drive_action_config)
  return &drive_action_config_;
}
inline const ::apollo::simulation::DriveActionConfig& Scenario::_internal_drive_action_config(int index) const {
  return drive_action_config_.Get(index);
}
inline const ::apollo::simulation::DriveActionConfig& Scenario::drive_action_config(int index) const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.drive_action_config)
  return _internal_drive_action_config(index);
}
inline ::apollo::simulation::DriveActionConfig* Scenario::_internal_add_drive_action_config() {
  return drive_action_config_.Add();
}
inline ::apollo::simulation::DriveActionConfig* Scenario::add_drive_action_config() {
  // @@protoc_insertion_point(field_add:apollo.simulation.Scenario.drive_action_config)
  return _internal_add_drive_action_config();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::simulation::DriveActionConfig >&
Scenario::drive_action_config() const {
  // @@protoc_insertion_point(field_list:apollo.simulation.Scenario.drive_action_config)
  return drive_action_config_;
}

// optional .apollo.simulation.FuzzingConfig fuzzing_config = 14;
inline bool Scenario::_internal_has_fuzzing_config() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || fuzzing_config_ != nullptr);
  return value;
}
inline bool Scenario::has_fuzzing_config() const {
  return _internal_has_fuzzing_config();
}
inline void Scenario::clear_fuzzing_config() {
  if (fuzzing_config_ != nullptr) fuzzing_config_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::apollo::simulation::FuzzingConfig& Scenario::_internal_fuzzing_config() const {
  const ::apollo::simulation::FuzzingConfig* p = fuzzing_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::simulation::FuzzingConfig&>(
      ::apollo::simulation::_FuzzingConfig_default_instance_);
}
inline const ::apollo::simulation::FuzzingConfig& Scenario::fuzzing_config() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.fuzzing_config)
  return _internal_fuzzing_config();
}
inline void Scenario::unsafe_arena_set_allocated_fuzzing_config(
    ::apollo::simulation::FuzzingConfig* fuzzing_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fuzzing_config_);
  }
  fuzzing_config_ = fuzzing_config;
  if (fuzzing_config) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.simulation.Scenario.fuzzing_config)
}
inline ::apollo::simulation::FuzzingConfig* Scenario::release_fuzzing_config() {
  _has_bits_[0] &= ~0x00000400u;
  ::apollo::simulation::FuzzingConfig* temp = fuzzing_config_;
  fuzzing_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::simulation::FuzzingConfig* Scenario::unsafe_arena_release_fuzzing_config() {
  // @@protoc_insertion_point(field_release:apollo.simulation.Scenario.fuzzing_config)
  _has_bits_[0] &= ~0x00000400u;
  ::apollo::simulation::FuzzingConfig* temp = fuzzing_config_;
  fuzzing_config_ = nullptr;
  return temp;
}
inline ::apollo::simulation::FuzzingConfig* Scenario::_internal_mutable_fuzzing_config() {
  _has_bits_[0] |= 0x00000400u;
  if (fuzzing_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::simulation::FuzzingConfig>(GetArena());
    fuzzing_config_ = p;
  }
  return fuzzing_config_;
}
inline ::apollo::simulation::FuzzingConfig* Scenario::mutable_fuzzing_config() {
  // @@protoc_insertion_point(field_mutable:apollo.simulation.Scenario.fuzzing_config)
  return _internal_mutable_fuzzing_config();
}
inline void Scenario::set_allocated_fuzzing_config(::apollo::simulation::FuzzingConfig* fuzzing_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fuzzing_config_;
  }
  if (fuzzing_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fuzzing_config);
    if (message_arena != submessage_arena) {
      fuzzing_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fuzzing_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  fuzzing_config_ = fuzzing_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Scenario.fuzzing_config)
}

// optional int32 simulator_time = 15;
inline bool Scenario::_internal_has_simulator_time() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Scenario::has_simulator_time() const {
  return _internal_has_simulator_time();
}
inline void Scenario::clear_simulator_time() {
  simulator_time_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scenario::_internal_simulator_time() const {
  return simulator_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scenario::simulator_time() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.simulator_time)
  return _internal_simulator_time();
}
inline void Scenario::_internal_set_simulator_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  simulator_time_ = value;
}
inline void Scenario::set_simulator_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_simulator_time(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.simulator_time)
}

// optional double start_velocity = 16 [default = 0];
inline bool Scenario::_internal_has_start_velocity() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Scenario::has_start_velocity() const {
  return _internal_has_start_velocity();
}
inline void Scenario::clear_start_velocity() {
  start_velocity_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double Scenario::_internal_start_velocity() const {
  return start_velocity_;
}
inline double Scenario::start_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.start_velocity)
  return _internal_start_velocity();
}
inline void Scenario::_internal_set_start_velocity(double value) {
  _has_bits_[0] |= 0x00002000u;
  start_velocity_ = value;
}
inline void Scenario::set_start_velocity(double value) {
  _internal_set_start_velocity(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.start_velocity)
}

// optional double start_acceleration = 17 [default = 0];
inline bool Scenario::_internal_has_start_acceleration() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Scenario::has_start_acceleration() const {
  return _internal_has_start_acceleration();
}
inline void Scenario::clear_start_acceleration() {
  start_acceleration_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double Scenario::_internal_start_acceleration() const {
  return start_acceleration_;
}
inline double Scenario::start_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.start_acceleration)
  return _internal_start_acceleration();
}
inline void Scenario::_internal_set_start_acceleration(double value) {
  _has_bits_[0] |= 0x00004000u;
  start_acceleration_ = value;
}
inline void Scenario::set_start_acceleration(double value) {
  _internal_set_start_acceleration(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.start_acceleration)
}

// optional string base_grade_config_file = 18;
inline bool Scenario::_internal_has_base_grade_config_file() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Scenario::has_base_grade_config_file() const {
  return _internal_has_base_grade_config_file();
}
inline void Scenario::clear_base_grade_config_file() {
  base_grade_config_file_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Scenario::base_grade_config_file() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.base_grade_config_file)
  return _internal_base_grade_config_file();
}
inline void Scenario::set_base_grade_config_file(const std::string& value) {
  _internal_set_base_grade_config_file(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.base_grade_config_file)
}
inline std::string* Scenario::mutable_base_grade_config_file() {
  // @@protoc_insertion_point(field_mutable:apollo.simulation.Scenario.base_grade_config_file)
  return _internal_mutable_base_grade_config_file();
}
inline const std::string& Scenario::_internal_base_grade_config_file() const {
  return base_grade_config_file_.Get();
}
inline void Scenario::_internal_set_base_grade_config_file(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  base_grade_config_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Scenario::set_base_grade_config_file(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  base_grade_config_file_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.simulation.Scenario.base_grade_config_file)
}
inline void Scenario::set_base_grade_config_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  base_grade_config_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.simulation.Scenario.base_grade_config_file)
}
inline void Scenario::set_base_grade_config_file(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  base_grade_config_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.simulation.Scenario.base_grade_config_file)
}
inline std::string* Scenario::_internal_mutable_base_grade_config_file() {
  _has_bits_[0] |= 0x00000008u;
  return base_grade_config_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Scenario::release_base_grade_config_file() {
  // @@protoc_insertion_point(field_release:apollo.simulation.Scenario.base_grade_config_file)
  if (!_internal_has_base_grade_config_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return base_grade_config_file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Scenario::set_allocated_base_grade_config_file(std::string* base_grade_config_file) {
  if (base_grade_config_file != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  base_grade_config_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base_grade_config_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Scenario.base_grade_config_file)
}

// optional double detect_distance = 19 [default = 120];
inline bool Scenario::_internal_has_detect_distance() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool Scenario::has_detect_distance() const {
  return _internal_has_detect_distance();
}
inline void Scenario::clear_detect_distance() {
  detect_distance_ = 120;
  _has_bits_[0] &= ~0x00080000u;
}
inline double Scenario::_internal_detect_distance() const {
  return detect_distance_;
}
inline double Scenario::detect_distance() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.detect_distance)
  return _internal_detect_distance();
}
inline void Scenario::_internal_set_detect_distance(double value) {
  _has_bits_[0] |= 0x00080000u;
  detect_distance_ = value;
}
inline void Scenario::set_detect_distance(double value) {
  _internal_set_detect_distance(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.detect_distance)
}

// optional .apollo.simulation.Scenario.DefaultLightBehavior default_light_behavior = 20 [default = ALWAYS_GREEN];
inline bool Scenario::_internal_has_default_light_behavior() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Scenario::has_default_light_behavior() const {
  return _internal_has_default_light_behavior();
}
inline void Scenario::clear_default_light_behavior() {
  default_light_behavior_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::apollo::simulation::Scenario_DefaultLightBehavior Scenario::_internal_default_light_behavior() const {
  return static_cast< ::apollo::simulation::Scenario_DefaultLightBehavior >(default_light_behavior_);
}
inline ::apollo::simulation::Scenario_DefaultLightBehavior Scenario::default_light_behavior() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.default_light_behavior)
  return _internal_default_light_behavior();
}
inline void Scenario::_internal_set_default_light_behavior(::apollo::simulation::Scenario_DefaultLightBehavior value) {
  assert(::apollo::simulation::Scenario_DefaultLightBehavior_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  default_light_behavior_ = value;
}
inline void Scenario::set_default_light_behavior(::apollo::simulation::Scenario_DefaultLightBehavior value) {
  _internal_set_default_light_behavior(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.default_light_behavior)
}

// optional double red_time = 21 [default = 15];
inline bool Scenario::_internal_has_red_time() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool Scenario::has_red_time() const {
  return _internal_has_red_time();
}
inline void Scenario::clear_red_time() {
  red_time_ = 15;
  _has_bits_[0] &= ~0x00100000u;
}
inline double Scenario::_internal_red_time() const {
  return red_time_;
}
inline double Scenario::red_time() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.red_time)
  return _internal_red_time();
}
inline void Scenario::_internal_set_red_time(double value) {
  _has_bits_[0] |= 0x00100000u;
  red_time_ = value;
}
inline void Scenario::set_red_time(double value) {
  _internal_set_red_time(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.red_time)
}

// optional double green_time = 22 [default = 13];
inline bool Scenario::_internal_has_green_time() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool Scenario::has_green_time() const {
  return _internal_has_green_time();
}
inline void Scenario::clear_green_time() {
  green_time_ = 13;
  _has_bits_[0] &= ~0x00200000u;
}
inline double Scenario::_internal_green_time() const {
  return green_time_;
}
inline double Scenario::green_time() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.green_time)
  return _internal_green_time();
}
inline void Scenario::_internal_set_green_time(double value) {
  _has_bits_[0] |= 0x00200000u;
  green_time_ = value;
}
inline void Scenario::set_green_time(double value) {
  _internal_set_green_time(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.green_time)
}

// optional double yellow_time = 23 [default = 3];
inline bool Scenario::_internal_has_yellow_time() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool Scenario::has_yellow_time() const {
  return _internal_has_yellow_time();
}
inline void Scenario::clear_yellow_time() {
  yellow_time_ = 3;
  _has_bits_[0] &= ~0x00400000u;
}
inline double Scenario::_internal_yellow_time() const {
  return yellow_time_;
}
inline double Scenario::yellow_time() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.yellow_time)
  return _internal_yellow_time();
}
inline void Scenario::_internal_set_yellow_time(double value) {
  _has_bits_[0] |= 0x00400000u;
  yellow_time_ = value;
}
inline void Scenario::set_yellow_time(double value) {
  _internal_set_yellow_time(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.yellow_time)
}

// repeated .apollo.simulation.Scenario.TL traffic_lights = 24;
inline int Scenario::_internal_traffic_lights_size() const {
  return traffic_lights_.size();
}
inline int Scenario::traffic_lights_size() const {
  return _internal_traffic_lights_size();
}
inline void Scenario::clear_traffic_lights() {
  traffic_lights_.Clear();
}
inline ::apollo::simulation::Scenario_TL* Scenario::mutable_traffic_lights(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.simulation.Scenario.traffic_lights)
  return traffic_lights_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::simulation::Scenario_TL >*
Scenario::mutable_traffic_lights() {
  // @@protoc_insertion_point(field_mutable_list:apollo.simulation.Scenario.traffic_lights)
  return &traffic_lights_;
}
inline const ::apollo::simulation::Scenario_TL& Scenario::_internal_traffic_lights(int index) const {
  return traffic_lights_.Get(index);
}
inline const ::apollo::simulation::Scenario_TL& Scenario::traffic_lights(int index) const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.traffic_lights)
  return _internal_traffic_lights(index);
}
inline ::apollo::simulation::Scenario_TL* Scenario::_internal_add_traffic_lights() {
  return traffic_lights_.Add();
}
inline ::apollo::simulation::Scenario_TL* Scenario::add_traffic_lights() {
  // @@protoc_insertion_point(field_add:apollo.simulation.Scenario.traffic_lights)
  return _internal_add_traffic_lights();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::simulation::Scenario_TL >&
Scenario::traffic_lights() const {
  // @@protoc_insertion_point(field_list:apollo.simulation.Scenario.traffic_lights)
  return traffic_lights_;
}

// optional .apollo.simulation.Scenario.Mode mode = 25 [default = WORLDSIM];
inline bool Scenario::_internal_has_mode() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Scenario::has_mode() const {
  return _internal_has_mode();
}
inline void Scenario::clear_mode() {
  mode_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::apollo::simulation::Scenario_Mode Scenario::_internal_mode() const {
  return static_cast< ::apollo::simulation::Scenario_Mode >(mode_);
}
inline ::apollo::simulation::Scenario_Mode Scenario::mode() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.mode)
  return _internal_mode();
}
inline void Scenario::_internal_set_mode(::apollo::simulation::Scenario_Mode value) {
  assert(::apollo::simulation::Scenario_Mode_IsValid(value));
  _has_bits_[0] |= 0x00020000u;
  mode_ = value;
}
inline void Scenario::set_mode(::apollo::simulation::Scenario_Mode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.mode)
}

// repeated string select_default_metric = 26;
inline int Scenario::_internal_select_default_metric_size() const {
  return select_default_metric_.size();
}
inline int Scenario::select_default_metric_size() const {
  return _internal_select_default_metric_size();
}
inline void Scenario::clear_select_default_metric() {
  select_default_metric_.Clear();
}
inline std::string* Scenario::add_select_default_metric() {
  // @@protoc_insertion_point(field_add_mutable:apollo.simulation.Scenario.select_default_metric)
  return _internal_add_select_default_metric();
}
inline const std::string& Scenario::_internal_select_default_metric(int index) const {
  return select_default_metric_.Get(index);
}
inline const std::string& Scenario::select_default_metric(int index) const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.select_default_metric)
  return _internal_select_default_metric(index);
}
inline std::string* Scenario::mutable_select_default_metric(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.simulation.Scenario.select_default_metric)
  return select_default_metric_.Mutable(index);
}
inline void Scenario::set_select_default_metric(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.select_default_metric)
  select_default_metric_.Mutable(index)->assign(value);
}
inline void Scenario::set_select_default_metric(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.select_default_metric)
  select_default_metric_.Mutable(index)->assign(std::move(value));
}
inline void Scenario::set_select_default_metric(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  select_default_metric_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.simulation.Scenario.select_default_metric)
}
inline void Scenario::set_select_default_metric(int index, const char* value, size_t size) {
  select_default_metric_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.simulation.Scenario.select_default_metric)
}
inline std::string* Scenario::_internal_add_select_default_metric() {
  return select_default_metric_.Add();
}
inline void Scenario::add_select_default_metric(const std::string& value) {
  select_default_metric_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.simulation.Scenario.select_default_metric)
}
inline void Scenario::add_select_default_metric(std::string&& value) {
  select_default_metric_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.simulation.Scenario.select_default_metric)
}
inline void Scenario::add_select_default_metric(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  select_default_metric_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.simulation.Scenario.select_default_metric)
}
inline void Scenario::add_select_default_metric(const char* value, size_t size) {
  select_default_metric_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.simulation.Scenario.select_default_metric)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Scenario::select_default_metric() const {
  // @@protoc_insertion_point(field_list:apollo.simulation.Scenario.select_default_metric)
  return select_default_metric_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Scenario::mutable_select_default_metric() {
  // @@protoc_insertion_point(field_mutable_list:apollo.simulation.Scenario.select_default_metric)
  return &select_default_metric_;
}

// repeated string deselect_default_metric = 27;
inline int Scenario::_internal_deselect_default_metric_size() const {
  return deselect_default_metric_.size();
}
inline int Scenario::deselect_default_metric_size() const {
  return _internal_deselect_default_metric_size();
}
inline void Scenario::clear_deselect_default_metric() {
  deselect_default_metric_.Clear();
}
inline std::string* Scenario::add_deselect_default_metric() {
  // @@protoc_insertion_point(field_add_mutable:apollo.simulation.Scenario.deselect_default_metric)
  return _internal_add_deselect_default_metric();
}
inline const std::string& Scenario::_internal_deselect_default_metric(int index) const {
  return deselect_default_metric_.Get(index);
}
inline const std::string& Scenario::deselect_default_metric(int index) const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.deselect_default_metric)
  return _internal_deselect_default_metric(index);
}
inline std::string* Scenario::mutable_deselect_default_metric(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.simulation.Scenario.deselect_default_metric)
  return deselect_default_metric_.Mutable(index);
}
inline void Scenario::set_deselect_default_metric(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.deselect_default_metric)
  deselect_default_metric_.Mutable(index)->assign(value);
}
inline void Scenario::set_deselect_default_metric(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.deselect_default_metric)
  deselect_default_metric_.Mutable(index)->assign(std::move(value));
}
inline void Scenario::set_deselect_default_metric(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deselect_default_metric_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.simulation.Scenario.deselect_default_metric)
}
inline void Scenario::set_deselect_default_metric(int index, const char* value, size_t size) {
  deselect_default_metric_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.simulation.Scenario.deselect_default_metric)
}
inline std::string* Scenario::_internal_add_deselect_default_metric() {
  return deselect_default_metric_.Add();
}
inline void Scenario::add_deselect_default_metric(const std::string& value) {
  deselect_default_metric_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.simulation.Scenario.deselect_default_metric)
}
inline void Scenario::add_deselect_default_metric(std::string&& value) {
  deselect_default_metric_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.simulation.Scenario.deselect_default_metric)
}
inline void Scenario::add_deselect_default_metric(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deselect_default_metric_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.simulation.Scenario.deselect_default_metric)
}
inline void Scenario::add_deselect_default_metric(const char* value, size_t size) {
  deselect_default_metric_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.simulation.Scenario.deselect_default_metric)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Scenario::deselect_default_metric() const {
  // @@protoc_insertion_point(field_list:apollo.simulation.Scenario.deselect_default_metric)
  return deselect_default_metric_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Scenario::mutable_deselect_default_metric() {
  // @@protoc_insertion_point(field_mutable_list:apollo.simulation.Scenario.deselect_default_metric)
  return &deselect_default_metric_;
}

// optional double backtrack_time = 28 [default = 1];
inline bool Scenario::_internal_has_backtrack_time() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool Scenario::has_backtrack_time() const {
  return _internal_has_backtrack_time();
}
inline void Scenario::clear_backtrack_time() {
  backtrack_time_ = 1;
  _has_bits_[0] &= ~0x00800000u;
}
inline double Scenario::_internal_backtrack_time() const {
  return backtrack_time_;
}
inline double Scenario::backtrack_time() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.backtrack_time)
  return _internal_backtrack_time();
}
inline void Scenario::_internal_set_backtrack_time(double value) {
  _has_bits_[0] |= 0x00800000u;
  backtrack_time_ = value;
}
inline void Scenario::set_backtrack_time(double value) {
  _internal_set_backtrack_time(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.backtrack_time)
}

// optional string vehicle = 29;
inline bool Scenario::_internal_has_vehicle() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Scenario::has_vehicle() const {
  return _internal_has_vehicle();
}
inline void Scenario::clear_vehicle() {
  vehicle_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Scenario::vehicle() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.vehicle)
  return _internal_vehicle();
}
inline void Scenario::set_vehicle(const std::string& value) {
  _internal_set_vehicle(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.vehicle)
}
inline std::string* Scenario::mutable_vehicle() {
  // @@protoc_insertion_point(field_mutable:apollo.simulation.Scenario.vehicle)
  return _internal_mutable_vehicle();
}
inline const std::string& Scenario::_internal_vehicle() const {
  return vehicle_.Get();
}
inline void Scenario::_internal_set_vehicle(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  vehicle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Scenario::set_vehicle(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  vehicle_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.simulation.Scenario.vehicle)
}
inline void Scenario::set_vehicle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  vehicle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.simulation.Scenario.vehicle)
}
inline void Scenario::set_vehicle(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  vehicle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.simulation.Scenario.vehicle)
}
inline std::string* Scenario::_internal_mutable_vehicle() {
  _has_bits_[0] |= 0x00000010u;
  return vehicle_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Scenario::release_vehicle() {
  // @@protoc_insertion_point(field_release:apollo.simulation.Scenario.vehicle)
  if (!_internal_has_vehicle()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return vehicle_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Scenario::set_allocated_vehicle(std::string* vehicle) {
  if (vehicle != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  vehicle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vehicle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Scenario.vehicle)
}

// optional bool traffic_flow = 30 [default = false];
inline bool Scenario::_internal_has_traffic_flow() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool Scenario::has_traffic_flow() const {
  return _internal_has_traffic_flow();
}
inline void Scenario::clear_traffic_flow() {
  traffic_flow_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool Scenario::_internal_traffic_flow() const {
  return traffic_flow_;
}
inline bool Scenario::traffic_flow() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Scenario.traffic_flow)
  return _internal_traffic_flow();
}
inline void Scenario::_internal_set_traffic_flow(bool value) {
  _has_bits_[0] |= 0x00040000u;
  traffic_flow_ = value;
}
inline void Scenario::set_traffic_flow(bool value) {
  _internal_set_traffic_flow(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Scenario.traffic_flow)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace simulation
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::simulation::Scenario_TL_TriggerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::simulation::Scenario_TL_TriggerType>() {
  return ::apollo::simulation::Scenario_TL_TriggerType_descriptor();
}
template <> struct is_proto_enum< ::apollo::simulation::Scenario_DefaultLightBehavior> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::simulation::Scenario_DefaultLightBehavior>() {
  return ::apollo::simulation::Scenario_DefaultLightBehavior_descriptor();
}
template <> struct is_proto_enum< ::apollo::simulation::Scenario_Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::simulation::Scenario_Mode>() {
  return ::apollo::simulation::Scenario_Mode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto
