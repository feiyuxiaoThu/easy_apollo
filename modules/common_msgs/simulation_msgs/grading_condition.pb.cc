// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common_msgs/simulation_msgs/grading_condition.proto

#include "modules/common_msgs/simulation_msgs/grading_condition.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LineSegment_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polygon_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AbnormalStopCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccelerationCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AntiCheatingCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BrakeTapCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CentripetalAccelerationCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeLaneAtJunctionCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<29> scc_info_CheckpointCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CrosswalkStopCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CrosswalkYieldCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DistToEndCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DistToLaneCenterCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FollowAndBypassCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GradePlanning_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JerkCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyPoint_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KeyPointCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LimitedTimeParkingCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectOverlapCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObstacleBypassCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OnRoadCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedLightStopCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegionOverlapCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegionOverlapLWCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoutingCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RunRedLightCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RunStopSignCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeedCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeedbumpLimitCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpinCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeLimitCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkingZoneAvoidLimitCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto;
namespace apollo {
namespace simulation {
class ConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Condition> _instance;
} _Condition_default_instance_;
class GradePlanningDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GradePlanning> _instance;
} _GradePlanning_default_instance_;
class LogicalConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogicalCondition> _instance;
} _LogicalCondition_default_instance_;
class SpeedConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpeedCondition> _instance;
} _SpeedCondition_default_instance_;
class CentripetalAccelerationConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CentripetalAccelerationCondition> _instance;
} _CentripetalAccelerationCondition_default_instance_;
class AccelerationConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccelerationCondition> _instance;
} _AccelerationCondition_default_instance_;
class JerkConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JerkCondition> _instance;
} _JerkCondition_default_instance_;
class SpinConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpinCondition> _instance;
} _SpinCondition_default_instance_;
class ObjectOverlapConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectOverlapCondition> _instance;
} _ObjectOverlapCondition_default_instance_;
class RegionOverlapConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegionOverlapCondition> _instance;
} _RegionOverlapCondition_default_instance_;
class RegionOverlapLWConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegionOverlapLWCondition> _instance;
} _RegionOverlapLWCondition_default_instance_;
class OnRoadConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OnRoadCondition> _instance;
} _OnRoadCondition_default_instance_;
class RunRedLightConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunRedLightCondition> _instance;
} _RunRedLightCondition_default_instance_;
class RedLightStopConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedLightStopCondition> _instance;
} _RedLightStopCondition_default_instance_;
class ChangeLaneAtJunctionConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangeLaneAtJunctionCondition> _instance;
} _ChangeLaneAtJunctionCondition_default_instance_;
class RoutingConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutingCondition> _instance;
} _RoutingCondition_default_instance_;
class CrosswalkYieldConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CrosswalkYieldCondition> _instance;
} _CrosswalkYieldCondition_default_instance_;
class CrosswalkStopConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CrosswalkStopCondition> _instance;
} _CrosswalkStopCondition_default_instance_;
class AbnormalStopConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AbnormalStopCondition> _instance;
} _AbnormalStopCondition_default_instance_;
class BrakeTapConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BrakeTapCondition> _instance;
} _BrakeTapCondition_default_instance_;
class RunStopSignConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunStopSignCondition> _instance;
} _RunStopSignCondition_default_instance_;
class CheckpointConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckpointCondition> _instance;
} _CheckpointCondition_default_instance_;
class DistToEndConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DistToEndCondition> _instance;
} _DistToEndCondition_default_instance_;
class DistToLaneCenterConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DistToLaneCenterCondition> _instance;
} _DistToLaneCenterCondition_default_instance_;
class TimeLimitConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeLimitCondition> _instance;
} _TimeLimitCondition_default_instance_;
class SpeedbumpLimitConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpeedbumpLimitCondition> _instance;
} _SpeedbumpLimitCondition_default_instance_;
class WorkingZoneAvoidLimitConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkingZoneAvoidLimitCondition> _instance;
} _WorkingZoneAvoidLimitCondition_default_instance_;
class LimitedTimeParkingConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LimitedTimeParkingCondition> _instance;
} _LimitedTimeParkingCondition_default_instance_;
class FollowAndBypassConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FollowAndBypassCondition> _instance;
} _FollowAndBypassCondition_default_instance_;
class ObstacleBypassConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObstacleBypassCondition> _instance;
} _ObstacleBypassCondition_default_instance_;
class AntiCheatingConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AntiCheatingCondition> _instance;
} _AntiCheatingCondition_default_instance_;
class KeyPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyPoint> _instance;
} _KeyPoint_default_instance_;
class KeyPointConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyPointCondition> _instance;
} _KeyPointCondition_default_instance_;
}  // namespace simulation
}  // namespace apollo
static void InitDefaultsscc_info_AbnormalStopCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_AbnormalStopCondition_default_instance_;
    new (ptr) ::apollo::simulation::AbnormalStopCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AbnormalStopCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AbnormalStopCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {}};

static void InitDefaultsscc_info_AccelerationCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_AccelerationCondition_default_instance_;
    new (ptr) ::apollo::simulation::AccelerationCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccelerationCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccelerationCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {}};

static void InitDefaultsscc_info_AntiCheatingCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_AntiCheatingCondition_default_instance_;
    new (ptr) ::apollo::simulation::AntiCheatingCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AntiCheatingCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AntiCheatingCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {}};

static void InitDefaultsscc_info_BrakeTapCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_BrakeTapCondition_default_instance_;
    new (ptr) ::apollo::simulation::BrakeTapCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BrakeTapCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BrakeTapCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {}};

static void InitDefaultsscc_info_CentripetalAccelerationCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_CentripetalAccelerationCondition_default_instance_;
    new (ptr) ::apollo::simulation::CentripetalAccelerationCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CentripetalAccelerationCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CentripetalAccelerationCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {}};

static void InitDefaultsscc_info_ChangeLaneAtJunctionCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_ChangeLaneAtJunctionCondition_default_instance_;
    new (ptr) ::apollo::simulation::ChangeLaneAtJunctionCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeLaneAtJunctionCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChangeLaneAtJunctionCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {}};

static void InitDefaultsscc_info_CheckpointCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_Condition_default_instance_;
    new (ptr) ::apollo::simulation::Condition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::apollo::simulation::_LogicalCondition_default_instance_;
    new (ptr) ::apollo::simulation::LogicalCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::apollo::simulation::_CheckpointCondition_default_instance_;
    new (ptr) ::apollo::simulation::CheckpointCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<29> scc_info_CheckpointCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 29, 0, InitDefaultsscc_info_CheckpointCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {
      &scc_info_SpeedCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_AccelerationCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_JerkCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_ObjectOverlapCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_RegionOverlapCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_RegionOverlapLWCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_SpinCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_OnRoadCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_RunRedLightCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_ChangeLaneAtJunctionCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_RoutingCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_CrosswalkYieldCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_AbnormalStopCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_BrakeTapCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_RunStopSignCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_DistToEndCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_DistToLaneCenterCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_CrosswalkStopCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_RedLightStopCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_SpeedbumpLimitCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_WorkingZoneAvoidLimitCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_LimitedTimeParkingCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_FollowAndBypassCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_ObstacleBypassCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_CentripetalAccelerationCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_TimeLimitCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_AntiCheatingCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_KeyPointCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
      &scc_info_GradePlanning_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,}};

static void InitDefaultsscc_info_CrosswalkStopCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_CrosswalkStopCondition_default_instance_;
    new (ptr) ::apollo::simulation::CrosswalkStopCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CrosswalkStopCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CrosswalkStopCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {}};

static void InitDefaultsscc_info_CrosswalkYieldCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_CrosswalkYieldCondition_default_instance_;
    new (ptr) ::apollo::simulation::CrosswalkYieldCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CrosswalkYieldCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CrosswalkYieldCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {}};

static void InitDefaultsscc_info_DistToEndCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_DistToEndCondition_default_instance_;
    new (ptr) ::apollo::simulation::DistToEndCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DistToEndCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DistToEndCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {}};

static void InitDefaultsscc_info_DistToLaneCenterCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_DistToLaneCenterCondition_default_instance_;
    new (ptr) ::apollo::simulation::DistToLaneCenterCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DistToLaneCenterCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DistToLaneCenterCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {}};

static void InitDefaultsscc_info_FollowAndBypassCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_FollowAndBypassCondition_default_instance_;
    new (ptr) ::apollo::simulation::FollowAndBypassCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FollowAndBypassCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FollowAndBypassCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {
      &scc_info_Polygon_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto.base,
      &scc_info_LineSegment_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GradePlanning_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_GradePlanning_default_instance_;
    new (ptr) ::apollo::simulation::GradePlanning();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GradePlanning_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GradePlanning_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {}};

static void InitDefaultsscc_info_JerkCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_JerkCondition_default_instance_;
    new (ptr) ::apollo::simulation::JerkCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JerkCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JerkCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {}};

static void InitDefaultsscc_info_KeyPoint_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_KeyPoint_default_instance_;
    new (ptr) ::apollo::simulation::KeyPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyPoint_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeyPoint_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {}};

static void InitDefaultsscc_info_KeyPointCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_KeyPointCondition_default_instance_;
    new (ptr) ::apollo::simulation::KeyPointCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KeyPointCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KeyPointCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {
      &scc_info_KeyPoint_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,}};

static void InitDefaultsscc_info_LimitedTimeParkingCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_LimitedTimeParkingCondition_default_instance_;
    new (ptr) ::apollo::simulation::LimitedTimeParkingCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LimitedTimeParkingCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LimitedTimeParkingCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {
      &scc_info_Polygon_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_ObjectOverlapCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_ObjectOverlapCondition_default_instance_;
    new (ptr) ::apollo::simulation::ObjectOverlapCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectOverlapCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObjectOverlapCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {}};

static void InitDefaultsscc_info_ObstacleBypassCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_ObstacleBypassCondition_default_instance_;
    new (ptr) ::apollo::simulation::ObstacleBypassCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObstacleBypassCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObstacleBypassCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {
      &scc_info_Polygon_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_OnRoadCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_OnRoadCondition_default_instance_;
    new (ptr) ::apollo::simulation::OnRoadCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OnRoadCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OnRoadCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {}};

static void InitDefaultsscc_info_RedLightStopCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_RedLightStopCondition_default_instance_;
    new (ptr) ::apollo::simulation::RedLightStopCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedLightStopCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedLightStopCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {}};

static void InitDefaultsscc_info_RegionOverlapCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_RegionOverlapCondition_default_instance_;
    new (ptr) ::apollo::simulation::RegionOverlapCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegionOverlapCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegionOverlapCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {}};

static void InitDefaultsscc_info_RegionOverlapLWCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_RegionOverlapLWCondition_default_instance_;
    new (ptr) ::apollo::simulation::RegionOverlapLWCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegionOverlapLWCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegionOverlapLWCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {}};

static void InitDefaultsscc_info_RoutingCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_RoutingCondition_default_instance_;
    new (ptr) ::apollo::simulation::RoutingCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoutingCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoutingCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {}};

static void InitDefaultsscc_info_RunRedLightCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_RunRedLightCondition_default_instance_;
    new (ptr) ::apollo::simulation::RunRedLightCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RunRedLightCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RunRedLightCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {}};

static void InitDefaultsscc_info_RunStopSignCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_RunStopSignCondition_default_instance_;
    new (ptr) ::apollo::simulation::RunStopSignCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RunStopSignCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RunStopSignCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {}};

static void InitDefaultsscc_info_SpeedCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_SpeedCondition_default_instance_;
    new (ptr) ::apollo::simulation::SpeedCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeedCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpeedCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {}};

static void InitDefaultsscc_info_SpeedbumpLimitCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_SpeedbumpLimitCondition_default_instance_;
    new (ptr) ::apollo::simulation::SpeedbumpLimitCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeedbumpLimitCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpeedbumpLimitCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {}};

static void InitDefaultsscc_info_SpinCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_SpinCondition_default_instance_;
    new (ptr) ::apollo::simulation::SpinCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpinCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpinCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {}};

static void InitDefaultsscc_info_TimeLimitCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_TimeLimitCondition_default_instance_;
    new (ptr) ::apollo::simulation::TimeLimitCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeLimitCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimeLimitCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {}};

static void InitDefaultsscc_info_WorkingZoneAvoidLimitCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::simulation::_WorkingZoneAvoidLimitCondition_default_instance_;
    new (ptr) ::apollo::simulation::WorkingZoneAvoidLimitCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkingZoneAvoidLimitCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WorkingZoneAvoidLimitCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto}, {
      &scc_info_Polygon_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto[33];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::Condition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::Condition, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::Condition, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::Condition, grade_planning_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::Condition, condition_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::GradePlanning, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::GradePlanning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::GradePlanning, duration_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::GradePlanning, update_obstacles_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::GradePlanning, use_planning_as_history_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::LogicalCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::LogicalCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::LogicalCondition, operator_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::LogicalCondition, sub_condition_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::SpeedCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::SpeedCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::SpeedCondition, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::SpeedCondition, min_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::SpeedCondition, max_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::SpeedCondition, use_score_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::SpeedCondition, single_deduction_),
  0,
  2,
  3,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::CentripetalAccelerationCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::CentripetalAccelerationCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::CentripetalAccelerationCondition, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::CentripetalAccelerationCondition, max_centripetal_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::CentripetalAccelerationCondition, use_score_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::CentripetalAccelerationCondition, single_deduction_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::AccelerationCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::AccelerationCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::AccelerationCondition, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::AccelerationCondition, min_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::AccelerationCondition, max_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::AccelerationCondition, use_score_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::AccelerationCondition, single_deduction_),
  0,
  2,
  3,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::JerkCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::JerkCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::JerkCondition, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::JerkCondition, min_jerk_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::JerkCondition, max_jerk_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::SpinCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::SpinCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::SpinCondition, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::SpinCondition, min_spin_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::SpinCondition, max_spin_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::ObjectOverlapCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::ObjectOverlapCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::ObjectOverlapCondition, source_object_ids_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::ObjectOverlapCondition, target_object_ids_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::ObjectOverlapCondition, distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::ObjectOverlapCondition, direction_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::ObjectOverlapCondition, ignore_object_ids_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::ObjectOverlapCondition, use_score_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RegionOverlapCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RegionOverlapCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RegionOverlapCondition, object_ids_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RegionOverlapCondition, region_corner_xy_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RegionOverlapCondition, require_fully_contain_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RegionOverlapCondition, heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RegionOverlapCondition, use_score_),
  0,
  ~0u,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RegionOverlapLWCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RegionOverlapLWCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RegionOverlapLWCondition, object_ids_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RegionOverlapLWCondition, x_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RegionOverlapLWCondition, y_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RegionOverlapLWCondition, length_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RegionOverlapLWCondition, width_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RegionOverlapLWCondition, require_fully_contain_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RegionOverlapLWCondition, use_score_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::OnRoadCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::OnRoadCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::OnRoadCondition, use_road_boundary_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::OnRoadCondition, use_score_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RunRedLightCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RunRedLightCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RunRedLightCondition, use_score_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RedLightStopCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RedLightStopCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RedLightStopCondition, min_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RedLightStopCondition, max_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RedLightStopCondition, use_score_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RedLightStopCondition, single_deduction_),
  1,
  2,
  0,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::ChangeLaneAtJunctionCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RoutingCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::CrosswalkYieldCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::CrosswalkStopCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::CrosswalkStopCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::CrosswalkStopCondition, min_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::CrosswalkStopCondition, max_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::CrosswalkStopCondition, use_score_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::CrosswalkStopCondition, single_deduction_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::AbnormalStopCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::AbnormalStopCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::AbnormalStopCondition, duration_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::AbnormalStopCondition, distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::AbnormalStopCondition, x_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::AbnormalStopCondition, y_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::BrakeTapCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::BrakeTapCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::BrakeTapCondition, min_duration_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::BrakeTapCondition, max_duration_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RunStopSignCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RunStopSignCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::RunStopSignCondition, distance_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::CheckpointCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::CheckpointCondition, checkpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::DistToEndCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::DistToLaneCenterCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::TimeLimitCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::TimeLimitCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::TimeLimitCondition, timeout_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::TimeLimitCondition, use_score_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::SpeedbumpLimitCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::SpeedbumpLimitCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::SpeedbumpLimitCondition, speedbump_half_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::SpeedbumpLimitCondition, max_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::SpeedbumpLimitCondition, deduction_speed_unit_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::SpeedbumpLimitCondition, use_score_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::SpeedbumpLimitCondition, single_deduction_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::WorkingZoneAvoidLimitCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::WorkingZoneAvoidLimitCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::WorkingZoneAvoidLimitCondition, working_zone_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::WorkingZoneAvoidLimitCondition, max_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::WorkingZoneAvoidLimitCondition, whole_area_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::WorkingZoneAvoidLimitCondition, use_score_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::WorkingZoneAvoidLimitCondition, single_deduction_),
  ~0u,
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::LimitedTimeParkingCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::LimitedTimeParkingCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::LimitedTimeParkingCondition, parking_lot_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::LimitedTimeParkingCondition, use_score_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::LimitedTimeParkingCondition, single_deduction_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::FollowAndBypassCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::FollowAndBypassCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::FollowAndBypassCondition, test_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::FollowAndBypassCondition, divide_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::FollowAndBypassCondition, obstacle_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::FollowAndBypassCondition, end_line_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::FollowAndBypassCondition, use_score_),
  1,
  4,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::ObstacleBypassCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::ObstacleBypassCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::ObstacleBypassCondition, test_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::ObstacleBypassCondition, obstacle_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::ObstacleBypassCondition, min_lateral_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::ObstacleBypassCondition, max_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::ObstacleBypassCondition, use_score_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::ObstacleBypassCondition, single_deduction_),
  1,
  0,
  3,
  4,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::AntiCheatingCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::AntiCheatingCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::AntiCheatingCondition, use_score_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::KeyPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::KeyPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::KeyPoint, x_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::KeyPoint, y_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::KeyPoint, z_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::KeyPoint, radius_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::KeyPointCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::KeyPointCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::KeyPointCondition, use_score_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::KeyPointCondition, in_order_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::KeyPointCondition, radius_),
  PROTOBUF_FIELD_OFFSET(::apollo::simulation::KeyPointCondition, point_),
  0,
  1,
  2,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 37, sizeof(::apollo::simulation::Condition)},
  { 68, 76, sizeof(::apollo::simulation::GradePlanning)},
  { 79, 86, sizeof(::apollo::simulation::LogicalCondition)},
  { 88, 98, sizeof(::apollo::simulation::SpeedCondition)},
  { 103, 112, sizeof(::apollo::simulation::CentripetalAccelerationCondition)},
  { 116, 126, sizeof(::apollo::simulation::AccelerationCondition)},
  { 131, 139, sizeof(::apollo::simulation::JerkCondition)},
  { 142, 150, sizeof(::apollo::simulation::SpinCondition)},
  { 153, 164, sizeof(::apollo::simulation::ObjectOverlapCondition)},
  { 170, 180, sizeof(::apollo::simulation::RegionOverlapCondition)},
  { 185, 197, sizeof(::apollo::simulation::RegionOverlapLWCondition)},
  { 204, 211, sizeof(::apollo::simulation::OnRoadCondition)},
  { 213, 219, sizeof(::apollo::simulation::RunRedLightCondition)},
  { 220, 229, sizeof(::apollo::simulation::RedLightStopCondition)},
  { 233, -1, sizeof(::apollo::simulation::ChangeLaneAtJunctionCondition)},
  { 238, -1, sizeof(::apollo::simulation::RoutingCondition)},
  { 243, -1, sizeof(::apollo::simulation::CrosswalkYieldCondition)},
  { 248, 257, sizeof(::apollo::simulation::CrosswalkStopCondition)},
  { 261, 270, sizeof(::apollo::simulation::AbnormalStopCondition)},
  { 274, 281, sizeof(::apollo::simulation::BrakeTapCondition)},
  { 283, 289, sizeof(::apollo::simulation::RunStopSignCondition)},
  { 290, -1, sizeof(::apollo::simulation::CheckpointCondition)},
  { 296, -1, sizeof(::apollo::simulation::DistToEndCondition)},
  { 301, -1, sizeof(::apollo::simulation::DistToLaneCenterCondition)},
  { 306, 313, sizeof(::apollo::simulation::TimeLimitCondition)},
  { 315, 325, sizeof(::apollo::simulation::SpeedbumpLimitCondition)},
  { 330, 340, sizeof(::apollo::simulation::WorkingZoneAvoidLimitCondition)},
  { 345, 353, sizeof(::apollo::simulation::LimitedTimeParkingCondition)},
  { 356, 366, sizeof(::apollo::simulation::FollowAndBypassCondition)},
  { 371, 382, sizeof(::apollo::simulation::ObstacleBypassCondition)},
  { 388, 394, sizeof(::apollo::simulation::AntiCheatingCondition)},
  { 395, 404, sizeof(::apollo::simulation::KeyPoint)},
  { 408, 417, sizeof(::apollo::simulation::KeyPointCondition)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_Condition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_GradePlanning_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_LogicalCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_SpeedCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_CentripetalAccelerationCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_AccelerationCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_JerkCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_SpinCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_ObjectOverlapCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_RegionOverlapCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_RegionOverlapLWCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_OnRoadCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_RunRedLightCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_RedLightStopCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_ChangeLaneAtJunctionCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_RoutingCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_CrosswalkYieldCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_CrosswalkStopCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_AbnormalStopCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_BrakeTapCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_RunStopSignCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_CheckpointCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_DistToEndCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_DistToLaneCenterCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_TimeLimitCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_SpeedbumpLimitCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_WorkingZoneAvoidLimitCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_LimitedTimeParkingCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_FollowAndBypassCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_ObstacleBypassCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_AntiCheatingCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_KeyPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::simulation::_KeyPointCondition_default_instance_),
};

const char descriptor_table_protodef_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n;modules/common_msgs/simulation_msgs/gr"
  "ading_condition.proto\022\021apollo.simulation"
  "\032$modules/map/proto/map_geometry.proto\"\326"
  "\022\n\tCondition\022@\n\021logical_condition\030\001 \001(\0132"
  "#.apollo.simulation.LogicalConditionH\000\022<"
  "\n\017speed_condition\030\002 \001(\0132!.apollo.simulat"
  "ion.SpeedConditionH\000\022J\n\026acceleration_con"
  "dition\030\003 \001(\0132(.apollo.simulation.Acceler"
  "ationConditionH\000\022:\n\016jerk_condition\030\004 \001(\013"
  "2 .apollo.simulation.JerkConditionH\000\022M\n\030"
  "object_overlap_condition\030\005 \001(\0132).apollo."
  "simulation.ObjectOverlapConditionH\000\022M\n\030r"
  "egion_overlap_condition\030\006 \001(\0132).apollo.s"
  "imulation.RegionOverlapConditionH\000\022R\n\033re"
  "gion_overlap_lw_condition\030\007 \001(\0132+.apollo"
  ".simulation.RegionOverlapLWConditionH\000\022:"
  "\n\016spin_condition\030\010 \001(\0132 .apollo.simulati"
  "on.SpinConditionH\000\022\?\n\021on_road_condition\030"
  "\t \001(\0132\".apollo.simulation.OnRoadConditio"
  "nH\000\022J\n\027run_red_light_condition\030\n \001(\0132\'.a"
  "pollo.simulation.RunRedLightConditionH\000\022"
  "]\n!change_lane_at_junction_condition\030\013 \001"
  "(\01320.apollo.simulation.ChangeLaneAtJunct"
  "ionConditionH\000\022@\n\021routing_condition\030\014 \001("
  "\0132#.apollo.simulation.RoutingConditionH\000"
  "\022O\n\031crosswalk_yield_condition\030\r \001(\0132*.ap"
  "ollo.simulation.CrosswalkYieldConditionH"
  "\000\022K\n\027abnormal_stop_condition\030\016 \001(\0132(.apo"
  "llo.simulation.AbnormalStopConditionH\000\022C"
  "\n\023brake_tap_condition\030\017 \001(\0132$.apollo.sim"
  "ulation.BrakeTapConditionH\000\022J\n\027run_stop_"
  "sign_condition\030\020 \001(\0132\'.apollo.simulation"
  ".RunStopSignConditionH\000\022F\n\024checkpoint_co"
  "ndition\030\021 \001(\0132&.apollo.simulation.Checkp"
  "ointConditionH\000\022F\n\025dist_to_end_condition"
  "\030\022 \001(\0132%.apollo.simulation.DistToEndCond"
  "itionH\000\022U\n\035dist_to_lane_center_condition"
  "\030\023 \001(\0132,.apollo.simulation.DistToLaneCen"
  "terConditionH\000\022M\n\030crosswalk_stop_conditi"
  "on\030\024 \001(\0132).apollo.simulation.CrosswalkSt"
  "opConditionH\000\022L\n\030red_light_stop_conditio"
  "n\030\025 \001(\0132(.apollo.simulation.RedLightStop"
  "ConditionH\000\022O\n\031speedbump_limit_condition"
  "\030\026 \001(\0132*.apollo.simulation.SpeedbumpLimi"
  "tConditionH\000\022_\n\"working_zone_avoid_limit"
  "_condition\030\027 \001(\01321.apollo.simulation.Wor"
  "kingZoneAvoidLimitConditionH\000\022X\n\036limited"
  "_time_parking_condition\030\030 \001(\0132..apollo.s"
  "imulation.LimitedTimeParkingConditionH\000\022"
  "R\n\033follow_and_bypass_condition\030\031 \001(\0132+.a"
  "pollo.simulation.FollowAndBypassConditio"
  "nH\000\022O\n\031obstacle_bypass_condition\030\032 \001(\0132*"
  ".apollo.simulation.ObstacleBypassConditi"
  "onH\000\022a\n\"centripetal_acceleration_conditi"
  "on\030\033 \001(\01323.apollo.simulation.Centripetal"
  "AccelerationConditionH\000\022E\n\024time_limit_co"
  "ndition\030\034 \001(\0132%.apollo.simulation.TimeLi"
  "mitConditionH\000\022K\n\027anti_cheating_conditio"
  "n\030\035 \001(\0132(.apollo.simulation.AntiCheating"
  "ConditionH\000\022C\n\023key_point_condition\030\036 \001(\013"
  "2$.apollo.simulation.KeyPointConditionH\000"
  "\0228\n\016grade_planning\030d \001(\0132 .apollo.simula"
  "tion.GradePlanningB\013\n\tcondition\"m\n\rGrade"
  "Planning\022\023\n\010duration\030\001 \001(\021:\0010\022\037\n\020update_"
  "obstacles\030\002 \001(\010:\005false\022&\n\027use_planning_a"
  "s_history\030\003 \001(\010:\005false\"\333\001\n\020LogicalCondit"
  "ion\022G\n\roperator_type\030\001 \001(\01620.apollo.simu"
  "lation.LogicalCondition.OperatorType\0223\n\r"
  "sub_condition\030\002 \003(\0132\034.apollo.simulation."
  "Condition\"I\n\014OperatorType\022\013\n\007UNKNOWN\020\000\022\007"
  "\n\003NOT\020\001\022\007\n\003AND\020\002\022\006\n\002OR\020\003\022\t\n\005IMPLY\020\004\022\007\n\003X"
  "OR\020\005\"\220\001\n\016SpeedCondition\022\023\n\004name\030\001 \001(\t:\005s"
  "peed\022\027\n\tmin_speed\030\002 \001(\001:\004-0.5\022\027\n\tmax_spe"
  "ed\030\003 \001(\001:\0041000\022\030\n\tuse_score\030\004 \001(\010:\005false"
  "\022\035\n\020single_deduction\030\005 \001(\001:\0030.5\"\254\001\n Cent"
  "ripetalAccelerationCondition\022&\n\004name\030\001 \001"
  "(\t:\030centripetal_acceleration\022\'\n\034max_cent"
  "ripetal_acceleration\030\002 \001(\001:\0012\022\030\n\tuse_sco"
  "re\030\003 \001(\010:\005false\022\035\n\020single_deduction\030\004 \001("
  "\001:\0030.5\"\255\001\n\025AccelerationCondition\022\032\n\004name"
  "\030\001 \001(\t:\014acceleration\022\037\n\020min_acceleration"
  "\030\002 \001(\001:\005-1000\022\036\n\020max_acceleration\030\003 \001(\001:"
  "\0041000\022\030\n\tuse_score\030\004 \001(\010:\005false\022\035\n\020singl"
  "e_deduction\030\005 \001(\001:\0030.5\"T\n\rJerkCondition\022"
  "\022\n\004name\030\001 \001(\t:\004jerk\022\027\n\010min_jerk\030\002 \001(\001:\005-"
  "1000\022\026\n\010max_jerk\030\003 \001(\001:\0041000\"T\n\rSpinCond"
  "ition\022\022\n\004name\030\001 \001(\t:\004spin\022\027\n\010min_spin\030\002 "
  "\001(\001:\005-1000\022\026\n\010max_spin\030\003 \001(\001:\0041000\"\244\002\n\026O"
  "bjectOverlapCondition\022\031\n\021source_object_i"
  "ds\030\001 \001(\t\022\031\n\021target_object_ids\030\002 \001(\t\022\020\n\010d"
  "istance\030\003 \001(\001\022X\n\tdirection\030\004 \001(\01627.apoll"
  "o.simulation.ObjectOverlapCondition.Dire"
  "ctionType:\014EXCLUDE_BACK\022\031\n\021ignore_object"
  "_ids\030\005 \003(\t\022\030\n\tuse_score\030\006 \001(\010:\005false\"3\n\r"
  "DirectionType\022\020\n\014EXCLUDE_BACK\020\000\022\020\n\014INCLU"
  "DE_BACK\020\001\"\224\001\n\026RegionOverlapCondition\022\022\n\n"
  "object_ids\030\001 \001(\t\022\034\n\020region_corner_xy\030\002 \003"
  "(\001B\002\020\001\022\035\n\025require_fully_contain\030\003 \001(\010\022\017\n"
  "\007heading\030\004 \001(\001\022\030\n\tuse_score\030\005 \001(\010:\005false"
  "\"\234\001\n\030RegionOverlapLWCondition\022\022\n\nobject_"
  "ids\030\001 \001(\t\022\t\n\001x\030\002 \001(\001\022\t\n\001y\030\003 \001(\001\022\016\n\006lengt"
  "h\030\004 \001(\001\022\r\n\005width\030\005 \001(\001\022\035\n\025require_fully_"
  "contain\030\006 \001(\010\022\030\n\tuse_score\030\007 \001(\010:\005false\""
  "M\n\017OnRoadCondition\022 \n\021use_road_boundary\030"
  "\001 \001(\010:\005false\022\030\n\tuse_score\030\002 \001(\010:\005false\"0"
  "\n\024RunRedLightCondition\022\030\n\tuse_score\030\001 \001("
  "\010:\005false\"\202\001\n\025RedLightStopCondition\022\027\n\014mi"
  "n_distance\030\001 \001(\001:\0012\022\031\n\014max_distance\030\002 \001("
  "\001:\0032.2\022\030\n\tuse_score\030\003 \001(\010:\005false\022\033\n\020sing"
  "le_deduction\030\004 \001(\001:\0015\"\037\n\035ChangeLaneAtJun"
  "ctionCondition\"\022\n\020RoutingCondition\"\031\n\027Cr"
  "osswalkYieldCondition\"\205\001\n\026CrosswalkStopC"
  "ondition\022\031\n\014min_distance\030\001 \001(\001:\0032.2\022\031\n\014m"
  "ax_distance\030\002 \001(\001:\0032.7\022\030\n\tuse_score\030\003 \001("
  "\010:\005false\022\033\n\020single_deduction\030\004 \001(\001:\0015\"X\n"
  "\025AbnormalStopCondition\022\023\n\010duration\030\001 \001(\001"
  ":\0015\022\024\n\010distance\030\002 \001(\001:\00210\022\t\n\001x\030\003 \001(\001\022\t\n\001"
  "y\030\004 \001(\001\"E\n\021BrakeTapCondition\022\027\n\014min_dura"
  "tion\030\001 \001(\001:\0011\022\027\n\014max_duration\030\002 \001(\001:\0014\"+"
  "\n\024RunStopSignCondition\022\023\n\010distance\030\001 \001(\001"
  ":\0012\"G\n\023CheckpointCondition\0220\n\ncheckpoint"
  "\030\001 \003(\0132\034.apollo.simulation.Condition\"\024\n\022"
  "DistToEndCondition\"\033\n\031DistToLaneCenterCo"
  "ndition\"\?\n\022TimeLimitCondition\022\017\n\007timeout"
  "\030\001 \001(\001\022\030\n\tuse_score\030\002 \001(\010:\005false\"\252\001\n\027Spe"
  "edbumpLimitCondition\022!\n\024speedbump_half_w"
  "idth\030\001 \001(\001:\0030.2\022\024\n\tmax_speed\030\002 \001(\001:\0013\022\037\n"
  "\024deduction_speed_unit\030\003 \001(\001:\0011\022\030\n\tuse_sc"
  "ore\030\004 \001(\010:\005false\022\033\n\020single_deduction\030\005 \001"
  "(\001:\0015\"\310\001\n\036WorkingZoneAvoidLimitCondition"
  "\022+\n\014working_zone\030\001 \003(\0132\025.apollo.hdmap.Po"
  "lygon\022\027\n\tmax_speed\030\002 \001(\001:\0048.33\022)\n\nwhole_"
  "area\030\003 \001(\0132\025.apollo.hdmap.Polygon\022\030\n\tuse"
  "_score\030\004 \001(\010:\005false\022\033\n\020single_deduction\030"
  "\005 \001(\001:\0013\"\200\001\n\033LimitedTimeParkingCondition"
  "\022*\n\013parking_lot\030\001 \001(\0132\025.apollo.hdmap.Pol"
  "ygon\022\030\n\tuse_score\030\002 \001(\010:\005false\022\033\n\020single"
  "_deduction\030\003 \001(\001:\0015\"\272\001\n\030FollowAndBypassC"
  "ondition\022)\n\ntest_range\030\001 \001(\0132\025.apollo.hd"
  "map.Polygon\022\027\n\014divide_speed\030\002 \001(\001:\0013\022\023\n\013"
  "obstacle_id\030\003 \001(\t\022+\n\010end_line\030\004 \001(\0132\031.ap"
  "ollo.hdmap.LineSegment\022\030\n\tuse_score\030\005 \001("
  "\010:\005false\"\307\001\n\027ObstacleBypassCondition\022)\n\n"
  "test_range\030\001 \001(\0132\025.apollo.hdmap.Polygon\022"
  "\023\n\013obstacle_id\030\002 \001(\t\022\037\n\024min_lateral_dist"
  "ance\030\003 \001(\001:\0011\022\024\n\tmax_speed\030\004 \001(\001:\0015\022\030\n\tu"
  "se_score\030\005 \001(\010:\005false\022\033\n\020single_deductio"
  "n\030\006 \001(\001:\0015\"1\n\025AntiCheatingCondition\022\030\n\tu"
  "se_score\030\001 \001(\010:\005false\"A\n\010KeyPoint\022\t\n\001x\030\001"
  " \001(\001\022\t\n\001y\030\002 \001(\001\022\014\n\001z\030\003 \001(\001:\0010\022\021\n\006radius\030"
  "\004 \001(\001:\0012\"\204\001\n\021KeyPointCondition\022\030\n\tuse_sc"
  "ore\030\001 \001(\010:\005false\022\026\n\010in_order\030\002 \001(\010:\004true"
  "\022\021\n\006radius\030\003 \001(\001:\0012\022*\n\005point\030\004 \003(\0132\033.apo"
  "llo.simulation.KeyPoint"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto_deps[1] = {
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto_sccs[31] = {
  &scc_info_AbnormalStopCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_AccelerationCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_AntiCheatingCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_BrakeTapCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_CentripetalAccelerationCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_ChangeLaneAtJunctionCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_CheckpointCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_CrosswalkStopCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_CrosswalkYieldCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_DistToEndCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_DistToLaneCenterCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_FollowAndBypassCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_GradePlanning_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_JerkCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_KeyPoint_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_KeyPointCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_LimitedTimeParkingCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_ObjectOverlapCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_ObstacleBypassCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_OnRoadCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_RedLightStopCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_RegionOverlapCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_RegionOverlapLWCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_RoutingCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_RunRedLightCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_RunStopSignCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_SpeedCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_SpeedbumpLimitCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_SpinCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_TimeLimitCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
  &scc_info_WorkingZoneAvoidLimitCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto = {
  false, false, descriptor_table_protodef_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto, "modules/common_msgs/simulation_msgs/grading_condition.proto", 6143,
  &descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto_once, descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto_sccs, descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto_deps, 31, 1,
  schemas, file_default_instances, TableStruct_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto::offsets,
  file_level_metadata_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto, 33, file_level_enum_descriptors_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto, file_level_service_descriptors_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto)), true);
namespace apollo {
namespace simulation {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicalCondition_OperatorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto);
  return file_level_enum_descriptors_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto[0];
}
bool LogicalCondition_OperatorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LogicalCondition_OperatorType LogicalCondition::UNKNOWN;
constexpr LogicalCondition_OperatorType LogicalCondition::NOT;
constexpr LogicalCondition_OperatorType LogicalCondition::AND;
constexpr LogicalCondition_OperatorType LogicalCondition::OR;
constexpr LogicalCondition_OperatorType LogicalCondition::IMPLY;
constexpr LogicalCondition_OperatorType LogicalCondition::XOR;
constexpr LogicalCondition_OperatorType LogicalCondition::OperatorType_MIN;
constexpr LogicalCondition_OperatorType LogicalCondition::OperatorType_MAX;
constexpr int LogicalCondition::OperatorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectOverlapCondition_DirectionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto);
  return file_level_enum_descriptors_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto[1];
}
bool ObjectOverlapCondition_DirectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ObjectOverlapCondition_DirectionType ObjectOverlapCondition::EXCLUDE_BACK;
constexpr ObjectOverlapCondition_DirectionType ObjectOverlapCondition::INCLUDE_BACK;
constexpr ObjectOverlapCondition_DirectionType ObjectOverlapCondition::DirectionType_MIN;
constexpr ObjectOverlapCondition_DirectionType ObjectOverlapCondition::DirectionType_MAX;
constexpr int ObjectOverlapCondition::DirectionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Condition::_Internal {
 public:
  using HasBits = decltype(std::declval<Condition>()._has_bits_);
  static const ::apollo::simulation::LogicalCondition& logical_condition(const Condition* msg);
  static const ::apollo::simulation::SpeedCondition& speed_condition(const Condition* msg);
  static const ::apollo::simulation::AccelerationCondition& acceleration_condition(const Condition* msg);
  static const ::apollo::simulation::JerkCondition& jerk_condition(const Condition* msg);
  static const ::apollo::simulation::ObjectOverlapCondition& object_overlap_condition(const Condition* msg);
  static const ::apollo::simulation::RegionOverlapCondition& region_overlap_condition(const Condition* msg);
  static const ::apollo::simulation::RegionOverlapLWCondition& region_overlap_lw_condition(const Condition* msg);
  static const ::apollo::simulation::SpinCondition& spin_condition(const Condition* msg);
  static const ::apollo::simulation::OnRoadCondition& on_road_condition(const Condition* msg);
  static const ::apollo::simulation::RunRedLightCondition& run_red_light_condition(const Condition* msg);
  static const ::apollo::simulation::ChangeLaneAtJunctionCondition& change_lane_at_junction_condition(const Condition* msg);
  static const ::apollo::simulation::RoutingCondition& routing_condition(const Condition* msg);
  static const ::apollo::simulation::CrosswalkYieldCondition& crosswalk_yield_condition(const Condition* msg);
  static const ::apollo::simulation::AbnormalStopCondition& abnormal_stop_condition(const Condition* msg);
  static const ::apollo::simulation::BrakeTapCondition& brake_tap_condition(const Condition* msg);
  static const ::apollo::simulation::RunStopSignCondition& run_stop_sign_condition(const Condition* msg);
  static const ::apollo::simulation::CheckpointCondition& checkpoint_condition(const Condition* msg);
  static const ::apollo::simulation::DistToEndCondition& dist_to_end_condition(const Condition* msg);
  static const ::apollo::simulation::DistToLaneCenterCondition& dist_to_lane_center_condition(const Condition* msg);
  static const ::apollo::simulation::CrosswalkStopCondition& crosswalk_stop_condition(const Condition* msg);
  static const ::apollo::simulation::RedLightStopCondition& red_light_stop_condition(const Condition* msg);
  static const ::apollo::simulation::SpeedbumpLimitCondition& speedbump_limit_condition(const Condition* msg);
  static const ::apollo::simulation::WorkingZoneAvoidLimitCondition& working_zone_avoid_limit_condition(const Condition* msg);
  static const ::apollo::simulation::LimitedTimeParkingCondition& limited_time_parking_condition(const Condition* msg);
  static const ::apollo::simulation::FollowAndBypassCondition& follow_and_bypass_condition(const Condition* msg);
  static const ::apollo::simulation::ObstacleBypassCondition& obstacle_bypass_condition(const Condition* msg);
  static const ::apollo::simulation::CentripetalAccelerationCondition& centripetal_acceleration_condition(const Condition* msg);
  static const ::apollo::simulation::TimeLimitCondition& time_limit_condition(const Condition* msg);
  static const ::apollo::simulation::AntiCheatingCondition& anti_cheating_condition(const Condition* msg);
  static const ::apollo::simulation::KeyPointCondition& key_point_condition(const Condition* msg);
  static const ::apollo::simulation::GradePlanning& grade_planning(const Condition* msg);
  static void set_has_grade_planning(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::simulation::LogicalCondition&
Condition::_Internal::logical_condition(const Condition* msg) {
  return *msg->condition_.logical_condition_;
}
const ::apollo::simulation::SpeedCondition&
Condition::_Internal::speed_condition(const Condition* msg) {
  return *msg->condition_.speed_condition_;
}
const ::apollo::simulation::AccelerationCondition&
Condition::_Internal::acceleration_condition(const Condition* msg) {
  return *msg->condition_.acceleration_condition_;
}
const ::apollo::simulation::JerkCondition&
Condition::_Internal::jerk_condition(const Condition* msg) {
  return *msg->condition_.jerk_condition_;
}
const ::apollo::simulation::ObjectOverlapCondition&
Condition::_Internal::object_overlap_condition(const Condition* msg) {
  return *msg->condition_.object_overlap_condition_;
}
const ::apollo::simulation::RegionOverlapCondition&
Condition::_Internal::region_overlap_condition(const Condition* msg) {
  return *msg->condition_.region_overlap_condition_;
}
const ::apollo::simulation::RegionOverlapLWCondition&
Condition::_Internal::region_overlap_lw_condition(const Condition* msg) {
  return *msg->condition_.region_overlap_lw_condition_;
}
const ::apollo::simulation::SpinCondition&
Condition::_Internal::spin_condition(const Condition* msg) {
  return *msg->condition_.spin_condition_;
}
const ::apollo::simulation::OnRoadCondition&
Condition::_Internal::on_road_condition(const Condition* msg) {
  return *msg->condition_.on_road_condition_;
}
const ::apollo::simulation::RunRedLightCondition&
Condition::_Internal::run_red_light_condition(const Condition* msg) {
  return *msg->condition_.run_red_light_condition_;
}
const ::apollo::simulation::ChangeLaneAtJunctionCondition&
Condition::_Internal::change_lane_at_junction_condition(const Condition* msg) {
  return *msg->condition_.change_lane_at_junction_condition_;
}
const ::apollo::simulation::RoutingCondition&
Condition::_Internal::routing_condition(const Condition* msg) {
  return *msg->condition_.routing_condition_;
}
const ::apollo::simulation::CrosswalkYieldCondition&
Condition::_Internal::crosswalk_yield_condition(const Condition* msg) {
  return *msg->condition_.crosswalk_yield_condition_;
}
const ::apollo::simulation::AbnormalStopCondition&
Condition::_Internal::abnormal_stop_condition(const Condition* msg) {
  return *msg->condition_.abnormal_stop_condition_;
}
const ::apollo::simulation::BrakeTapCondition&
Condition::_Internal::brake_tap_condition(const Condition* msg) {
  return *msg->condition_.brake_tap_condition_;
}
const ::apollo::simulation::RunStopSignCondition&
Condition::_Internal::run_stop_sign_condition(const Condition* msg) {
  return *msg->condition_.run_stop_sign_condition_;
}
const ::apollo::simulation::CheckpointCondition&
Condition::_Internal::checkpoint_condition(const Condition* msg) {
  return *msg->condition_.checkpoint_condition_;
}
const ::apollo::simulation::DistToEndCondition&
Condition::_Internal::dist_to_end_condition(const Condition* msg) {
  return *msg->condition_.dist_to_end_condition_;
}
const ::apollo::simulation::DistToLaneCenterCondition&
Condition::_Internal::dist_to_lane_center_condition(const Condition* msg) {
  return *msg->condition_.dist_to_lane_center_condition_;
}
const ::apollo::simulation::CrosswalkStopCondition&
Condition::_Internal::crosswalk_stop_condition(const Condition* msg) {
  return *msg->condition_.crosswalk_stop_condition_;
}
const ::apollo::simulation::RedLightStopCondition&
Condition::_Internal::red_light_stop_condition(const Condition* msg) {
  return *msg->condition_.red_light_stop_condition_;
}
const ::apollo::simulation::SpeedbumpLimitCondition&
Condition::_Internal::speedbump_limit_condition(const Condition* msg) {
  return *msg->condition_.speedbump_limit_condition_;
}
const ::apollo::simulation::WorkingZoneAvoidLimitCondition&
Condition::_Internal::working_zone_avoid_limit_condition(const Condition* msg) {
  return *msg->condition_.working_zone_avoid_limit_condition_;
}
const ::apollo::simulation::LimitedTimeParkingCondition&
Condition::_Internal::limited_time_parking_condition(const Condition* msg) {
  return *msg->condition_.limited_time_parking_condition_;
}
const ::apollo::simulation::FollowAndBypassCondition&
Condition::_Internal::follow_and_bypass_condition(const Condition* msg) {
  return *msg->condition_.follow_and_bypass_condition_;
}
const ::apollo::simulation::ObstacleBypassCondition&
Condition::_Internal::obstacle_bypass_condition(const Condition* msg) {
  return *msg->condition_.obstacle_bypass_condition_;
}
const ::apollo::simulation::CentripetalAccelerationCondition&
Condition::_Internal::centripetal_acceleration_condition(const Condition* msg) {
  return *msg->condition_.centripetal_acceleration_condition_;
}
const ::apollo::simulation::TimeLimitCondition&
Condition::_Internal::time_limit_condition(const Condition* msg) {
  return *msg->condition_.time_limit_condition_;
}
const ::apollo::simulation::AntiCheatingCondition&
Condition::_Internal::anti_cheating_condition(const Condition* msg) {
  return *msg->condition_.anti_cheating_condition_;
}
const ::apollo::simulation::KeyPointCondition&
Condition::_Internal::key_point_condition(const Condition* msg) {
  return *msg->condition_.key_point_condition_;
}
const ::apollo::simulation::GradePlanning&
Condition::_Internal::grade_planning(const Condition* msg) {
  return *msg->grade_planning_;
}
void Condition::set_allocated_logical_condition(::apollo::simulation::LogicalCondition* logical_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (logical_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logical_condition);
    if (message_arena != submessage_arena) {
      logical_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logical_condition, submessage_arena);
    }
    set_has_logical_condition();
    condition_.logical_condition_ = logical_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.logical_condition)
}
void Condition::set_allocated_speed_condition(::apollo::simulation::SpeedCondition* speed_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (speed_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(speed_condition);
    if (message_arena != submessage_arena) {
      speed_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_condition, submessage_arena);
    }
    set_has_speed_condition();
    condition_.speed_condition_ = speed_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.speed_condition)
}
void Condition::set_allocated_acceleration_condition(::apollo::simulation::AccelerationCondition* acceleration_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (acceleration_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(acceleration_condition);
    if (message_arena != submessage_arena) {
      acceleration_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration_condition, submessage_arena);
    }
    set_has_acceleration_condition();
    condition_.acceleration_condition_ = acceleration_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.acceleration_condition)
}
void Condition::set_allocated_jerk_condition(::apollo::simulation::JerkCondition* jerk_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (jerk_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(jerk_condition);
    if (message_arena != submessage_arena) {
      jerk_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jerk_condition, submessage_arena);
    }
    set_has_jerk_condition();
    condition_.jerk_condition_ = jerk_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.jerk_condition)
}
void Condition::set_allocated_object_overlap_condition(::apollo::simulation::ObjectOverlapCondition* object_overlap_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (object_overlap_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(object_overlap_condition);
    if (message_arena != submessage_arena) {
      object_overlap_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_overlap_condition, submessage_arena);
    }
    set_has_object_overlap_condition();
    condition_.object_overlap_condition_ = object_overlap_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.object_overlap_condition)
}
void Condition::set_allocated_region_overlap_condition(::apollo::simulation::RegionOverlapCondition* region_overlap_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (region_overlap_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(region_overlap_condition);
    if (message_arena != submessage_arena) {
      region_overlap_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_overlap_condition, submessage_arena);
    }
    set_has_region_overlap_condition();
    condition_.region_overlap_condition_ = region_overlap_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.region_overlap_condition)
}
void Condition::set_allocated_region_overlap_lw_condition(::apollo::simulation::RegionOverlapLWCondition* region_overlap_lw_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (region_overlap_lw_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(region_overlap_lw_condition);
    if (message_arena != submessage_arena) {
      region_overlap_lw_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_overlap_lw_condition, submessage_arena);
    }
    set_has_region_overlap_lw_condition();
    condition_.region_overlap_lw_condition_ = region_overlap_lw_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.region_overlap_lw_condition)
}
void Condition::set_allocated_spin_condition(::apollo::simulation::SpinCondition* spin_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (spin_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(spin_condition);
    if (message_arena != submessage_arena) {
      spin_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spin_condition, submessage_arena);
    }
    set_has_spin_condition();
    condition_.spin_condition_ = spin_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.spin_condition)
}
void Condition::set_allocated_on_road_condition(::apollo::simulation::OnRoadCondition* on_road_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (on_road_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(on_road_condition);
    if (message_arena != submessage_arena) {
      on_road_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, on_road_condition, submessage_arena);
    }
    set_has_on_road_condition();
    condition_.on_road_condition_ = on_road_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.on_road_condition)
}
void Condition::set_allocated_run_red_light_condition(::apollo::simulation::RunRedLightCondition* run_red_light_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (run_red_light_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(run_red_light_condition);
    if (message_arena != submessage_arena) {
      run_red_light_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_red_light_condition, submessage_arena);
    }
    set_has_run_red_light_condition();
    condition_.run_red_light_condition_ = run_red_light_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.run_red_light_condition)
}
void Condition::set_allocated_change_lane_at_junction_condition(::apollo::simulation::ChangeLaneAtJunctionCondition* change_lane_at_junction_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (change_lane_at_junction_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(change_lane_at_junction_condition);
    if (message_arena != submessage_arena) {
      change_lane_at_junction_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_lane_at_junction_condition, submessage_arena);
    }
    set_has_change_lane_at_junction_condition();
    condition_.change_lane_at_junction_condition_ = change_lane_at_junction_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.change_lane_at_junction_condition)
}
void Condition::set_allocated_routing_condition(::apollo::simulation::RoutingCondition* routing_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (routing_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(routing_condition);
    if (message_arena != submessage_arena) {
      routing_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_condition, submessage_arena);
    }
    set_has_routing_condition();
    condition_.routing_condition_ = routing_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.routing_condition)
}
void Condition::set_allocated_crosswalk_yield_condition(::apollo::simulation::CrosswalkYieldCondition* crosswalk_yield_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (crosswalk_yield_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(crosswalk_yield_condition);
    if (message_arena != submessage_arena) {
      crosswalk_yield_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crosswalk_yield_condition, submessage_arena);
    }
    set_has_crosswalk_yield_condition();
    condition_.crosswalk_yield_condition_ = crosswalk_yield_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.crosswalk_yield_condition)
}
void Condition::set_allocated_abnormal_stop_condition(::apollo::simulation::AbnormalStopCondition* abnormal_stop_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (abnormal_stop_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(abnormal_stop_condition);
    if (message_arena != submessage_arena) {
      abnormal_stop_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, abnormal_stop_condition, submessage_arena);
    }
    set_has_abnormal_stop_condition();
    condition_.abnormal_stop_condition_ = abnormal_stop_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.abnormal_stop_condition)
}
void Condition::set_allocated_brake_tap_condition(::apollo::simulation::BrakeTapCondition* brake_tap_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (brake_tap_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(brake_tap_condition);
    if (message_arena != submessage_arena) {
      brake_tap_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brake_tap_condition, submessage_arena);
    }
    set_has_brake_tap_condition();
    condition_.brake_tap_condition_ = brake_tap_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.brake_tap_condition)
}
void Condition::set_allocated_run_stop_sign_condition(::apollo::simulation::RunStopSignCondition* run_stop_sign_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (run_stop_sign_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(run_stop_sign_condition);
    if (message_arena != submessage_arena) {
      run_stop_sign_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_stop_sign_condition, submessage_arena);
    }
    set_has_run_stop_sign_condition();
    condition_.run_stop_sign_condition_ = run_stop_sign_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.run_stop_sign_condition)
}
void Condition::set_allocated_checkpoint_condition(::apollo::simulation::CheckpointCondition* checkpoint_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (checkpoint_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(checkpoint_condition);
    if (message_arena != submessage_arena) {
      checkpoint_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, checkpoint_condition, submessage_arena);
    }
    set_has_checkpoint_condition();
    condition_.checkpoint_condition_ = checkpoint_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.checkpoint_condition)
}
void Condition::set_allocated_dist_to_end_condition(::apollo::simulation::DistToEndCondition* dist_to_end_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (dist_to_end_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dist_to_end_condition);
    if (message_arena != submessage_arena) {
      dist_to_end_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dist_to_end_condition, submessage_arena);
    }
    set_has_dist_to_end_condition();
    condition_.dist_to_end_condition_ = dist_to_end_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.dist_to_end_condition)
}
void Condition::set_allocated_dist_to_lane_center_condition(::apollo::simulation::DistToLaneCenterCondition* dist_to_lane_center_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (dist_to_lane_center_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dist_to_lane_center_condition);
    if (message_arena != submessage_arena) {
      dist_to_lane_center_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dist_to_lane_center_condition, submessage_arena);
    }
    set_has_dist_to_lane_center_condition();
    condition_.dist_to_lane_center_condition_ = dist_to_lane_center_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.dist_to_lane_center_condition)
}
void Condition::set_allocated_crosswalk_stop_condition(::apollo::simulation::CrosswalkStopCondition* crosswalk_stop_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (crosswalk_stop_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(crosswalk_stop_condition);
    if (message_arena != submessage_arena) {
      crosswalk_stop_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crosswalk_stop_condition, submessage_arena);
    }
    set_has_crosswalk_stop_condition();
    condition_.crosswalk_stop_condition_ = crosswalk_stop_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.crosswalk_stop_condition)
}
void Condition::set_allocated_red_light_stop_condition(::apollo::simulation::RedLightStopCondition* red_light_stop_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (red_light_stop_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(red_light_stop_condition);
    if (message_arena != submessage_arena) {
      red_light_stop_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, red_light_stop_condition, submessage_arena);
    }
    set_has_red_light_stop_condition();
    condition_.red_light_stop_condition_ = red_light_stop_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.red_light_stop_condition)
}
void Condition::set_allocated_speedbump_limit_condition(::apollo::simulation::SpeedbumpLimitCondition* speedbump_limit_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (speedbump_limit_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(speedbump_limit_condition);
    if (message_arena != submessage_arena) {
      speedbump_limit_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speedbump_limit_condition, submessage_arena);
    }
    set_has_speedbump_limit_condition();
    condition_.speedbump_limit_condition_ = speedbump_limit_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.speedbump_limit_condition)
}
void Condition::set_allocated_working_zone_avoid_limit_condition(::apollo::simulation::WorkingZoneAvoidLimitCondition* working_zone_avoid_limit_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (working_zone_avoid_limit_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(working_zone_avoid_limit_condition);
    if (message_arena != submessage_arena) {
      working_zone_avoid_limit_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, working_zone_avoid_limit_condition, submessage_arena);
    }
    set_has_working_zone_avoid_limit_condition();
    condition_.working_zone_avoid_limit_condition_ = working_zone_avoid_limit_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.working_zone_avoid_limit_condition)
}
void Condition::set_allocated_limited_time_parking_condition(::apollo::simulation::LimitedTimeParkingCondition* limited_time_parking_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (limited_time_parking_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(limited_time_parking_condition);
    if (message_arena != submessage_arena) {
      limited_time_parking_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limited_time_parking_condition, submessage_arena);
    }
    set_has_limited_time_parking_condition();
    condition_.limited_time_parking_condition_ = limited_time_parking_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.limited_time_parking_condition)
}
void Condition::set_allocated_follow_and_bypass_condition(::apollo::simulation::FollowAndBypassCondition* follow_and_bypass_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (follow_and_bypass_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(follow_and_bypass_condition);
    if (message_arena != submessage_arena) {
      follow_and_bypass_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, follow_and_bypass_condition, submessage_arena);
    }
    set_has_follow_and_bypass_condition();
    condition_.follow_and_bypass_condition_ = follow_and_bypass_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.follow_and_bypass_condition)
}
void Condition::set_allocated_obstacle_bypass_condition(::apollo::simulation::ObstacleBypassCondition* obstacle_bypass_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (obstacle_bypass_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(obstacle_bypass_condition);
    if (message_arena != submessage_arena) {
      obstacle_bypass_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obstacle_bypass_condition, submessage_arena);
    }
    set_has_obstacle_bypass_condition();
    condition_.obstacle_bypass_condition_ = obstacle_bypass_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.obstacle_bypass_condition)
}
void Condition::set_allocated_centripetal_acceleration_condition(::apollo::simulation::CentripetalAccelerationCondition* centripetal_acceleration_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (centripetal_acceleration_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(centripetal_acceleration_condition);
    if (message_arena != submessage_arena) {
      centripetal_acceleration_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, centripetal_acceleration_condition, submessage_arena);
    }
    set_has_centripetal_acceleration_condition();
    condition_.centripetal_acceleration_condition_ = centripetal_acceleration_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.centripetal_acceleration_condition)
}
void Condition::set_allocated_time_limit_condition(::apollo::simulation::TimeLimitCondition* time_limit_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (time_limit_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(time_limit_condition);
    if (message_arena != submessage_arena) {
      time_limit_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_limit_condition, submessage_arena);
    }
    set_has_time_limit_condition();
    condition_.time_limit_condition_ = time_limit_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.time_limit_condition)
}
void Condition::set_allocated_anti_cheating_condition(::apollo::simulation::AntiCheatingCondition* anti_cheating_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (anti_cheating_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(anti_cheating_condition);
    if (message_arena != submessage_arena) {
      anti_cheating_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anti_cheating_condition, submessage_arena);
    }
    set_has_anti_cheating_condition();
    condition_.anti_cheating_condition_ = anti_cheating_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.anti_cheating_condition)
}
void Condition::set_allocated_key_point_condition(::apollo::simulation::KeyPointCondition* key_point_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_condition();
  if (key_point_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(key_point_condition);
    if (message_arena != submessage_arena) {
      key_point_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_point_condition, submessage_arena);
    }
    set_has_key_point_condition();
    condition_.key_point_condition_ = key_point_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Condition.key_point_condition)
}
Condition::Condition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.Condition)
}
Condition::Condition(const Condition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_grade_planning()) {
    grade_planning_ = new ::apollo::simulation::GradePlanning(*from.grade_planning_);
  } else {
    grade_planning_ = nullptr;
  }
  clear_has_condition();
  switch (from.condition_case()) {
    case kLogicalCondition: {
      _internal_mutable_logical_condition()->::apollo::simulation::LogicalCondition::MergeFrom(from._internal_logical_condition());
      break;
    }
    case kSpeedCondition: {
      _internal_mutable_speed_condition()->::apollo::simulation::SpeedCondition::MergeFrom(from._internal_speed_condition());
      break;
    }
    case kAccelerationCondition: {
      _internal_mutable_acceleration_condition()->::apollo::simulation::AccelerationCondition::MergeFrom(from._internal_acceleration_condition());
      break;
    }
    case kJerkCondition: {
      _internal_mutable_jerk_condition()->::apollo::simulation::JerkCondition::MergeFrom(from._internal_jerk_condition());
      break;
    }
    case kObjectOverlapCondition: {
      _internal_mutable_object_overlap_condition()->::apollo::simulation::ObjectOverlapCondition::MergeFrom(from._internal_object_overlap_condition());
      break;
    }
    case kRegionOverlapCondition: {
      _internal_mutable_region_overlap_condition()->::apollo::simulation::RegionOverlapCondition::MergeFrom(from._internal_region_overlap_condition());
      break;
    }
    case kRegionOverlapLwCondition: {
      _internal_mutable_region_overlap_lw_condition()->::apollo::simulation::RegionOverlapLWCondition::MergeFrom(from._internal_region_overlap_lw_condition());
      break;
    }
    case kSpinCondition: {
      _internal_mutable_spin_condition()->::apollo::simulation::SpinCondition::MergeFrom(from._internal_spin_condition());
      break;
    }
    case kOnRoadCondition: {
      _internal_mutable_on_road_condition()->::apollo::simulation::OnRoadCondition::MergeFrom(from._internal_on_road_condition());
      break;
    }
    case kRunRedLightCondition: {
      _internal_mutable_run_red_light_condition()->::apollo::simulation::RunRedLightCondition::MergeFrom(from._internal_run_red_light_condition());
      break;
    }
    case kChangeLaneAtJunctionCondition: {
      _internal_mutable_change_lane_at_junction_condition()->::apollo::simulation::ChangeLaneAtJunctionCondition::MergeFrom(from._internal_change_lane_at_junction_condition());
      break;
    }
    case kRoutingCondition: {
      _internal_mutable_routing_condition()->::apollo::simulation::RoutingCondition::MergeFrom(from._internal_routing_condition());
      break;
    }
    case kCrosswalkYieldCondition: {
      _internal_mutable_crosswalk_yield_condition()->::apollo::simulation::CrosswalkYieldCondition::MergeFrom(from._internal_crosswalk_yield_condition());
      break;
    }
    case kAbnormalStopCondition: {
      _internal_mutable_abnormal_stop_condition()->::apollo::simulation::AbnormalStopCondition::MergeFrom(from._internal_abnormal_stop_condition());
      break;
    }
    case kBrakeTapCondition: {
      _internal_mutable_brake_tap_condition()->::apollo::simulation::BrakeTapCondition::MergeFrom(from._internal_brake_tap_condition());
      break;
    }
    case kRunStopSignCondition: {
      _internal_mutable_run_stop_sign_condition()->::apollo::simulation::RunStopSignCondition::MergeFrom(from._internal_run_stop_sign_condition());
      break;
    }
    case kCheckpointCondition: {
      _internal_mutable_checkpoint_condition()->::apollo::simulation::CheckpointCondition::MergeFrom(from._internal_checkpoint_condition());
      break;
    }
    case kDistToEndCondition: {
      _internal_mutable_dist_to_end_condition()->::apollo::simulation::DistToEndCondition::MergeFrom(from._internal_dist_to_end_condition());
      break;
    }
    case kDistToLaneCenterCondition: {
      _internal_mutable_dist_to_lane_center_condition()->::apollo::simulation::DistToLaneCenterCondition::MergeFrom(from._internal_dist_to_lane_center_condition());
      break;
    }
    case kCrosswalkStopCondition: {
      _internal_mutable_crosswalk_stop_condition()->::apollo::simulation::CrosswalkStopCondition::MergeFrom(from._internal_crosswalk_stop_condition());
      break;
    }
    case kRedLightStopCondition: {
      _internal_mutable_red_light_stop_condition()->::apollo::simulation::RedLightStopCondition::MergeFrom(from._internal_red_light_stop_condition());
      break;
    }
    case kSpeedbumpLimitCondition: {
      _internal_mutable_speedbump_limit_condition()->::apollo::simulation::SpeedbumpLimitCondition::MergeFrom(from._internal_speedbump_limit_condition());
      break;
    }
    case kWorkingZoneAvoidLimitCondition: {
      _internal_mutable_working_zone_avoid_limit_condition()->::apollo::simulation::WorkingZoneAvoidLimitCondition::MergeFrom(from._internal_working_zone_avoid_limit_condition());
      break;
    }
    case kLimitedTimeParkingCondition: {
      _internal_mutable_limited_time_parking_condition()->::apollo::simulation::LimitedTimeParkingCondition::MergeFrom(from._internal_limited_time_parking_condition());
      break;
    }
    case kFollowAndBypassCondition: {
      _internal_mutable_follow_and_bypass_condition()->::apollo::simulation::FollowAndBypassCondition::MergeFrom(from._internal_follow_and_bypass_condition());
      break;
    }
    case kObstacleBypassCondition: {
      _internal_mutable_obstacle_bypass_condition()->::apollo::simulation::ObstacleBypassCondition::MergeFrom(from._internal_obstacle_bypass_condition());
      break;
    }
    case kCentripetalAccelerationCondition: {
      _internal_mutable_centripetal_acceleration_condition()->::apollo::simulation::CentripetalAccelerationCondition::MergeFrom(from._internal_centripetal_acceleration_condition());
      break;
    }
    case kTimeLimitCondition: {
      _internal_mutable_time_limit_condition()->::apollo::simulation::TimeLimitCondition::MergeFrom(from._internal_time_limit_condition());
      break;
    }
    case kAntiCheatingCondition: {
      _internal_mutable_anti_cheating_condition()->::apollo::simulation::AntiCheatingCondition::MergeFrom(from._internal_anti_cheating_condition());
      break;
    }
    case kKeyPointCondition: {
      _internal_mutable_key_point_condition()->::apollo::simulation::KeyPointCondition::MergeFrom(from._internal_key_point_condition());
      break;
    }
    case CONDITION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.Condition)
}

void Condition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckpointCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  grade_planning_ = nullptr;
  clear_has_condition();
}

Condition::~Condition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.Condition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Condition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete grade_planning_;
  if (has_condition()) {
    clear_condition();
  }
}

void Condition::ArenaDtor(void* object) {
  Condition* _this = reinterpret_cast< Condition* >(object);
  (void)_this;
}
void Condition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Condition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Condition& Condition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckpointCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void Condition::clear_condition() {
// @@protoc_insertion_point(one_of_clear_start:apollo.simulation.Condition)
  switch (condition_case()) {
    case kLogicalCondition: {
      if (GetArena() == nullptr) {
        delete condition_.logical_condition_;
      }
      break;
    }
    case kSpeedCondition: {
      if (GetArena() == nullptr) {
        delete condition_.speed_condition_;
      }
      break;
    }
    case kAccelerationCondition: {
      if (GetArena() == nullptr) {
        delete condition_.acceleration_condition_;
      }
      break;
    }
    case kJerkCondition: {
      if (GetArena() == nullptr) {
        delete condition_.jerk_condition_;
      }
      break;
    }
    case kObjectOverlapCondition: {
      if (GetArena() == nullptr) {
        delete condition_.object_overlap_condition_;
      }
      break;
    }
    case kRegionOverlapCondition: {
      if (GetArena() == nullptr) {
        delete condition_.region_overlap_condition_;
      }
      break;
    }
    case kRegionOverlapLwCondition: {
      if (GetArena() == nullptr) {
        delete condition_.region_overlap_lw_condition_;
      }
      break;
    }
    case kSpinCondition: {
      if (GetArena() == nullptr) {
        delete condition_.spin_condition_;
      }
      break;
    }
    case kOnRoadCondition: {
      if (GetArena() == nullptr) {
        delete condition_.on_road_condition_;
      }
      break;
    }
    case kRunRedLightCondition: {
      if (GetArena() == nullptr) {
        delete condition_.run_red_light_condition_;
      }
      break;
    }
    case kChangeLaneAtJunctionCondition: {
      if (GetArena() == nullptr) {
        delete condition_.change_lane_at_junction_condition_;
      }
      break;
    }
    case kRoutingCondition: {
      if (GetArena() == nullptr) {
        delete condition_.routing_condition_;
      }
      break;
    }
    case kCrosswalkYieldCondition: {
      if (GetArena() == nullptr) {
        delete condition_.crosswalk_yield_condition_;
      }
      break;
    }
    case kAbnormalStopCondition: {
      if (GetArena() == nullptr) {
        delete condition_.abnormal_stop_condition_;
      }
      break;
    }
    case kBrakeTapCondition: {
      if (GetArena() == nullptr) {
        delete condition_.brake_tap_condition_;
      }
      break;
    }
    case kRunStopSignCondition: {
      if (GetArena() == nullptr) {
        delete condition_.run_stop_sign_condition_;
      }
      break;
    }
    case kCheckpointCondition: {
      if (GetArena() == nullptr) {
        delete condition_.checkpoint_condition_;
      }
      break;
    }
    case kDistToEndCondition: {
      if (GetArena() == nullptr) {
        delete condition_.dist_to_end_condition_;
      }
      break;
    }
    case kDistToLaneCenterCondition: {
      if (GetArena() == nullptr) {
        delete condition_.dist_to_lane_center_condition_;
      }
      break;
    }
    case kCrosswalkStopCondition: {
      if (GetArena() == nullptr) {
        delete condition_.crosswalk_stop_condition_;
      }
      break;
    }
    case kRedLightStopCondition: {
      if (GetArena() == nullptr) {
        delete condition_.red_light_stop_condition_;
      }
      break;
    }
    case kSpeedbumpLimitCondition: {
      if (GetArena() == nullptr) {
        delete condition_.speedbump_limit_condition_;
      }
      break;
    }
    case kWorkingZoneAvoidLimitCondition: {
      if (GetArena() == nullptr) {
        delete condition_.working_zone_avoid_limit_condition_;
      }
      break;
    }
    case kLimitedTimeParkingCondition: {
      if (GetArena() == nullptr) {
        delete condition_.limited_time_parking_condition_;
      }
      break;
    }
    case kFollowAndBypassCondition: {
      if (GetArena() == nullptr) {
        delete condition_.follow_and_bypass_condition_;
      }
      break;
    }
    case kObstacleBypassCondition: {
      if (GetArena() == nullptr) {
        delete condition_.obstacle_bypass_condition_;
      }
      break;
    }
    case kCentripetalAccelerationCondition: {
      if (GetArena() == nullptr) {
        delete condition_.centripetal_acceleration_condition_;
      }
      break;
    }
    case kTimeLimitCondition: {
      if (GetArena() == nullptr) {
        delete condition_.time_limit_condition_;
      }
      break;
    }
    case kAntiCheatingCondition: {
      if (GetArena() == nullptr) {
        delete condition_.anti_cheating_condition_;
      }
      break;
    }
    case kKeyPointCondition: {
      if (GetArena() == nullptr) {
        delete condition_.key_point_condition_;
      }
      break;
    }
    case CONDITION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONDITION_NOT_SET;
}


void Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(grade_planning_ != nullptr);
    grade_planning_->Clear();
  }
  clear_condition();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Condition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .apollo.simulation.LogicalCondition logical_condition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logical_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.SpeedCondition speed_condition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.AccelerationCondition acceleration_condition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.JerkCondition jerk_condition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_jerk_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.ObjectOverlapCondition object_overlap_condition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_overlap_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.RegionOverlapCondition region_overlap_condition = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_overlap_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.RegionOverlapLWCondition region_overlap_lw_condition = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_overlap_lw_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.SpinCondition spin_condition = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_spin_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.OnRoadCondition on_road_condition = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_on_road_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.RunRedLightCondition run_red_light_condition = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_red_light_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.ChangeLaneAtJunctionCondition change_lane_at_junction_condition = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_lane_at_junction_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.RoutingCondition routing_condition = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.CrosswalkYieldCondition crosswalk_yield_condition = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_crosswalk_yield_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.AbnormalStopCondition abnormal_stop_condition = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_abnormal_stop_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.BrakeTapCondition brake_tap_condition = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_tap_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.RunStopSignCondition run_stop_sign_condition = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_stop_sign_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.CheckpointCondition checkpoint_condition = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_checkpoint_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.DistToEndCondition dist_to_end_condition = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_dist_to_end_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.DistToLaneCenterCondition dist_to_lane_center_condition = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_dist_to_lane_center_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.CrosswalkStopCondition crosswalk_stop_condition = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_crosswalk_stop_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.RedLightStopCondition red_light_stop_condition = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_red_light_stop_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.SpeedbumpLimitCondition speedbump_limit_condition = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_speedbump_limit_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.WorkingZoneAvoidLimitCondition working_zone_avoid_limit_condition = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_working_zone_avoid_limit_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.LimitedTimeParkingCondition limited_time_parking_condition = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_limited_time_parking_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.FollowAndBypassCondition follow_and_bypass_condition = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_follow_and_bypass_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.ObstacleBypassCondition obstacle_bypass_condition = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_obstacle_bypass_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.CentripetalAccelerationCondition centripetal_acceleration_condition = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_centripetal_acceleration_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.TimeLimitCondition time_limit_condition = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_limit_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.AntiCheatingCondition anti_cheating_condition = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_anti_cheating_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.simulation.KeyPointCondition key_point_condition = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_point_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.simulation.GradePlanning grade_planning = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_grade_planning(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Condition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (condition_case()) {
    case kLogicalCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::logical_condition(this), target, stream);
      break;
    }
    case kSpeedCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::speed_condition(this), target, stream);
      break;
    }
    case kAccelerationCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::acceleration_condition(this), target, stream);
      break;
    }
    case kJerkCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::jerk_condition(this), target, stream);
      break;
    }
    case kObjectOverlapCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::object_overlap_condition(this), target, stream);
      break;
    }
    case kRegionOverlapCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::region_overlap_condition(this), target, stream);
      break;
    }
    case kRegionOverlapLwCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::region_overlap_lw_condition(this), target, stream);
      break;
    }
    case kSpinCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::spin_condition(this), target, stream);
      break;
    }
    case kOnRoadCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          9, _Internal::on_road_condition(this), target, stream);
      break;
    }
    case kRunRedLightCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          10, _Internal::run_red_light_condition(this), target, stream);
      break;
    }
    case kChangeLaneAtJunctionCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          11, _Internal::change_lane_at_junction_condition(this), target, stream);
      break;
    }
    case kRoutingCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          12, _Internal::routing_condition(this), target, stream);
      break;
    }
    case kCrosswalkYieldCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          13, _Internal::crosswalk_yield_condition(this), target, stream);
      break;
    }
    case kAbnormalStopCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          14, _Internal::abnormal_stop_condition(this), target, stream);
      break;
    }
    case kBrakeTapCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          15, _Internal::brake_tap_condition(this), target, stream);
      break;
    }
    case kRunStopSignCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          16, _Internal::run_stop_sign_condition(this), target, stream);
      break;
    }
    case kCheckpointCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          17, _Internal::checkpoint_condition(this), target, stream);
      break;
    }
    case kDistToEndCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          18, _Internal::dist_to_end_condition(this), target, stream);
      break;
    }
    case kDistToLaneCenterCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          19, _Internal::dist_to_lane_center_condition(this), target, stream);
      break;
    }
    case kCrosswalkStopCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          20, _Internal::crosswalk_stop_condition(this), target, stream);
      break;
    }
    case kRedLightStopCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          21, _Internal::red_light_stop_condition(this), target, stream);
      break;
    }
    case kSpeedbumpLimitCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          22, _Internal::speedbump_limit_condition(this), target, stream);
      break;
    }
    case kWorkingZoneAvoidLimitCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          23, _Internal::working_zone_avoid_limit_condition(this), target, stream);
      break;
    }
    case kLimitedTimeParkingCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          24, _Internal::limited_time_parking_condition(this), target, stream);
      break;
    }
    case kFollowAndBypassCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          25, _Internal::follow_and_bypass_condition(this), target, stream);
      break;
    }
    case kObstacleBypassCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          26, _Internal::obstacle_bypass_condition(this), target, stream);
      break;
    }
    case kCentripetalAccelerationCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          27, _Internal::centripetal_acceleration_condition(this), target, stream);
      break;
    }
    case kTimeLimitCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          28, _Internal::time_limit_condition(this), target, stream);
      break;
    }
    case kAntiCheatingCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          29, _Internal::anti_cheating_condition(this), target, stream);
      break;
    }
    case kKeyPointCondition: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          30, _Internal::key_point_condition(this), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional .apollo.simulation.GradePlanning grade_planning = 100;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::grade_planning(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.Condition)
  return target;
}

size_t Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.Condition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.simulation.GradePlanning grade_planning = 100;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *grade_planning_);
  }

  switch (condition_case()) {
    // .apollo.simulation.LogicalCondition logical_condition = 1;
    case kLogicalCondition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.logical_condition_);
      break;
    }
    // .apollo.simulation.SpeedCondition speed_condition = 2;
    case kSpeedCondition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.speed_condition_);
      break;
    }
    // .apollo.simulation.AccelerationCondition acceleration_condition = 3;
    case kAccelerationCondition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.acceleration_condition_);
      break;
    }
    // .apollo.simulation.JerkCondition jerk_condition = 4;
    case kJerkCondition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.jerk_condition_);
      break;
    }
    // .apollo.simulation.ObjectOverlapCondition object_overlap_condition = 5;
    case kObjectOverlapCondition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.object_overlap_condition_);
      break;
    }
    // .apollo.simulation.RegionOverlapCondition region_overlap_condition = 6;
    case kRegionOverlapCondition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.region_overlap_condition_);
      break;
    }
    // .apollo.simulation.RegionOverlapLWCondition region_overlap_lw_condition = 7;
    case kRegionOverlapLwCondition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.region_overlap_lw_condition_);
      break;
    }
    // .apollo.simulation.SpinCondition spin_condition = 8;
    case kSpinCondition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.spin_condition_);
      break;
    }
    // .apollo.simulation.OnRoadCondition on_road_condition = 9;
    case kOnRoadCondition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.on_road_condition_);
      break;
    }
    // .apollo.simulation.RunRedLightCondition run_red_light_condition = 10;
    case kRunRedLightCondition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.run_red_light_condition_);
      break;
    }
    // .apollo.simulation.ChangeLaneAtJunctionCondition change_lane_at_junction_condition = 11;
    case kChangeLaneAtJunctionCondition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.change_lane_at_junction_condition_);
      break;
    }
    // .apollo.simulation.RoutingCondition routing_condition = 12;
    case kRoutingCondition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.routing_condition_);
      break;
    }
    // .apollo.simulation.CrosswalkYieldCondition crosswalk_yield_condition = 13;
    case kCrosswalkYieldCondition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.crosswalk_yield_condition_);
      break;
    }
    // .apollo.simulation.AbnormalStopCondition abnormal_stop_condition = 14;
    case kAbnormalStopCondition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.abnormal_stop_condition_);
      break;
    }
    // .apollo.simulation.BrakeTapCondition brake_tap_condition = 15;
    case kBrakeTapCondition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.brake_tap_condition_);
      break;
    }
    // .apollo.simulation.RunStopSignCondition run_stop_sign_condition = 16;
    case kRunStopSignCondition: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.run_stop_sign_condition_);
      break;
    }
    // .apollo.simulation.CheckpointCondition checkpoint_condition = 17;
    case kCheckpointCondition: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.checkpoint_condition_);
      break;
    }
    // .apollo.simulation.DistToEndCondition dist_to_end_condition = 18;
    case kDistToEndCondition: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.dist_to_end_condition_);
      break;
    }
    // .apollo.simulation.DistToLaneCenterCondition dist_to_lane_center_condition = 19;
    case kDistToLaneCenterCondition: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.dist_to_lane_center_condition_);
      break;
    }
    // .apollo.simulation.CrosswalkStopCondition crosswalk_stop_condition = 20;
    case kCrosswalkStopCondition: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.crosswalk_stop_condition_);
      break;
    }
    // .apollo.simulation.RedLightStopCondition red_light_stop_condition = 21;
    case kRedLightStopCondition: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.red_light_stop_condition_);
      break;
    }
    // .apollo.simulation.SpeedbumpLimitCondition speedbump_limit_condition = 22;
    case kSpeedbumpLimitCondition: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.speedbump_limit_condition_);
      break;
    }
    // .apollo.simulation.WorkingZoneAvoidLimitCondition working_zone_avoid_limit_condition = 23;
    case kWorkingZoneAvoidLimitCondition: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.working_zone_avoid_limit_condition_);
      break;
    }
    // .apollo.simulation.LimitedTimeParkingCondition limited_time_parking_condition = 24;
    case kLimitedTimeParkingCondition: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.limited_time_parking_condition_);
      break;
    }
    // .apollo.simulation.FollowAndBypassCondition follow_and_bypass_condition = 25;
    case kFollowAndBypassCondition: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.follow_and_bypass_condition_);
      break;
    }
    // .apollo.simulation.ObstacleBypassCondition obstacle_bypass_condition = 26;
    case kObstacleBypassCondition: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.obstacle_bypass_condition_);
      break;
    }
    // .apollo.simulation.CentripetalAccelerationCondition centripetal_acceleration_condition = 27;
    case kCentripetalAccelerationCondition: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.centripetal_acceleration_condition_);
      break;
    }
    // .apollo.simulation.TimeLimitCondition time_limit_condition = 28;
    case kTimeLimitCondition: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.time_limit_condition_);
      break;
    }
    // .apollo.simulation.AntiCheatingCondition anti_cheating_condition = 29;
    case kAntiCheatingCondition: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.anti_cheating_condition_);
      break;
    }
    // .apollo.simulation.KeyPointCondition key_point_condition = 30;
    case kKeyPointCondition: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_.key_point_condition_);
      break;
    }
    case CONDITION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Condition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  const Condition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Condition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.Condition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.Condition)
    MergeFrom(*source);
  }
}

void Condition::MergeFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_grade_planning()) {
    _internal_mutable_grade_planning()->::apollo::simulation::GradePlanning::MergeFrom(from._internal_grade_planning());
  }
  switch (from.condition_case()) {
    case kLogicalCondition: {
      _internal_mutable_logical_condition()->::apollo::simulation::LogicalCondition::MergeFrom(from._internal_logical_condition());
      break;
    }
    case kSpeedCondition: {
      _internal_mutable_speed_condition()->::apollo::simulation::SpeedCondition::MergeFrom(from._internal_speed_condition());
      break;
    }
    case kAccelerationCondition: {
      _internal_mutable_acceleration_condition()->::apollo::simulation::AccelerationCondition::MergeFrom(from._internal_acceleration_condition());
      break;
    }
    case kJerkCondition: {
      _internal_mutable_jerk_condition()->::apollo::simulation::JerkCondition::MergeFrom(from._internal_jerk_condition());
      break;
    }
    case kObjectOverlapCondition: {
      _internal_mutable_object_overlap_condition()->::apollo::simulation::ObjectOverlapCondition::MergeFrom(from._internal_object_overlap_condition());
      break;
    }
    case kRegionOverlapCondition: {
      _internal_mutable_region_overlap_condition()->::apollo::simulation::RegionOverlapCondition::MergeFrom(from._internal_region_overlap_condition());
      break;
    }
    case kRegionOverlapLwCondition: {
      _internal_mutable_region_overlap_lw_condition()->::apollo::simulation::RegionOverlapLWCondition::MergeFrom(from._internal_region_overlap_lw_condition());
      break;
    }
    case kSpinCondition: {
      _internal_mutable_spin_condition()->::apollo::simulation::SpinCondition::MergeFrom(from._internal_spin_condition());
      break;
    }
    case kOnRoadCondition: {
      _internal_mutable_on_road_condition()->::apollo::simulation::OnRoadCondition::MergeFrom(from._internal_on_road_condition());
      break;
    }
    case kRunRedLightCondition: {
      _internal_mutable_run_red_light_condition()->::apollo::simulation::RunRedLightCondition::MergeFrom(from._internal_run_red_light_condition());
      break;
    }
    case kChangeLaneAtJunctionCondition: {
      _internal_mutable_change_lane_at_junction_condition()->::apollo::simulation::ChangeLaneAtJunctionCondition::MergeFrom(from._internal_change_lane_at_junction_condition());
      break;
    }
    case kRoutingCondition: {
      _internal_mutable_routing_condition()->::apollo::simulation::RoutingCondition::MergeFrom(from._internal_routing_condition());
      break;
    }
    case kCrosswalkYieldCondition: {
      _internal_mutable_crosswalk_yield_condition()->::apollo::simulation::CrosswalkYieldCondition::MergeFrom(from._internal_crosswalk_yield_condition());
      break;
    }
    case kAbnormalStopCondition: {
      _internal_mutable_abnormal_stop_condition()->::apollo::simulation::AbnormalStopCondition::MergeFrom(from._internal_abnormal_stop_condition());
      break;
    }
    case kBrakeTapCondition: {
      _internal_mutable_brake_tap_condition()->::apollo::simulation::BrakeTapCondition::MergeFrom(from._internal_brake_tap_condition());
      break;
    }
    case kRunStopSignCondition: {
      _internal_mutable_run_stop_sign_condition()->::apollo::simulation::RunStopSignCondition::MergeFrom(from._internal_run_stop_sign_condition());
      break;
    }
    case kCheckpointCondition: {
      _internal_mutable_checkpoint_condition()->::apollo::simulation::CheckpointCondition::MergeFrom(from._internal_checkpoint_condition());
      break;
    }
    case kDistToEndCondition: {
      _internal_mutable_dist_to_end_condition()->::apollo::simulation::DistToEndCondition::MergeFrom(from._internal_dist_to_end_condition());
      break;
    }
    case kDistToLaneCenterCondition: {
      _internal_mutable_dist_to_lane_center_condition()->::apollo::simulation::DistToLaneCenterCondition::MergeFrom(from._internal_dist_to_lane_center_condition());
      break;
    }
    case kCrosswalkStopCondition: {
      _internal_mutable_crosswalk_stop_condition()->::apollo::simulation::CrosswalkStopCondition::MergeFrom(from._internal_crosswalk_stop_condition());
      break;
    }
    case kRedLightStopCondition: {
      _internal_mutable_red_light_stop_condition()->::apollo::simulation::RedLightStopCondition::MergeFrom(from._internal_red_light_stop_condition());
      break;
    }
    case kSpeedbumpLimitCondition: {
      _internal_mutable_speedbump_limit_condition()->::apollo::simulation::SpeedbumpLimitCondition::MergeFrom(from._internal_speedbump_limit_condition());
      break;
    }
    case kWorkingZoneAvoidLimitCondition: {
      _internal_mutable_working_zone_avoid_limit_condition()->::apollo::simulation::WorkingZoneAvoidLimitCondition::MergeFrom(from._internal_working_zone_avoid_limit_condition());
      break;
    }
    case kLimitedTimeParkingCondition: {
      _internal_mutable_limited_time_parking_condition()->::apollo::simulation::LimitedTimeParkingCondition::MergeFrom(from._internal_limited_time_parking_condition());
      break;
    }
    case kFollowAndBypassCondition: {
      _internal_mutable_follow_and_bypass_condition()->::apollo::simulation::FollowAndBypassCondition::MergeFrom(from._internal_follow_and_bypass_condition());
      break;
    }
    case kObstacleBypassCondition: {
      _internal_mutable_obstacle_bypass_condition()->::apollo::simulation::ObstacleBypassCondition::MergeFrom(from._internal_obstacle_bypass_condition());
      break;
    }
    case kCentripetalAccelerationCondition: {
      _internal_mutable_centripetal_acceleration_condition()->::apollo::simulation::CentripetalAccelerationCondition::MergeFrom(from._internal_centripetal_acceleration_condition());
      break;
    }
    case kTimeLimitCondition: {
      _internal_mutable_time_limit_condition()->::apollo::simulation::TimeLimitCondition::MergeFrom(from._internal_time_limit_condition());
      break;
    }
    case kAntiCheatingCondition: {
      _internal_mutable_anti_cheating_condition()->::apollo::simulation::AntiCheatingCondition::MergeFrom(from._internal_anti_cheating_condition());
      break;
    }
    case kKeyPointCondition: {
      _internal_mutable_key_point_condition()->::apollo::simulation::KeyPointCondition::MergeFrom(from._internal_key_point_condition());
      break;
    }
    case CONDITION_NOT_SET: {
      break;
    }
  }
}

void Condition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Condition::CopyFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Condition::IsInitialized() const {
  return true;
}

void Condition::InternalSwap(Condition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(grade_planning_, other->grade_planning_);
  swap(condition_, other->condition_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Condition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GradePlanning::_Internal {
 public:
  using HasBits = decltype(std::declval<GradePlanning>()._has_bits_);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_update_obstacles(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_use_planning_as_history(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GradePlanning::GradePlanning(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.GradePlanning)
}
GradePlanning::GradePlanning(const GradePlanning& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_planning_as_history_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(use_planning_as_history_));
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.GradePlanning)
}

void GradePlanning::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&use_planning_as_history_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(use_planning_as_history_));
}

GradePlanning::~GradePlanning() {
  // @@protoc_insertion_point(destructor:apollo.simulation.GradePlanning)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GradePlanning::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GradePlanning::ArenaDtor(void* object) {
  GradePlanning* _this = reinterpret_cast< GradePlanning* >(object);
  (void)_this;
}
void GradePlanning::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GradePlanning::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GradePlanning& GradePlanning::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GradePlanning_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void GradePlanning::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.GradePlanning)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_planning_as_history_) -
        reinterpret_cast<char*>(&duration_)) + sizeof(use_planning_as_history_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GradePlanning::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional sint32 duration = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool update_obstacles = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_update_obstacles(&has_bits);
          update_obstacles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_planning_as_history = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_use_planning_as_history(&has_bits);
          use_planning_as_history_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GradePlanning::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.GradePlanning)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 duration = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_duration(), target);
  }

  // optional bool update_obstacles = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_update_obstacles(), target);
  }

  // optional bool use_planning_as_history = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_use_planning_as_history(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.GradePlanning)
  return target;
}

size_t GradePlanning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.GradePlanning)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional sint32 duration = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_duration());
    }

    // optional bool update_obstacles = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool use_planning_as_history = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GradePlanning::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.GradePlanning)
  GOOGLE_DCHECK_NE(&from, this);
  const GradePlanning* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GradePlanning>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.GradePlanning)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.GradePlanning)
    MergeFrom(*source);
  }
}

void GradePlanning::MergeFrom(const GradePlanning& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.GradePlanning)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000002u) {
      update_obstacles_ = from.update_obstacles_;
    }
    if (cached_has_bits & 0x00000004u) {
      use_planning_as_history_ = from.use_planning_as_history_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GradePlanning::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.GradePlanning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GradePlanning::CopyFrom(const GradePlanning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.GradePlanning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GradePlanning::IsInitialized() const {
  return true;
}

void GradePlanning::InternalSwap(GradePlanning* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GradePlanning, use_planning_as_history_)
      + sizeof(GradePlanning::use_planning_as_history_)
      - PROTOBUF_FIELD_OFFSET(GradePlanning, duration_)>(
          reinterpret_cast<char*>(&duration_),
          reinterpret_cast<char*>(&other->duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GradePlanning::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LogicalCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<LogicalCondition>()._has_bits_);
  static void set_has_operator_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LogicalCondition::LogicalCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sub_condition_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.LogicalCondition)
}
LogicalCondition::LogicalCondition(const LogicalCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sub_condition_(from.sub_condition_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  operator_type_ = from.operator_type_;
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.LogicalCondition)
}

void LogicalCondition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckpointCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  operator_type_ = 0;
}

LogicalCondition::~LogicalCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.LogicalCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogicalCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LogicalCondition::ArenaDtor(void* object) {
  LogicalCondition* _this = reinterpret_cast< LogicalCondition* >(object);
  (void)_this;
}
void LogicalCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogicalCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogicalCondition& LogicalCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckpointCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void LogicalCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.LogicalCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sub_condition_.Clear();
  operator_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicalCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.simulation.LogicalCondition.OperatorType operator_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::simulation::LogicalCondition_OperatorType_IsValid(val))) {
            _internal_set_operator_type(static_cast<::apollo::simulation::LogicalCondition_OperatorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .apollo.simulation.Condition sub_condition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sub_condition(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicalCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.LogicalCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.simulation.LogicalCondition.OperatorType operator_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operator_type(), target);
  }

  // repeated .apollo.simulation.Condition sub_condition = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sub_condition_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_sub_condition(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.LogicalCondition)
  return target;
}

size_t LogicalCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.LogicalCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.simulation.Condition sub_condition = 2;
  total_size += 1UL * this->_internal_sub_condition_size();
  for (const auto& msg : this->sub_condition_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .apollo.simulation.LogicalCondition.OperatorType operator_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operator_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicalCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.LogicalCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicalCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogicalCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.LogicalCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.LogicalCondition)
    MergeFrom(*source);
  }
}

void LogicalCondition::MergeFrom(const LogicalCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.LogicalCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sub_condition_.MergeFrom(from.sub_condition_);
  if (from._internal_has_operator_type()) {
    _internal_set_operator_type(from._internal_operator_type());
  }
}

void LogicalCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.LogicalCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicalCondition::CopyFrom(const LogicalCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.LogicalCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalCondition::IsInitialized() const {
  return true;
}

void LogicalCondition::InternalSwap(LogicalCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sub_condition_.InternalSwap(&other->sub_condition_);
  swap(operator_type_, other->operator_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SpeedCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeedCondition>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_use_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_single_deduction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString SpeedCondition::_i_give_permission_to_break_this_code_default_name_{{{"speed", 5}}, {nullptr}};
SpeedCondition::SpeedCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.SpeedCondition)
}
SpeedCondition::SpeedCondition(const SpeedCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(nullptr);
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&use_score_, &from.use_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&single_deduction_) -
    reinterpret_cast<char*>(&use_score_)) + sizeof(single_deduction_));
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.SpeedCondition)
}

void SpeedCondition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpeedCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  name_.UnsafeSetDefault(nullptr);
  use_score_ = false;
  min_speed_ = -0.5;
  max_speed_ = 1000;
  single_deduction_ = 0.5;
}

SpeedCondition::~SpeedCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.SpeedCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpeedCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(nullptr);
}

void SpeedCondition::ArenaDtor(void* object) {
  SpeedCondition* _this = reinterpret_cast< SpeedCondition* >(object);
  (void)_this;
}
void SpeedCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeedCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeedCondition& SpeedCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpeedCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void SpeedCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.SpeedCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearToDefault(::apollo::simulation::SpeedCondition::_i_give_permission_to_break_this_code_default_name_, GetArena());
     }
  if (cached_has_bits & 0x0000001eu) {
    use_score_ = false;
    min_speed_ = -0.5;
    max_speed_ = 1000;
    single_deduction_ = 0.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1 [default = "speed"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.simulation.SpeedCondition.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double min_speed = 2 [default = -0.5];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_min_speed(&has_bits);
          min_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_speed = 3 [default = 1000];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max_speed(&has_bits);
          max_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool use_score = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_use_score(&has_bits);
          use_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double single_deduction = 5 [default = 0.5];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_single_deduction(&has_bits);
          single_deduction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeedCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.SpeedCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [default = "speed"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.simulation.SpeedCondition.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional double min_speed = 2 [default = -0.5];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_min_speed(), target);
  }

  // optional double max_speed = 3 [default = 1000];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_speed(), target);
  }

  // optional bool use_score = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_use_score(), target);
  }

  // optional double single_deduction = 5 [default = 0.5];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_single_deduction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.SpeedCondition)
  return target;
}

size_t SpeedCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.SpeedCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1 [default = "speed"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bool use_score = 4 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional double min_speed = 2 [default = -0.5];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double max_speed = 3 [default = 1000];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double single_deduction = 5 [default = 0.5];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.SpeedCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeedCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.SpeedCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.SpeedCondition)
    MergeFrom(*source);
  }
}

void SpeedCondition::MergeFrom(const SpeedCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.SpeedCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      use_score_ = from.use_score_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_speed_ = from.min_speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_speed_ = from.max_speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      single_deduction_ = from.single_deduction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpeedCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.SpeedCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedCondition::CopyFrom(const SpeedCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.SpeedCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedCondition::IsInitialized() const {
  return true;
}

void SpeedCondition::InternalSwap(SpeedCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, nullptr, GetArena());
  swap(use_score_, other->use_score_);
  swap(min_speed_, other->min_speed_);
  swap(max_speed_, other->max_speed_);
  swap(single_deduction_, other->single_deduction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CentripetalAccelerationCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<CentripetalAccelerationCondition>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_centripetal_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_use_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_single_deduction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString CentripetalAccelerationCondition::_i_give_permission_to_break_this_code_default_name_{{{"centripetal_acceleration", 24}}, {nullptr}};
CentripetalAccelerationCondition::CentripetalAccelerationCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.CentripetalAccelerationCondition)
}
CentripetalAccelerationCondition::CentripetalAccelerationCondition(const CentripetalAccelerationCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(nullptr);
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&use_score_, &from.use_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&single_deduction_) -
    reinterpret_cast<char*>(&use_score_)) + sizeof(single_deduction_));
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.CentripetalAccelerationCondition)
}

void CentripetalAccelerationCondition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CentripetalAccelerationCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  name_.UnsafeSetDefault(nullptr);
  use_score_ = false;
  max_centripetal_acceleration_ = 2;
  single_deduction_ = 0.5;
}

CentripetalAccelerationCondition::~CentripetalAccelerationCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.CentripetalAccelerationCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CentripetalAccelerationCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(nullptr);
}

void CentripetalAccelerationCondition::ArenaDtor(void* object) {
  CentripetalAccelerationCondition* _this = reinterpret_cast< CentripetalAccelerationCondition* >(object);
  (void)_this;
}
void CentripetalAccelerationCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CentripetalAccelerationCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CentripetalAccelerationCondition& CentripetalAccelerationCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CentripetalAccelerationCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void CentripetalAccelerationCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.CentripetalAccelerationCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearToDefault(::apollo::simulation::CentripetalAccelerationCondition::_i_give_permission_to_break_this_code_default_name_, GetArena());
     }
  if (cached_has_bits & 0x0000000eu) {
    use_score_ = false;
    max_centripetal_acceleration_ = 2;
    single_deduction_ = 0.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CentripetalAccelerationCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1 [default = "centripetal_acceleration"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.simulation.CentripetalAccelerationCondition.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double max_centripetal_acceleration = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_max_centripetal_acceleration(&has_bits);
          max_centripetal_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool use_score = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_use_score(&has_bits);
          use_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double single_deduction = 4 [default = 0.5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_single_deduction(&has_bits);
          single_deduction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CentripetalAccelerationCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.CentripetalAccelerationCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [default = "centripetal_acceleration"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.simulation.CentripetalAccelerationCondition.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional double max_centripetal_acceleration = 2 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_centripetal_acceleration(), target);
  }

  // optional bool use_score = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_use_score(), target);
  }

  // optional double single_deduction = 4 [default = 0.5];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_single_deduction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.CentripetalAccelerationCondition)
  return target;
}

size_t CentripetalAccelerationCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.CentripetalAccelerationCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1 [default = "centripetal_acceleration"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bool use_score = 3 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional double max_centripetal_acceleration = 2 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double single_deduction = 4 [default = 0.5];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CentripetalAccelerationCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.CentripetalAccelerationCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const CentripetalAccelerationCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CentripetalAccelerationCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.CentripetalAccelerationCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.CentripetalAccelerationCondition)
    MergeFrom(*source);
  }
}

void CentripetalAccelerationCondition::MergeFrom(const CentripetalAccelerationCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.CentripetalAccelerationCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      use_score_ = from.use_score_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_centripetal_acceleration_ = from.max_centripetal_acceleration_;
    }
    if (cached_has_bits & 0x00000008u) {
      single_deduction_ = from.single_deduction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CentripetalAccelerationCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.CentripetalAccelerationCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CentripetalAccelerationCondition::CopyFrom(const CentripetalAccelerationCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.CentripetalAccelerationCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CentripetalAccelerationCondition::IsInitialized() const {
  return true;
}

void CentripetalAccelerationCondition::InternalSwap(CentripetalAccelerationCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, nullptr, GetArena());
  swap(use_score_, other->use_score_);
  swap(max_centripetal_acceleration_, other->max_centripetal_acceleration_);
  swap(single_deduction_, other->single_deduction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CentripetalAccelerationCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AccelerationCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<AccelerationCondition>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_use_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_single_deduction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString AccelerationCondition::_i_give_permission_to_break_this_code_default_name_{{{"acceleration", 12}}, {nullptr}};
AccelerationCondition::AccelerationCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.AccelerationCondition)
}
AccelerationCondition::AccelerationCondition(const AccelerationCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(nullptr);
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&use_score_, &from.use_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&single_deduction_) -
    reinterpret_cast<char*>(&use_score_)) + sizeof(single_deduction_));
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.AccelerationCondition)
}

void AccelerationCondition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccelerationCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  name_.UnsafeSetDefault(nullptr);
  use_score_ = false;
  min_acceleration_ = -1000;
  max_acceleration_ = 1000;
  single_deduction_ = 0.5;
}

AccelerationCondition::~AccelerationCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.AccelerationCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccelerationCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(nullptr);
}

void AccelerationCondition::ArenaDtor(void* object) {
  AccelerationCondition* _this = reinterpret_cast< AccelerationCondition* >(object);
  (void)_this;
}
void AccelerationCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccelerationCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccelerationCondition& AccelerationCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccelerationCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void AccelerationCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.AccelerationCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearToDefault(::apollo::simulation::AccelerationCondition::_i_give_permission_to_break_this_code_default_name_, GetArena());
     }
  if (cached_has_bits & 0x0000001eu) {
    use_score_ = false;
    min_acceleration_ = -1000;
    max_acceleration_ = 1000;
    single_deduction_ = 0.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccelerationCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1 [default = "acceleration"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.simulation.AccelerationCondition.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double min_acceleration = 2 [default = -1000];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_min_acceleration(&has_bits);
          min_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_acceleration = 3 [default = 1000];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max_acceleration(&has_bits);
          max_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool use_score = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_use_score(&has_bits);
          use_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double single_deduction = 5 [default = 0.5];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_single_deduction(&has_bits);
          single_deduction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccelerationCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.AccelerationCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [default = "acceleration"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.simulation.AccelerationCondition.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional double min_acceleration = 2 [default = -1000];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_min_acceleration(), target);
  }

  // optional double max_acceleration = 3 [default = 1000];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_acceleration(), target);
  }

  // optional bool use_score = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_use_score(), target);
  }

  // optional double single_deduction = 5 [default = 0.5];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_single_deduction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.AccelerationCondition)
  return target;
}

size_t AccelerationCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.AccelerationCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1 [default = "acceleration"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bool use_score = 4 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional double min_acceleration = 2 [default = -1000];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double max_acceleration = 3 [default = 1000];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double single_deduction = 5 [default = 0.5];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccelerationCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.AccelerationCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const AccelerationCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccelerationCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.AccelerationCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.AccelerationCondition)
    MergeFrom(*source);
  }
}

void AccelerationCondition::MergeFrom(const AccelerationCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.AccelerationCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      use_score_ = from.use_score_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_acceleration_ = from.min_acceleration_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_acceleration_ = from.max_acceleration_;
    }
    if (cached_has_bits & 0x00000010u) {
      single_deduction_ = from.single_deduction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccelerationCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.AccelerationCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccelerationCondition::CopyFrom(const AccelerationCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.AccelerationCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccelerationCondition::IsInitialized() const {
  return true;
}

void AccelerationCondition::InternalSwap(AccelerationCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, nullptr, GetArena());
  swap(use_score_, other->use_score_);
  swap(min_acceleration_, other->min_acceleration_);
  swap(max_acceleration_, other->max_acceleration_);
  swap(single_deduction_, other->single_deduction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccelerationCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class JerkCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<JerkCondition>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_jerk(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_jerk(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString JerkCondition::_i_give_permission_to_break_this_code_default_name_{{{"jerk", 4}}, {nullptr}};
JerkCondition::JerkCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.JerkCondition)
}
JerkCondition::JerkCondition(const JerkCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(nullptr);
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&min_jerk_, &from.min_jerk_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_jerk_) -
    reinterpret_cast<char*>(&min_jerk_)) + sizeof(max_jerk_));
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.JerkCondition)
}

void JerkCondition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JerkCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  name_.UnsafeSetDefault(nullptr);
  min_jerk_ = -1000;
  max_jerk_ = 1000;
}

JerkCondition::~JerkCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.JerkCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JerkCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(nullptr);
}

void JerkCondition::ArenaDtor(void* object) {
  JerkCondition* _this = reinterpret_cast< JerkCondition* >(object);
  (void)_this;
}
void JerkCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JerkCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JerkCondition& JerkCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JerkCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void JerkCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.JerkCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearToDefault(::apollo::simulation::JerkCondition::_i_give_permission_to_break_this_code_default_name_, GetArena());
       }
    min_jerk_ = -1000;
    max_jerk_ = 1000;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JerkCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1 [default = "jerk"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.simulation.JerkCondition.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double min_jerk = 2 [default = -1000];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_min_jerk(&has_bits);
          min_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_jerk = 3 [default = 1000];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max_jerk(&has_bits);
          max_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JerkCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.JerkCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [default = "jerk"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.simulation.JerkCondition.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional double min_jerk = 2 [default = -1000];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_min_jerk(), target);
  }

  // optional double max_jerk = 3 [default = 1000];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_jerk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.JerkCondition)
  return target;
}

size_t JerkCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.JerkCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1 [default = "jerk"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional double min_jerk = 2 [default = -1000];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double max_jerk = 3 [default = 1000];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JerkCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.JerkCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const JerkCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JerkCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.JerkCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.JerkCondition)
    MergeFrom(*source);
  }
}

void JerkCondition::MergeFrom(const JerkCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.JerkCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      min_jerk_ = from.min_jerk_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_jerk_ = from.max_jerk_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JerkCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.JerkCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JerkCondition::CopyFrom(const JerkCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.JerkCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JerkCondition::IsInitialized() const {
  return true;
}

void JerkCondition::InternalSwap(JerkCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, nullptr, GetArena());
  swap(min_jerk_, other->min_jerk_);
  swap(max_jerk_, other->max_jerk_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JerkCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SpinCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<SpinCondition>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_spin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_spin(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString SpinCondition::_i_give_permission_to_break_this_code_default_name_{{{"spin", 4}}, {nullptr}};
SpinCondition::SpinCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.SpinCondition)
}
SpinCondition::SpinCondition(const SpinCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(nullptr);
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&min_spin_, &from.min_spin_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_spin_) -
    reinterpret_cast<char*>(&min_spin_)) + sizeof(max_spin_));
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.SpinCondition)
}

void SpinCondition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpinCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  name_.UnsafeSetDefault(nullptr);
  min_spin_ = -1000;
  max_spin_ = 1000;
}

SpinCondition::~SpinCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.SpinCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpinCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(nullptr);
}

void SpinCondition::ArenaDtor(void* object) {
  SpinCondition* _this = reinterpret_cast< SpinCondition* >(object);
  (void)_this;
}
void SpinCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpinCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpinCondition& SpinCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpinCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void SpinCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.SpinCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearToDefault(::apollo::simulation::SpinCondition::_i_give_permission_to_break_this_code_default_name_, GetArena());
       }
    min_spin_ = -1000;
    max_spin_ = 1000;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpinCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1 [default = "spin"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.simulation.SpinCondition.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double min_spin = 2 [default = -1000];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_min_spin(&has_bits);
          min_spin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_spin = 3 [default = 1000];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max_spin(&has_bits);
          max_spin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpinCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.SpinCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [default = "spin"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.simulation.SpinCondition.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional double min_spin = 2 [default = -1000];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_min_spin(), target);
  }

  // optional double max_spin = 3 [default = 1000];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_spin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.SpinCondition)
  return target;
}

size_t SpinCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.SpinCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1 [default = "spin"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional double min_spin = 2 [default = -1000];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double max_spin = 3 [default = 1000];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpinCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.SpinCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const SpinCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpinCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.SpinCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.SpinCondition)
    MergeFrom(*source);
  }
}

void SpinCondition::MergeFrom(const SpinCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.SpinCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      min_spin_ = from.min_spin_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_spin_ = from.max_spin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpinCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.SpinCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpinCondition::CopyFrom(const SpinCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.SpinCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpinCondition::IsInitialized() const {
  return true;
}

void SpinCondition::InternalSwap(SpinCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, nullptr, GetArena());
  swap(min_spin_, other->min_spin_);
  swap(max_spin_, other->max_spin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpinCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObjectOverlapCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectOverlapCondition>()._has_bits_);
  static void set_has_source_object_ids(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_object_ids(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_use_score(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ObjectOverlapCondition::ObjectOverlapCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ignore_object_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.ObjectOverlapCondition)
}
ObjectOverlapCondition::ObjectOverlapCondition(const ObjectOverlapCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ignore_object_ids_(from.ignore_object_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_object_ids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_source_object_ids()) {
    source_object_ids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source_object_ids(), 
      GetArena());
  }
  target_object_ids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_target_object_ids()) {
    target_object_ids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target_object_ids(), 
      GetArena());
  }
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_score_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(use_score_));
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.ObjectOverlapCondition)
}

void ObjectOverlapCondition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectOverlapCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  source_object_ids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_object_ids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&use_score_) -
      reinterpret_cast<char*>(&distance_)) + sizeof(use_score_));
}

ObjectOverlapCondition::~ObjectOverlapCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.ObjectOverlapCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectOverlapCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_object_ids_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_object_ids_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ObjectOverlapCondition::ArenaDtor(void* object) {
  ObjectOverlapCondition* _this = reinterpret_cast< ObjectOverlapCondition* >(object);
  (void)_this;
}
void ObjectOverlapCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectOverlapCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectOverlapCondition& ObjectOverlapCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectOverlapCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void ObjectOverlapCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.ObjectOverlapCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ignore_object_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      source_object_ids_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      target_object_ids_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_score_) -
        reinterpret_cast<char*>(&distance_)) + sizeof(use_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectOverlapCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string source_object_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_source_object_ids();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.simulation.ObjectOverlapCondition.source_object_ids");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string target_object_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_target_object_ids();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.simulation.ObjectOverlapCondition.target_object_ids");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.simulation.ObjectOverlapCondition.DirectionType direction = 4 [default = EXCLUDE_BACK];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::simulation::ObjectOverlapCondition_DirectionType_IsValid(val))) {
            _internal_set_direction(static_cast<::apollo::simulation::ObjectOverlapCondition_DirectionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated string ignore_object_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ignore_object_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.simulation.ObjectOverlapCondition.ignore_object_ids");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool use_score = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_use_score(&has_bits);
          use_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectOverlapCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.ObjectOverlapCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source_object_ids = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source_object_ids().data(), static_cast<int>(this->_internal_source_object_ids().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.simulation.ObjectOverlapCondition.source_object_ids");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source_object_ids(), target);
  }

  // optional string target_object_ids = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_target_object_ids().data(), static_cast<int>(this->_internal_target_object_ids().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.simulation.ObjectOverlapCondition.target_object_ids");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_target_object_ids(), target);
  }

  // optional double distance = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_distance(), target);
  }

  // optional .apollo.simulation.ObjectOverlapCondition.DirectionType direction = 4 [default = EXCLUDE_BACK];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_direction(), target);
  }

  // repeated string ignore_object_ids = 5;
  for (int i = 0, n = this->_internal_ignore_object_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ignore_object_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.simulation.ObjectOverlapCondition.ignore_object_ids");
    target = stream->WriteString(5, s, target);
  }

  // optional bool use_score = 6 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_use_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.ObjectOverlapCondition)
  return target;
}

size_t ObjectOverlapCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.ObjectOverlapCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ignore_object_ids = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ignore_object_ids_.size());
  for (int i = 0, n = ignore_object_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ignore_object_ids_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string source_object_ids = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_object_ids());
    }

    // optional string target_object_ids = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target_object_ids());
    }

    // optional double distance = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .apollo.simulation.ObjectOverlapCondition.DirectionType direction = 4 [default = EXCLUDE_BACK];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
    }

    // optional bool use_score = 6 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectOverlapCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.ObjectOverlapCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectOverlapCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectOverlapCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.ObjectOverlapCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.ObjectOverlapCondition)
    MergeFrom(*source);
  }
}

void ObjectOverlapCondition::MergeFrom(const ObjectOverlapCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.ObjectOverlapCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ignore_object_ids_.MergeFrom(from.ignore_object_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source_object_ids(from._internal_source_object_ids());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_target_object_ids(from._internal_target_object_ids());
    }
    if (cached_has_bits & 0x00000004u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00000010u) {
      use_score_ = from.use_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectOverlapCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.ObjectOverlapCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectOverlapCondition::CopyFrom(const ObjectOverlapCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.ObjectOverlapCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectOverlapCondition::IsInitialized() const {
  return true;
}

void ObjectOverlapCondition::InternalSwap(ObjectOverlapCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ignore_object_ids_.InternalSwap(&other->ignore_object_ids_);
  source_object_ids_.Swap(&other->source_object_ids_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_object_ids_.Swap(&other->target_object_ids_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectOverlapCondition, use_score_)
      + sizeof(ObjectOverlapCondition::use_score_)
      - PROTOBUF_FIELD_OFFSET(ObjectOverlapCondition, distance_)>(
          reinterpret_cast<char*>(&distance_),
          reinterpret_cast<char*>(&other->distance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectOverlapCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RegionOverlapCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionOverlapCondition>()._has_bits_);
  static void set_has_object_ids(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_require_fully_contain(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_use_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RegionOverlapCondition::RegionOverlapCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  region_corner_xy_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.RegionOverlapCondition)
}
RegionOverlapCondition::RegionOverlapCondition(const RegionOverlapCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      region_corner_xy_(from.region_corner_xy_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_ids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_object_ids()) {
    object_ids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_object_ids(), 
      GetArena());
  }
  ::memcpy(&heading_, &from.heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_score_) -
    reinterpret_cast<char*>(&heading_)) + sizeof(use_score_));
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.RegionOverlapCondition)
}

void RegionOverlapCondition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegionOverlapCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  object_ids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&use_score_) -
      reinterpret_cast<char*>(&heading_)) + sizeof(use_score_));
}

RegionOverlapCondition::~RegionOverlapCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.RegionOverlapCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegionOverlapCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  object_ids_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegionOverlapCondition::ArenaDtor(void* object) {
  RegionOverlapCondition* _this = reinterpret_cast< RegionOverlapCondition* >(object);
  (void)_this;
}
void RegionOverlapCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegionOverlapCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionOverlapCondition& RegionOverlapCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegionOverlapCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void RegionOverlapCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.RegionOverlapCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  region_corner_xy_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    object_ids_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_score_) -
        reinterpret_cast<char*>(&heading_)) + sizeof(use_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionOverlapCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string object_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_object_ids();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.simulation.RegionOverlapCondition.object_ids");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double region_corner_xy = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_region_corner_xy(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_region_corner_xy(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool require_fully_contain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_require_fully_contain(&has_bits);
          require_fully_contain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double heading = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool use_score = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_use_score(&has_bits);
          use_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionOverlapCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.RegionOverlapCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string object_ids = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_object_ids().data(), static_cast<int>(this->_internal_object_ids().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.simulation.RegionOverlapCondition.object_ids");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_object_ids(), target);
  }

  // repeated double region_corner_xy = 2 [packed = true];
  if (this->_internal_region_corner_xy_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_region_corner_xy(), target);
  }

  // optional bool require_fully_contain = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_require_fully_contain(), target);
  }

  // optional double heading = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_heading(), target);
  }

  // optional bool use_score = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_use_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.RegionOverlapCondition)
  return target;
}

size_t RegionOverlapCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.RegionOverlapCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double region_corner_xy = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_region_corner_xy_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _region_corner_xy_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string object_ids = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_object_ids());
    }

    // optional double heading = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool require_fully_contain = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool use_score = 5 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionOverlapCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.RegionOverlapCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionOverlapCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionOverlapCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.RegionOverlapCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.RegionOverlapCondition)
    MergeFrom(*source);
  }
}

void RegionOverlapCondition::MergeFrom(const RegionOverlapCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.RegionOverlapCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  region_corner_xy_.MergeFrom(from.region_corner_xy_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_object_ids(from._internal_object_ids());
    }
    if (cached_has_bits & 0x00000002u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000004u) {
      require_fully_contain_ = from.require_fully_contain_;
    }
    if (cached_has_bits & 0x00000008u) {
      use_score_ = from.use_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegionOverlapCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.RegionOverlapCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionOverlapCondition::CopyFrom(const RegionOverlapCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.RegionOverlapCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionOverlapCondition::IsInitialized() const {
  return true;
}

void RegionOverlapCondition::InternalSwap(RegionOverlapCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  region_corner_xy_.InternalSwap(&other->region_corner_xy_);
  object_ids_.Swap(&other->object_ids_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegionOverlapCondition, use_score_)
      + sizeof(RegionOverlapCondition::use_score_)
      - PROTOBUF_FIELD_OFFSET(RegionOverlapCondition, heading_)>(
          reinterpret_cast<char*>(&heading_),
          reinterpret_cast<char*>(&other->heading_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionOverlapCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RegionOverlapLWCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionOverlapLWCondition>()._has_bits_);
  static void set_has_object_ids(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_require_fully_contain(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_use_score(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

RegionOverlapLWCondition::RegionOverlapLWCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.RegionOverlapLWCondition)
}
RegionOverlapLWCondition::RegionOverlapLWCondition(const RegionOverlapLWCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_ids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_object_ids()) {
    object_ids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_object_ids(), 
      GetArena());
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_score_) -
    reinterpret_cast<char*>(&x_)) + sizeof(use_score_));
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.RegionOverlapLWCondition)
}

void RegionOverlapLWCondition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegionOverlapLWCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  object_ids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&use_score_) -
      reinterpret_cast<char*>(&x_)) + sizeof(use_score_));
}

RegionOverlapLWCondition::~RegionOverlapLWCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.RegionOverlapLWCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegionOverlapLWCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  object_ids_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegionOverlapLWCondition::ArenaDtor(void* object) {
  RegionOverlapLWCondition* _this = reinterpret_cast< RegionOverlapLWCondition* >(object);
  (void)_this;
}
void RegionOverlapLWCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegionOverlapLWCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionOverlapLWCondition& RegionOverlapLWCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegionOverlapLWCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void RegionOverlapLWCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.RegionOverlapLWCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    object_ids_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_score_) -
        reinterpret_cast<char*>(&x_)) + sizeof(use_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionOverlapLWCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string object_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_object_ids();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.simulation.RegionOverlapLWCondition.object_ids");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool require_fully_contain = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_require_fully_contain(&has_bits);
          require_fully_contain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_score = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_use_score(&has_bits);
          use_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionOverlapLWCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.RegionOverlapLWCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string object_ids = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_object_ids().data(), static_cast<int>(this->_internal_object_ids().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.simulation.RegionOverlapLWCondition.object_ids");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_object_ids(), target);
  }

  // optional double x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_x(), target);
  }

  // optional double y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_y(), target);
  }

  // optional double length = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_length(), target);
  }

  // optional double width = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_width(), target);
  }

  // optional bool require_fully_contain = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_require_fully_contain(), target);
  }

  // optional bool use_score = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_use_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.RegionOverlapLWCondition)
  return target;
}

size_t RegionOverlapLWCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.RegionOverlapLWCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string object_ids = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_object_ids());
    }

    // optional double x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double length = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double width = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional bool require_fully_contain = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool use_score = 7 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionOverlapLWCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.RegionOverlapLWCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionOverlapLWCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionOverlapLWCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.RegionOverlapLWCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.RegionOverlapLWCondition)
    MergeFrom(*source);
  }
}

void RegionOverlapLWCondition::MergeFrom(const RegionOverlapLWCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.RegionOverlapLWCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_object_ids(from._internal_object_ids());
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000010u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000020u) {
      require_fully_contain_ = from.require_fully_contain_;
    }
    if (cached_has_bits & 0x00000040u) {
      use_score_ = from.use_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegionOverlapLWCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.RegionOverlapLWCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionOverlapLWCondition::CopyFrom(const RegionOverlapLWCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.RegionOverlapLWCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionOverlapLWCondition::IsInitialized() const {
  return true;
}

void RegionOverlapLWCondition::InternalSwap(RegionOverlapLWCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  object_ids_.Swap(&other->object_ids_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegionOverlapLWCondition, use_score_)
      + sizeof(RegionOverlapLWCondition::use_score_)
      - PROTOBUF_FIELD_OFFSET(RegionOverlapLWCondition, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionOverlapLWCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OnRoadCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<OnRoadCondition>()._has_bits_);
  static void set_has_use_road_boundary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

OnRoadCondition::OnRoadCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.OnRoadCondition)
}
OnRoadCondition::OnRoadCondition(const OnRoadCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&use_road_boundary_, &from.use_road_boundary_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_score_) -
    reinterpret_cast<char*>(&use_road_boundary_)) + sizeof(use_score_));
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.OnRoadCondition)
}

void OnRoadCondition::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&use_road_boundary_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&use_score_) -
      reinterpret_cast<char*>(&use_road_boundary_)) + sizeof(use_score_));
}

OnRoadCondition::~OnRoadCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.OnRoadCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OnRoadCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OnRoadCondition::ArenaDtor(void* object) {
  OnRoadCondition* _this = reinterpret_cast< OnRoadCondition* >(object);
  (void)_this;
}
void OnRoadCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OnRoadCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnRoadCondition& OnRoadCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OnRoadCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void OnRoadCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.OnRoadCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&use_road_boundary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_score_) -
      reinterpret_cast<char*>(&use_road_boundary_)) + sizeof(use_score_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnRoadCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool use_road_boundary = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_use_road_boundary(&has_bits);
          use_road_boundary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_score = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_use_score(&has_bits);
          use_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OnRoadCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.OnRoadCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_road_boundary = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_use_road_boundary(), target);
  }

  // optional bool use_score = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_use_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.OnRoadCondition)
  return target;
}

size_t OnRoadCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.OnRoadCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool use_road_boundary = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool use_score = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnRoadCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.OnRoadCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const OnRoadCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnRoadCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.OnRoadCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.OnRoadCondition)
    MergeFrom(*source);
  }
}

void OnRoadCondition::MergeFrom(const OnRoadCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.OnRoadCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      use_road_boundary_ = from.use_road_boundary_;
    }
    if (cached_has_bits & 0x00000002u) {
      use_score_ = from.use_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OnRoadCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.OnRoadCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnRoadCondition::CopyFrom(const OnRoadCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.OnRoadCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnRoadCondition::IsInitialized() const {
  return true;
}

void OnRoadCondition::InternalSwap(OnRoadCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OnRoadCondition, use_score_)
      + sizeof(OnRoadCondition::use_score_)
      - PROTOBUF_FIELD_OFFSET(OnRoadCondition, use_road_boundary_)>(
          reinterpret_cast<char*>(&use_road_boundary_),
          reinterpret_cast<char*>(&other->use_road_boundary_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OnRoadCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RunRedLightCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<RunRedLightCondition>()._has_bits_);
  static void set_has_use_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RunRedLightCondition::RunRedLightCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.RunRedLightCondition)
}
RunRedLightCondition::RunRedLightCondition(const RunRedLightCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  use_score_ = from.use_score_;
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.RunRedLightCondition)
}

void RunRedLightCondition::SharedCtor() {
  use_score_ = false;
}

RunRedLightCondition::~RunRedLightCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.RunRedLightCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RunRedLightCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RunRedLightCondition::ArenaDtor(void* object) {
  RunRedLightCondition* _this = reinterpret_cast< RunRedLightCondition* >(object);
  (void)_this;
}
void RunRedLightCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RunRedLightCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunRedLightCondition& RunRedLightCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunRedLightCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void RunRedLightCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.RunRedLightCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  use_score_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunRedLightCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool use_score = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_use_score(&has_bits);
          use_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RunRedLightCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.RunRedLightCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_score = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_use_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.RunRedLightCondition)
  return target;
}

size_t RunRedLightCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.RunRedLightCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool use_score = 1 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunRedLightCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.RunRedLightCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const RunRedLightCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RunRedLightCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.RunRedLightCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.RunRedLightCondition)
    MergeFrom(*source);
  }
}

void RunRedLightCondition::MergeFrom(const RunRedLightCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.RunRedLightCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_use_score()) {
    _internal_set_use_score(from._internal_use_score());
  }
}

void RunRedLightCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.RunRedLightCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunRedLightCondition::CopyFrom(const RunRedLightCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.RunRedLightCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunRedLightCondition::IsInitialized() const {
  return true;
}

void RunRedLightCondition::InternalSwap(RunRedLightCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(use_score_, other->use_score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RunRedLightCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RedLightStopCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<RedLightStopCondition>()._has_bits_);
  static void set_has_min_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_use_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_single_deduction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RedLightStopCondition::RedLightStopCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.RedLightStopCondition)
}
RedLightStopCondition::RedLightStopCondition(const RedLightStopCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&use_score_, &from.use_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&single_deduction_) -
    reinterpret_cast<char*>(&use_score_)) + sizeof(single_deduction_));
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.RedLightStopCondition)
}

void RedLightStopCondition::SharedCtor() {
  use_score_ = false;
  min_distance_ = 2;
  max_distance_ = 2.2;
  single_deduction_ = 5;
}

RedLightStopCondition::~RedLightStopCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.RedLightStopCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RedLightStopCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RedLightStopCondition::ArenaDtor(void* object) {
  RedLightStopCondition* _this = reinterpret_cast< RedLightStopCondition* >(object);
  (void)_this;
}
void RedLightStopCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedLightStopCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedLightStopCondition& RedLightStopCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedLightStopCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void RedLightStopCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.RedLightStopCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    use_score_ = false;
    min_distance_ = 2;
    max_distance_ = 2.2;
    single_deduction_ = 5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedLightStopCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double min_distance = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_min_distance(&has_bits);
          min_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_distance = 2 [default = 2.2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_max_distance(&has_bits);
          max_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool use_score = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_use_score(&has_bits);
          use_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double single_deduction = 4 [default = 5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_single_deduction(&has_bits);
          single_deduction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedLightStopCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.RedLightStopCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min_distance = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_min_distance(), target);
  }

  // optional double max_distance = 2 [default = 2.2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_distance(), target);
  }

  // optional bool use_score = 3 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_use_score(), target);
  }

  // optional double single_deduction = 4 [default = 5];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_single_deduction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.RedLightStopCondition)
  return target;
}

size_t RedLightStopCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.RedLightStopCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool use_score = 3 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional double min_distance = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double max_distance = 2 [default = 2.2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double single_deduction = 4 [default = 5];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedLightStopCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.RedLightStopCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const RedLightStopCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RedLightStopCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.RedLightStopCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.RedLightStopCondition)
    MergeFrom(*source);
  }
}

void RedLightStopCondition::MergeFrom(const RedLightStopCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.RedLightStopCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      use_score_ = from.use_score_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_distance_ = from.min_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_distance_ = from.max_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      single_deduction_ = from.single_deduction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RedLightStopCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.RedLightStopCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedLightStopCondition::CopyFrom(const RedLightStopCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.RedLightStopCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedLightStopCondition::IsInitialized() const {
  return true;
}

void RedLightStopCondition::InternalSwap(RedLightStopCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(use_score_, other->use_score_);
  swap(min_distance_, other->min_distance_);
  swap(max_distance_, other->max_distance_);
  swap(single_deduction_, other->single_deduction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RedLightStopCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChangeLaneAtJunctionCondition::_Internal {
 public:
};

ChangeLaneAtJunctionCondition::ChangeLaneAtJunctionCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.ChangeLaneAtJunctionCondition)
}
ChangeLaneAtJunctionCondition::ChangeLaneAtJunctionCondition(const ChangeLaneAtJunctionCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.ChangeLaneAtJunctionCondition)
}

void ChangeLaneAtJunctionCondition::SharedCtor() {
}

ChangeLaneAtJunctionCondition::~ChangeLaneAtJunctionCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.ChangeLaneAtJunctionCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangeLaneAtJunctionCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChangeLaneAtJunctionCondition::ArenaDtor(void* object) {
  ChangeLaneAtJunctionCondition* _this = reinterpret_cast< ChangeLaneAtJunctionCondition* >(object);
  (void)_this;
}
void ChangeLaneAtJunctionCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeLaneAtJunctionCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeLaneAtJunctionCondition& ChangeLaneAtJunctionCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangeLaneAtJunctionCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void ChangeLaneAtJunctionCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.ChangeLaneAtJunctionCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeLaneAtJunctionCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeLaneAtJunctionCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.ChangeLaneAtJunctionCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.ChangeLaneAtJunctionCondition)
  return target;
}

size_t ChangeLaneAtJunctionCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.ChangeLaneAtJunctionCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeLaneAtJunctionCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.ChangeLaneAtJunctionCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeLaneAtJunctionCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeLaneAtJunctionCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.ChangeLaneAtJunctionCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.ChangeLaneAtJunctionCondition)
    MergeFrom(*source);
  }
}

void ChangeLaneAtJunctionCondition::MergeFrom(const ChangeLaneAtJunctionCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.ChangeLaneAtJunctionCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChangeLaneAtJunctionCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.ChangeLaneAtJunctionCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeLaneAtJunctionCondition::CopyFrom(const ChangeLaneAtJunctionCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.ChangeLaneAtJunctionCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeLaneAtJunctionCondition::IsInitialized() const {
  return true;
}

void ChangeLaneAtJunctionCondition::InternalSwap(ChangeLaneAtJunctionCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeLaneAtJunctionCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RoutingCondition::_Internal {
 public:
};

RoutingCondition::RoutingCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.RoutingCondition)
}
RoutingCondition::RoutingCondition(const RoutingCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.RoutingCondition)
}

void RoutingCondition::SharedCtor() {
}

RoutingCondition::~RoutingCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.RoutingCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoutingCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoutingCondition::ArenaDtor(void* object) {
  RoutingCondition* _this = reinterpret_cast< RoutingCondition* >(object);
  (void)_this;
}
void RoutingCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutingCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutingCondition& RoutingCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutingCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void RoutingCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.RoutingCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.RoutingCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.RoutingCondition)
  return target;
}

size_t RoutingCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.RoutingCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.RoutingCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutingCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.RoutingCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.RoutingCondition)
    MergeFrom(*source);
  }
}

void RoutingCondition::MergeFrom(const RoutingCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.RoutingCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RoutingCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.RoutingCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingCondition::CopyFrom(const RoutingCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.RoutingCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingCondition::IsInitialized() const {
  return true;
}

void RoutingCondition::InternalSwap(RoutingCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CrosswalkYieldCondition::_Internal {
 public:
};

CrosswalkYieldCondition::CrosswalkYieldCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.CrosswalkYieldCondition)
}
CrosswalkYieldCondition::CrosswalkYieldCondition(const CrosswalkYieldCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.CrosswalkYieldCondition)
}

void CrosswalkYieldCondition::SharedCtor() {
}

CrosswalkYieldCondition::~CrosswalkYieldCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.CrosswalkYieldCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CrosswalkYieldCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CrosswalkYieldCondition::ArenaDtor(void* object) {
  CrosswalkYieldCondition* _this = reinterpret_cast< CrosswalkYieldCondition* >(object);
  (void)_this;
}
void CrosswalkYieldCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CrosswalkYieldCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CrosswalkYieldCondition& CrosswalkYieldCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CrosswalkYieldCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void CrosswalkYieldCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.CrosswalkYieldCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CrosswalkYieldCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CrosswalkYieldCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.CrosswalkYieldCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.CrosswalkYieldCondition)
  return target;
}

size_t CrosswalkYieldCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.CrosswalkYieldCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrosswalkYieldCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.CrosswalkYieldCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const CrosswalkYieldCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CrosswalkYieldCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.CrosswalkYieldCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.CrosswalkYieldCondition)
    MergeFrom(*source);
  }
}

void CrosswalkYieldCondition::MergeFrom(const CrosswalkYieldCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.CrosswalkYieldCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CrosswalkYieldCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.CrosswalkYieldCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrosswalkYieldCondition::CopyFrom(const CrosswalkYieldCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.CrosswalkYieldCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrosswalkYieldCondition::IsInitialized() const {
  return true;
}

void CrosswalkYieldCondition::InternalSwap(CrosswalkYieldCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CrosswalkYieldCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CrosswalkStopCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<CrosswalkStopCondition>()._has_bits_);
  static void set_has_min_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_use_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_single_deduction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CrosswalkStopCondition::CrosswalkStopCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.CrosswalkStopCondition)
}
CrosswalkStopCondition::CrosswalkStopCondition(const CrosswalkStopCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&use_score_, &from.use_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&single_deduction_) -
    reinterpret_cast<char*>(&use_score_)) + sizeof(single_deduction_));
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.CrosswalkStopCondition)
}

void CrosswalkStopCondition::SharedCtor() {
  use_score_ = false;
  min_distance_ = 2.2;
  max_distance_ = 2.7;
  single_deduction_ = 5;
}

CrosswalkStopCondition::~CrosswalkStopCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.CrosswalkStopCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CrosswalkStopCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CrosswalkStopCondition::ArenaDtor(void* object) {
  CrosswalkStopCondition* _this = reinterpret_cast< CrosswalkStopCondition* >(object);
  (void)_this;
}
void CrosswalkStopCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CrosswalkStopCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CrosswalkStopCondition& CrosswalkStopCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CrosswalkStopCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void CrosswalkStopCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.CrosswalkStopCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    use_score_ = false;
    min_distance_ = 2.2;
    max_distance_ = 2.7;
    single_deduction_ = 5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CrosswalkStopCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double min_distance = 1 [default = 2.2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_min_distance(&has_bits);
          min_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_distance = 2 [default = 2.7];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_max_distance(&has_bits);
          max_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool use_score = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_use_score(&has_bits);
          use_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double single_deduction = 4 [default = 5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_single_deduction(&has_bits);
          single_deduction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CrosswalkStopCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.CrosswalkStopCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min_distance = 1 [default = 2.2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_min_distance(), target);
  }

  // optional double max_distance = 2 [default = 2.7];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_distance(), target);
  }

  // optional bool use_score = 3 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_use_score(), target);
  }

  // optional double single_deduction = 4 [default = 5];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_single_deduction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.CrosswalkStopCondition)
  return target;
}

size_t CrosswalkStopCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.CrosswalkStopCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool use_score = 3 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional double min_distance = 1 [default = 2.2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double max_distance = 2 [default = 2.7];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double single_deduction = 4 [default = 5];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrosswalkStopCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.CrosswalkStopCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const CrosswalkStopCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CrosswalkStopCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.CrosswalkStopCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.CrosswalkStopCondition)
    MergeFrom(*source);
  }
}

void CrosswalkStopCondition::MergeFrom(const CrosswalkStopCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.CrosswalkStopCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      use_score_ = from.use_score_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_distance_ = from.min_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_distance_ = from.max_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      single_deduction_ = from.single_deduction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CrosswalkStopCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.CrosswalkStopCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrosswalkStopCondition::CopyFrom(const CrosswalkStopCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.CrosswalkStopCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrosswalkStopCondition::IsInitialized() const {
  return true;
}

void CrosswalkStopCondition::InternalSwap(CrosswalkStopCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(use_score_, other->use_score_);
  swap(min_distance_, other->min_distance_);
  swap(max_distance_, other->max_distance_);
  swap(single_deduction_, other->single_deduction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CrosswalkStopCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AbnormalStopCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<AbnormalStopCondition>()._has_bits_);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AbnormalStopCondition::AbnormalStopCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.AbnormalStopCondition)
}
AbnormalStopCondition::AbnormalStopCondition(const AbnormalStopCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&x_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.AbnormalStopCondition)
}

void AbnormalStopCondition::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  duration_ = 5;
  distance_ = 10;
}

AbnormalStopCondition::~AbnormalStopCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.AbnormalStopCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AbnormalStopCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AbnormalStopCondition::ArenaDtor(void* object) {
  AbnormalStopCondition* _this = reinterpret_cast< AbnormalStopCondition* >(object);
  (void)_this;
}
void AbnormalStopCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AbnormalStopCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AbnormalStopCondition& AbnormalStopCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AbnormalStopCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void AbnormalStopCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.AbnormalStopCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
    duration_ = 5;
    distance_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbnormalStopCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double duration = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double distance = 2 [default = 10];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AbnormalStopCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.AbnormalStopCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double duration = 1 [default = 5];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_duration(), target);
  }

  // optional double distance = 2 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_distance(), target);
  }

  // optional double x = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_x(), target);
  }

  // optional double y = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.AbnormalStopCondition)
  return target;
}

size_t AbnormalStopCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.AbnormalStopCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double x = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double duration = 1 [default = 5];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double distance = 2 [default = 10];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AbnormalStopCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.AbnormalStopCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const AbnormalStopCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AbnormalStopCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.AbnormalStopCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.AbnormalStopCondition)
    MergeFrom(*source);
  }
}

void AbnormalStopCondition::MergeFrom(const AbnormalStopCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.AbnormalStopCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AbnormalStopCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.AbnormalStopCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbnormalStopCondition::CopyFrom(const AbnormalStopCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.AbnormalStopCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbnormalStopCondition::IsInitialized() const {
  return true;
}

void AbnormalStopCondition::InternalSwap(AbnormalStopCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AbnormalStopCondition, y_)
      + sizeof(AbnormalStopCondition::y_)
      - PROTOBUF_FIELD_OFFSET(AbnormalStopCondition, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
  swap(duration_, other->duration_);
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AbnormalStopCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BrakeTapCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<BrakeTapCondition>()._has_bits_);
  static void set_has_min_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BrakeTapCondition::BrakeTapCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.BrakeTapCondition)
}
BrakeTapCondition::BrakeTapCondition(const BrakeTapCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_duration_, &from.min_duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_duration_) -
    reinterpret_cast<char*>(&min_duration_)) + sizeof(max_duration_));
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.BrakeTapCondition)
}

void BrakeTapCondition::SharedCtor() {
  min_duration_ = 1;
  max_duration_ = 4;
}

BrakeTapCondition::~BrakeTapCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.BrakeTapCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BrakeTapCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BrakeTapCondition::ArenaDtor(void* object) {
  BrakeTapCondition* _this = reinterpret_cast< BrakeTapCondition* >(object);
  (void)_this;
}
void BrakeTapCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BrakeTapCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BrakeTapCondition& BrakeTapCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BrakeTapCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void BrakeTapCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.BrakeTapCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    min_duration_ = 1;
    max_duration_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BrakeTapCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double min_duration = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_min_duration(&has_bits);
          min_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_duration = 2 [default = 4];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_max_duration(&has_bits);
          max_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BrakeTapCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.BrakeTapCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min_duration = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_min_duration(), target);
  }

  // optional double max_duration = 2 [default = 4];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.BrakeTapCondition)
  return target;
}

size_t BrakeTapCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.BrakeTapCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double min_duration = 1 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double max_duration = 2 [default = 4];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BrakeTapCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.BrakeTapCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const BrakeTapCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BrakeTapCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.BrakeTapCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.BrakeTapCondition)
    MergeFrom(*source);
  }
}

void BrakeTapCondition::MergeFrom(const BrakeTapCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.BrakeTapCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      min_duration_ = from.min_duration_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_duration_ = from.max_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BrakeTapCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.BrakeTapCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrakeTapCondition::CopyFrom(const BrakeTapCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.BrakeTapCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrakeTapCondition::IsInitialized() const {
  return true;
}

void BrakeTapCondition::InternalSwap(BrakeTapCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_duration_, other->min_duration_);
  swap(max_duration_, other->max_duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BrakeTapCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RunStopSignCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<RunStopSignCondition>()._has_bits_);
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RunStopSignCondition::RunStopSignCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.RunStopSignCondition)
}
RunStopSignCondition::RunStopSignCondition(const RunStopSignCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.RunStopSignCondition)
}

void RunStopSignCondition::SharedCtor() {
  distance_ = 2;
}

RunStopSignCondition::~RunStopSignCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.RunStopSignCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RunStopSignCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RunStopSignCondition::ArenaDtor(void* object) {
  RunStopSignCondition* _this = reinterpret_cast< RunStopSignCondition* >(object);
  (void)_this;
}
void RunStopSignCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RunStopSignCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunStopSignCondition& RunStopSignCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunStopSignCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void RunStopSignCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.RunStopSignCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  distance_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunStopSignCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double distance = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RunStopSignCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.RunStopSignCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double distance = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.RunStopSignCondition)
  return target;
}

size_t RunStopSignCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.RunStopSignCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double distance = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunStopSignCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.RunStopSignCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const RunStopSignCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RunStopSignCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.RunStopSignCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.RunStopSignCondition)
    MergeFrom(*source);
  }
}

void RunStopSignCondition::MergeFrom(const RunStopSignCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.RunStopSignCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_distance()) {
    _internal_set_distance(from._internal_distance());
  }
}

void RunStopSignCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.RunStopSignCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunStopSignCondition::CopyFrom(const RunStopSignCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.RunStopSignCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunStopSignCondition::IsInitialized() const {
  return true;
}

void RunStopSignCondition::InternalSwap(RunStopSignCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RunStopSignCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CheckpointCondition::_Internal {
 public:
};

CheckpointCondition::CheckpointCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  checkpoint_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.CheckpointCondition)
}
CheckpointCondition::CheckpointCondition(const CheckpointCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      checkpoint_(from.checkpoint_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.CheckpointCondition)
}

void CheckpointCondition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckpointCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
}

CheckpointCondition::~CheckpointCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.CheckpointCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckpointCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CheckpointCondition::ArenaDtor(void* object) {
  CheckpointCondition* _this = reinterpret_cast< CheckpointCondition* >(object);
  (void)_this;
}
void CheckpointCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckpointCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckpointCondition& CheckpointCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckpointCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void CheckpointCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.CheckpointCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  checkpoint_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckpointCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.simulation.Condition checkpoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_checkpoint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckpointCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.CheckpointCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.simulation.Condition checkpoint = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_checkpoint_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_checkpoint(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.CheckpointCondition)
  return target;
}

size_t CheckpointCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.CheckpointCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.simulation.Condition checkpoint = 1;
  total_size += 1UL * this->_internal_checkpoint_size();
  for (const auto& msg : this->checkpoint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckpointCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.CheckpointCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckpointCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckpointCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.CheckpointCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.CheckpointCondition)
    MergeFrom(*source);
  }
}

void CheckpointCondition::MergeFrom(const CheckpointCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.CheckpointCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  checkpoint_.MergeFrom(from.checkpoint_);
}

void CheckpointCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.CheckpointCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckpointCondition::CopyFrom(const CheckpointCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.CheckpointCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckpointCondition::IsInitialized() const {
  return true;
}

void CheckpointCondition::InternalSwap(CheckpointCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  checkpoint_.InternalSwap(&other->checkpoint_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckpointCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DistToEndCondition::_Internal {
 public:
};

DistToEndCondition::DistToEndCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.DistToEndCondition)
}
DistToEndCondition::DistToEndCondition(const DistToEndCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.DistToEndCondition)
}

void DistToEndCondition::SharedCtor() {
}

DistToEndCondition::~DistToEndCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.DistToEndCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DistToEndCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DistToEndCondition::ArenaDtor(void* object) {
  DistToEndCondition* _this = reinterpret_cast< DistToEndCondition* >(object);
  (void)_this;
}
void DistToEndCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DistToEndCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DistToEndCondition& DistToEndCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DistToEndCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void DistToEndCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.DistToEndCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DistToEndCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DistToEndCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.DistToEndCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.DistToEndCondition)
  return target;
}

size_t DistToEndCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.DistToEndCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistToEndCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.DistToEndCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const DistToEndCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DistToEndCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.DistToEndCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.DistToEndCondition)
    MergeFrom(*source);
  }
}

void DistToEndCondition::MergeFrom(const DistToEndCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.DistToEndCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DistToEndCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.DistToEndCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistToEndCondition::CopyFrom(const DistToEndCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.DistToEndCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistToEndCondition::IsInitialized() const {
  return true;
}

void DistToEndCondition::InternalSwap(DistToEndCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DistToEndCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DistToLaneCenterCondition::_Internal {
 public:
};

DistToLaneCenterCondition::DistToLaneCenterCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.DistToLaneCenterCondition)
}
DistToLaneCenterCondition::DistToLaneCenterCondition(const DistToLaneCenterCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.DistToLaneCenterCondition)
}

void DistToLaneCenterCondition::SharedCtor() {
}

DistToLaneCenterCondition::~DistToLaneCenterCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.DistToLaneCenterCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DistToLaneCenterCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DistToLaneCenterCondition::ArenaDtor(void* object) {
  DistToLaneCenterCondition* _this = reinterpret_cast< DistToLaneCenterCondition* >(object);
  (void)_this;
}
void DistToLaneCenterCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DistToLaneCenterCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DistToLaneCenterCondition& DistToLaneCenterCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DistToLaneCenterCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void DistToLaneCenterCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.DistToLaneCenterCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DistToLaneCenterCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DistToLaneCenterCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.DistToLaneCenterCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.DistToLaneCenterCondition)
  return target;
}

size_t DistToLaneCenterCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.DistToLaneCenterCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistToLaneCenterCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.DistToLaneCenterCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const DistToLaneCenterCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DistToLaneCenterCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.DistToLaneCenterCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.DistToLaneCenterCondition)
    MergeFrom(*source);
  }
}

void DistToLaneCenterCondition::MergeFrom(const DistToLaneCenterCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.DistToLaneCenterCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DistToLaneCenterCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.DistToLaneCenterCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistToLaneCenterCondition::CopyFrom(const DistToLaneCenterCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.DistToLaneCenterCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistToLaneCenterCondition::IsInitialized() const {
  return true;
}

void DistToLaneCenterCondition::InternalSwap(DistToLaneCenterCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DistToLaneCenterCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TimeLimitCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<TimeLimitCondition>()._has_bits_);
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TimeLimitCondition::TimeLimitCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.TimeLimitCondition)
}
TimeLimitCondition::TimeLimitCondition(const TimeLimitCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timeout_, &from.timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_score_) -
    reinterpret_cast<char*>(&timeout_)) + sizeof(use_score_));
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.TimeLimitCondition)
}

void TimeLimitCondition::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&use_score_) -
      reinterpret_cast<char*>(&timeout_)) + sizeof(use_score_));
}

TimeLimitCondition::~TimeLimitCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.TimeLimitCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeLimitCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TimeLimitCondition::ArenaDtor(void* object) {
  TimeLimitCondition* _this = reinterpret_cast< TimeLimitCondition* >(object);
  (void)_this;
}
void TimeLimitCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeLimitCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeLimitCondition& TimeLimitCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeLimitCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void TimeLimitCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.TimeLimitCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&timeout_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_score_) -
        reinterpret_cast<char*>(&timeout_)) + sizeof(use_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeLimitCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double timeout = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool use_score = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_use_score(&has_bits);
          use_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeLimitCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.TimeLimitCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timeout = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_timeout(), target);
  }

  // optional bool use_score = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_use_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.TimeLimitCondition)
  return target;
}

size_t TimeLimitCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.TimeLimitCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double timeout = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool use_score = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeLimitCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.TimeLimitCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeLimitCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeLimitCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.TimeLimitCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.TimeLimitCondition)
    MergeFrom(*source);
  }
}

void TimeLimitCondition::MergeFrom(const TimeLimitCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.TimeLimitCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      timeout_ = from.timeout_;
    }
    if (cached_has_bits & 0x00000002u) {
      use_score_ = from.use_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimeLimitCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.TimeLimitCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeLimitCondition::CopyFrom(const TimeLimitCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.TimeLimitCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeLimitCondition::IsInitialized() const {
  return true;
}

void TimeLimitCondition::InternalSwap(TimeLimitCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeLimitCondition, use_score_)
      + sizeof(TimeLimitCondition::use_score_)
      - PROTOBUF_FIELD_OFFSET(TimeLimitCondition, timeout_)>(
          reinterpret_cast<char*>(&timeout_),
          reinterpret_cast<char*>(&other->timeout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeLimitCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SpeedbumpLimitCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeedbumpLimitCondition>()._has_bits_);
  static void set_has_speedbump_half_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deduction_speed_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_use_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_single_deduction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

SpeedbumpLimitCondition::SpeedbumpLimitCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.SpeedbumpLimitCondition)
}
SpeedbumpLimitCondition::SpeedbumpLimitCondition(const SpeedbumpLimitCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&use_score_, &from.use_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&single_deduction_) -
    reinterpret_cast<char*>(&use_score_)) + sizeof(single_deduction_));
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.SpeedbumpLimitCondition)
}

void SpeedbumpLimitCondition::SharedCtor() {
  use_score_ = false;
  speedbump_half_width_ = 0.2;
  max_speed_ = 3;
  deduction_speed_unit_ = 1;
  single_deduction_ = 5;
}

SpeedbumpLimitCondition::~SpeedbumpLimitCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.SpeedbumpLimitCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpeedbumpLimitCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpeedbumpLimitCondition::ArenaDtor(void* object) {
  SpeedbumpLimitCondition* _this = reinterpret_cast< SpeedbumpLimitCondition* >(object);
  (void)_this;
}
void SpeedbumpLimitCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeedbumpLimitCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeedbumpLimitCondition& SpeedbumpLimitCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpeedbumpLimitCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void SpeedbumpLimitCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.SpeedbumpLimitCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    use_score_ = false;
    speedbump_half_width_ = 0.2;
    max_speed_ = 3;
    deduction_speed_unit_ = 1;
    single_deduction_ = 5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedbumpLimitCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double speedbump_half_width = 1 [default = 0.2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_speedbump_half_width(&has_bits);
          speedbump_half_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_speed = 2 [default = 3];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_max_speed(&has_bits);
          max_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double deduction_speed_unit = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_deduction_speed_unit(&has_bits);
          deduction_speed_unit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool use_score = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_use_score(&has_bits);
          use_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double single_deduction = 5 [default = 5];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_single_deduction(&has_bits);
          single_deduction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeedbumpLimitCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.SpeedbumpLimitCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double speedbump_half_width = 1 [default = 0.2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_speedbump_half_width(), target);
  }

  // optional double max_speed = 2 [default = 3];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_speed(), target);
  }

  // optional double deduction_speed_unit = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_deduction_speed_unit(), target);
  }

  // optional bool use_score = 4 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_use_score(), target);
  }

  // optional double single_deduction = 5 [default = 5];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_single_deduction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.SpeedbumpLimitCondition)
  return target;
}

size_t SpeedbumpLimitCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.SpeedbumpLimitCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool use_score = 4 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional double speedbump_half_width = 1 [default = 0.2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double max_speed = 2 [default = 3];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double deduction_speed_unit = 3 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double single_deduction = 5 [default = 5];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedbumpLimitCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.SpeedbumpLimitCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedbumpLimitCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeedbumpLimitCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.SpeedbumpLimitCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.SpeedbumpLimitCondition)
    MergeFrom(*source);
  }
}

void SpeedbumpLimitCondition::MergeFrom(const SpeedbumpLimitCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.SpeedbumpLimitCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      use_score_ = from.use_score_;
    }
    if (cached_has_bits & 0x00000002u) {
      speedbump_half_width_ = from.speedbump_half_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_speed_ = from.max_speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      deduction_speed_unit_ = from.deduction_speed_unit_;
    }
    if (cached_has_bits & 0x00000010u) {
      single_deduction_ = from.single_deduction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpeedbumpLimitCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.SpeedbumpLimitCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedbumpLimitCondition::CopyFrom(const SpeedbumpLimitCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.SpeedbumpLimitCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedbumpLimitCondition::IsInitialized() const {
  return true;
}

void SpeedbumpLimitCondition::InternalSwap(SpeedbumpLimitCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(use_score_, other->use_score_);
  swap(speedbump_half_width_, other->speedbump_half_width_);
  swap(max_speed_, other->max_speed_);
  swap(deduction_speed_unit_, other->deduction_speed_unit_);
  swap(single_deduction_, other->single_deduction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedbumpLimitCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WorkingZoneAvoidLimitCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkingZoneAvoidLimitCondition>()._has_bits_);
  static void set_has_max_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::hdmap::Polygon& whole_area(const WorkingZoneAvoidLimitCondition* msg);
  static void set_has_whole_area(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_single_deduction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::hdmap::Polygon&
WorkingZoneAvoidLimitCondition::_Internal::whole_area(const WorkingZoneAvoidLimitCondition* msg) {
  return *msg->whole_area_;
}
void WorkingZoneAvoidLimitCondition::clear_working_zone() {
  working_zone_.Clear();
}
void WorkingZoneAvoidLimitCondition::clear_whole_area() {
  if (whole_area_ != nullptr) whole_area_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
WorkingZoneAvoidLimitCondition::WorkingZoneAvoidLimitCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  working_zone_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.WorkingZoneAvoidLimitCondition)
}
WorkingZoneAvoidLimitCondition::WorkingZoneAvoidLimitCondition(const WorkingZoneAvoidLimitCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      working_zone_(from.working_zone_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_whole_area()) {
    whole_area_ = new ::apollo::hdmap::Polygon(*from.whole_area_);
  } else {
    whole_area_ = nullptr;
  }
  ::memcpy(&use_score_, &from.use_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&single_deduction_) -
    reinterpret_cast<char*>(&use_score_)) + sizeof(single_deduction_));
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.WorkingZoneAvoidLimitCondition)
}

void WorkingZoneAvoidLimitCondition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkingZoneAvoidLimitCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&whole_area_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&use_score_) -
      reinterpret_cast<char*>(&whole_area_)) + sizeof(use_score_));
  max_speed_ = 8.33;
  single_deduction_ = 3;
}

WorkingZoneAvoidLimitCondition::~WorkingZoneAvoidLimitCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.WorkingZoneAvoidLimitCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkingZoneAvoidLimitCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete whole_area_;
}

void WorkingZoneAvoidLimitCondition::ArenaDtor(void* object) {
  WorkingZoneAvoidLimitCondition* _this = reinterpret_cast< WorkingZoneAvoidLimitCondition* >(object);
  (void)_this;
}
void WorkingZoneAvoidLimitCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkingZoneAvoidLimitCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkingZoneAvoidLimitCondition& WorkingZoneAvoidLimitCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkingZoneAvoidLimitCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void WorkingZoneAvoidLimitCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.WorkingZoneAvoidLimitCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  working_zone_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(whole_area_ != nullptr);
    whole_area_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    use_score_ = false;
    max_speed_ = 8.33;
    single_deduction_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkingZoneAvoidLimitCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.hdmap.Polygon working_zone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_working_zone(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double max_speed = 2 [default = 8.33];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_max_speed(&has_bits);
          max_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.hdmap.Polygon whole_area = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_whole_area(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_score = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_use_score(&has_bits);
          use_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double single_deduction = 5 [default = 3];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_single_deduction(&has_bits);
          single_deduction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkingZoneAvoidLimitCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.WorkingZoneAvoidLimitCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.hdmap.Polygon working_zone = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_working_zone_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_working_zone(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional double max_speed = 2 [default = 8.33];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_speed(), target);
  }

  // optional .apollo.hdmap.Polygon whole_area = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::whole_area(this), target, stream);
  }

  // optional bool use_score = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_use_score(), target);
  }

  // optional double single_deduction = 5 [default = 3];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_single_deduction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.WorkingZoneAvoidLimitCondition)
  return target;
}

size_t WorkingZoneAvoidLimitCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.WorkingZoneAvoidLimitCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.Polygon working_zone = 1;
  total_size += 1UL * this->_internal_working_zone_size();
  for (const auto& msg : this->working_zone_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.hdmap.Polygon whole_area = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *whole_area_);
    }

    // optional bool use_score = 4 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional double max_speed = 2 [default = 8.33];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double single_deduction = 5 [default = 3];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkingZoneAvoidLimitCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.WorkingZoneAvoidLimitCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkingZoneAvoidLimitCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkingZoneAvoidLimitCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.WorkingZoneAvoidLimitCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.WorkingZoneAvoidLimitCondition)
    MergeFrom(*source);
  }
}

void WorkingZoneAvoidLimitCondition::MergeFrom(const WorkingZoneAvoidLimitCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.WorkingZoneAvoidLimitCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  working_zone_.MergeFrom(from.working_zone_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_whole_area()->::apollo::hdmap::Polygon::MergeFrom(from._internal_whole_area());
    }
    if (cached_has_bits & 0x00000002u) {
      use_score_ = from.use_score_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_speed_ = from.max_speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      single_deduction_ = from.single_deduction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WorkingZoneAvoidLimitCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.WorkingZoneAvoidLimitCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkingZoneAvoidLimitCondition::CopyFrom(const WorkingZoneAvoidLimitCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.WorkingZoneAvoidLimitCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkingZoneAvoidLimitCondition::IsInitialized() const {
  return true;
}

void WorkingZoneAvoidLimitCondition::InternalSwap(WorkingZoneAvoidLimitCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  working_zone_.InternalSwap(&other->working_zone_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkingZoneAvoidLimitCondition, use_score_)
      + sizeof(WorkingZoneAvoidLimitCondition::use_score_)
      - PROTOBUF_FIELD_OFFSET(WorkingZoneAvoidLimitCondition, whole_area_)>(
          reinterpret_cast<char*>(&whole_area_),
          reinterpret_cast<char*>(&other->whole_area_));
  swap(max_speed_, other->max_speed_);
  swap(single_deduction_, other->single_deduction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkingZoneAvoidLimitCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LimitedTimeParkingCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<LimitedTimeParkingCondition>()._has_bits_);
  static const ::apollo::hdmap::Polygon& parking_lot(const LimitedTimeParkingCondition* msg);
  static void set_has_parking_lot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_single_deduction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::hdmap::Polygon&
LimitedTimeParkingCondition::_Internal::parking_lot(const LimitedTimeParkingCondition* msg) {
  return *msg->parking_lot_;
}
void LimitedTimeParkingCondition::clear_parking_lot() {
  if (parking_lot_ != nullptr) parking_lot_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
LimitedTimeParkingCondition::LimitedTimeParkingCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.LimitedTimeParkingCondition)
}
LimitedTimeParkingCondition::LimitedTimeParkingCondition(const LimitedTimeParkingCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parking_lot()) {
    parking_lot_ = new ::apollo::hdmap::Polygon(*from.parking_lot_);
  } else {
    parking_lot_ = nullptr;
  }
  ::memcpy(&use_score_, &from.use_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&single_deduction_) -
    reinterpret_cast<char*>(&use_score_)) + sizeof(single_deduction_));
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.LimitedTimeParkingCondition)
}

void LimitedTimeParkingCondition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LimitedTimeParkingCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&parking_lot_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&use_score_) -
      reinterpret_cast<char*>(&parking_lot_)) + sizeof(use_score_));
  single_deduction_ = 5;
}

LimitedTimeParkingCondition::~LimitedTimeParkingCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.LimitedTimeParkingCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LimitedTimeParkingCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete parking_lot_;
}

void LimitedTimeParkingCondition::ArenaDtor(void* object) {
  LimitedTimeParkingCondition* _this = reinterpret_cast< LimitedTimeParkingCondition* >(object);
  (void)_this;
}
void LimitedTimeParkingCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LimitedTimeParkingCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LimitedTimeParkingCondition& LimitedTimeParkingCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LimitedTimeParkingCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void LimitedTimeParkingCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.LimitedTimeParkingCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(parking_lot_ != nullptr);
    parking_lot_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    use_score_ = false;
    single_deduction_ = 5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LimitedTimeParkingCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.hdmap.Polygon parking_lot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_parking_lot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_score = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_use_score(&has_bits);
          use_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double single_deduction = 3 [default = 5];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_single_deduction(&has_bits);
          single_deduction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LimitedTimeParkingCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.LimitedTimeParkingCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Polygon parking_lot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::parking_lot(this), target, stream);
  }

  // optional bool use_score = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_use_score(), target);
  }

  // optional double single_deduction = 3 [default = 5];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_single_deduction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.LimitedTimeParkingCondition)
  return target;
}

size_t LimitedTimeParkingCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.LimitedTimeParkingCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.hdmap.Polygon parking_lot = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parking_lot_);
    }

    // optional bool use_score = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional double single_deduction = 3 [default = 5];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LimitedTimeParkingCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.LimitedTimeParkingCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const LimitedTimeParkingCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LimitedTimeParkingCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.LimitedTimeParkingCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.LimitedTimeParkingCondition)
    MergeFrom(*source);
  }
}

void LimitedTimeParkingCondition::MergeFrom(const LimitedTimeParkingCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.LimitedTimeParkingCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_parking_lot()->::apollo::hdmap::Polygon::MergeFrom(from._internal_parking_lot());
    }
    if (cached_has_bits & 0x00000002u) {
      use_score_ = from.use_score_;
    }
    if (cached_has_bits & 0x00000004u) {
      single_deduction_ = from.single_deduction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LimitedTimeParkingCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.LimitedTimeParkingCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitedTimeParkingCondition::CopyFrom(const LimitedTimeParkingCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.LimitedTimeParkingCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitedTimeParkingCondition::IsInitialized() const {
  return true;
}

void LimitedTimeParkingCondition::InternalSwap(LimitedTimeParkingCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LimitedTimeParkingCondition, use_score_)
      + sizeof(LimitedTimeParkingCondition::use_score_)
      - PROTOBUF_FIELD_OFFSET(LimitedTimeParkingCondition, parking_lot_)>(
          reinterpret_cast<char*>(&parking_lot_),
          reinterpret_cast<char*>(&other->parking_lot_));
  swap(single_deduction_, other->single_deduction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LimitedTimeParkingCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FollowAndBypassCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<FollowAndBypassCondition>()._has_bits_);
  static const ::apollo::hdmap::Polygon& test_range(const FollowAndBypassCondition* msg);
  static void set_has_test_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_divide_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_obstacle_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::hdmap::LineSegment& end_line(const FollowAndBypassCondition* msg);
  static void set_has_end_line(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_use_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::hdmap::Polygon&
FollowAndBypassCondition::_Internal::test_range(const FollowAndBypassCondition* msg) {
  return *msg->test_range_;
}
const ::apollo::hdmap::LineSegment&
FollowAndBypassCondition::_Internal::end_line(const FollowAndBypassCondition* msg) {
  return *msg->end_line_;
}
void FollowAndBypassCondition::clear_test_range() {
  if (test_range_ != nullptr) test_range_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void FollowAndBypassCondition::clear_end_line() {
  if (end_line_ != nullptr) end_line_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
FollowAndBypassCondition::FollowAndBypassCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.FollowAndBypassCondition)
}
FollowAndBypassCondition::FollowAndBypassCondition(const FollowAndBypassCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  obstacle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_obstacle_id()) {
    obstacle_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_obstacle_id(), 
      GetArena());
  }
  if (from._internal_has_test_range()) {
    test_range_ = new ::apollo::hdmap::Polygon(*from.test_range_);
  } else {
    test_range_ = nullptr;
  }
  if (from._internal_has_end_line()) {
    end_line_ = new ::apollo::hdmap::LineSegment(*from.end_line_);
  } else {
    end_line_ = nullptr;
  }
  ::memcpy(&use_score_, &from.use_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&divide_speed_) -
    reinterpret_cast<char*>(&use_score_)) + sizeof(divide_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.FollowAndBypassCondition)
}

void FollowAndBypassCondition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FollowAndBypassCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  obstacle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&test_range_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&use_score_) -
      reinterpret_cast<char*>(&test_range_)) + sizeof(use_score_));
  divide_speed_ = 3;
}

FollowAndBypassCondition::~FollowAndBypassCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.FollowAndBypassCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FollowAndBypassCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  obstacle_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete test_range_;
  if (this != internal_default_instance()) delete end_line_;
}

void FollowAndBypassCondition::ArenaDtor(void* object) {
  FollowAndBypassCondition* _this = reinterpret_cast< FollowAndBypassCondition* >(object);
  (void)_this;
}
void FollowAndBypassCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FollowAndBypassCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FollowAndBypassCondition& FollowAndBypassCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FollowAndBypassCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void FollowAndBypassCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.FollowAndBypassCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      obstacle_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(test_range_ != nullptr);
      test_range_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(end_line_ != nullptr);
      end_line_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    use_score_ = false;
    divide_speed_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FollowAndBypassCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.hdmap.Polygon test_range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double divide_speed = 2 [default = 3];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_divide_speed(&has_bits);
          divide_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string obstacle_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_obstacle_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.simulation.FollowAndBypassCondition.obstacle_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.hdmap.LineSegment end_line = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_score = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_use_score(&has_bits);
          use_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FollowAndBypassCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.FollowAndBypassCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Polygon test_range = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::test_range(this), target, stream);
  }

  // optional double divide_speed = 2 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_divide_speed(), target);
  }

  // optional string obstacle_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_obstacle_id().data(), static_cast<int>(this->_internal_obstacle_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.simulation.FollowAndBypassCondition.obstacle_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_obstacle_id(), target);
  }

  // optional .apollo.hdmap.LineSegment end_line = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::end_line(this), target, stream);
  }

  // optional bool use_score = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_use_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.FollowAndBypassCondition)
  return target;
}

size_t FollowAndBypassCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.FollowAndBypassCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string obstacle_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_obstacle_id());
    }

    // optional .apollo.hdmap.Polygon test_range = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *test_range_);
    }

    // optional .apollo.hdmap.LineSegment end_line = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_line_);
    }

    // optional bool use_score = 5 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional double divide_speed = 2 [default = 3];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FollowAndBypassCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.FollowAndBypassCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const FollowAndBypassCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FollowAndBypassCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.FollowAndBypassCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.FollowAndBypassCondition)
    MergeFrom(*source);
  }
}

void FollowAndBypassCondition::MergeFrom(const FollowAndBypassCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.FollowAndBypassCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_obstacle_id(from._internal_obstacle_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_test_range()->::apollo::hdmap::Polygon::MergeFrom(from._internal_test_range());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_end_line()->::apollo::hdmap::LineSegment::MergeFrom(from._internal_end_line());
    }
    if (cached_has_bits & 0x00000008u) {
      use_score_ = from.use_score_;
    }
    if (cached_has_bits & 0x00000010u) {
      divide_speed_ = from.divide_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FollowAndBypassCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.FollowAndBypassCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FollowAndBypassCondition::CopyFrom(const FollowAndBypassCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.FollowAndBypassCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FollowAndBypassCondition::IsInitialized() const {
  return true;
}

void FollowAndBypassCondition::InternalSwap(FollowAndBypassCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obstacle_id_.Swap(&other->obstacle_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FollowAndBypassCondition, use_score_)
      + sizeof(FollowAndBypassCondition::use_score_)
      - PROTOBUF_FIELD_OFFSET(FollowAndBypassCondition, test_range_)>(
          reinterpret_cast<char*>(&test_range_),
          reinterpret_cast<char*>(&other->test_range_));
  swap(divide_speed_, other->divide_speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FollowAndBypassCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObstacleBypassCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstacleBypassCondition>()._has_bits_);
  static const ::apollo::hdmap::Polygon& test_range(const ObstacleBypassCondition* msg);
  static void set_has_test_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_obstacle_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_lateral_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_use_score(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_single_deduction(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::apollo::hdmap::Polygon&
ObstacleBypassCondition::_Internal::test_range(const ObstacleBypassCondition* msg) {
  return *msg->test_range_;
}
void ObstacleBypassCondition::clear_test_range() {
  if (test_range_ != nullptr) test_range_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ObstacleBypassCondition::ObstacleBypassCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.ObstacleBypassCondition)
}
ObstacleBypassCondition::ObstacleBypassCondition(const ObstacleBypassCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  obstacle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_obstacle_id()) {
    obstacle_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_obstacle_id(), 
      GetArena());
  }
  if (from._internal_has_test_range()) {
    test_range_ = new ::apollo::hdmap::Polygon(*from.test_range_);
  } else {
    test_range_ = nullptr;
  }
  ::memcpy(&use_score_, &from.use_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&single_deduction_) -
    reinterpret_cast<char*>(&use_score_)) + sizeof(single_deduction_));
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.ObstacleBypassCondition)
}

void ObstacleBypassCondition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObstacleBypassCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  obstacle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&test_range_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&use_score_) -
      reinterpret_cast<char*>(&test_range_)) + sizeof(use_score_));
  min_lateral_distance_ = 1;
  max_speed_ = 5;
  single_deduction_ = 5;
}

ObstacleBypassCondition::~ObstacleBypassCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.ObstacleBypassCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObstacleBypassCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  obstacle_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete test_range_;
}

void ObstacleBypassCondition::ArenaDtor(void* object) {
  ObstacleBypassCondition* _this = reinterpret_cast< ObstacleBypassCondition* >(object);
  (void)_this;
}
void ObstacleBypassCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObstacleBypassCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstacleBypassCondition& ObstacleBypassCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObstacleBypassCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void ObstacleBypassCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.ObstacleBypassCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      obstacle_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(test_range_ != nullptr);
      test_range_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    use_score_ = false;
    min_lateral_distance_ = 1;
    max_speed_ = 5;
    single_deduction_ = 5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleBypassCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.hdmap.Polygon test_range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string obstacle_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_obstacle_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.simulation.ObstacleBypassCondition.obstacle_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double min_lateral_distance = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_min_lateral_distance(&has_bits);
          min_lateral_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_speed = 4 [default = 5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_max_speed(&has_bits);
          max_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool use_score = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_use_score(&has_bits);
          use_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double single_deduction = 6 [default = 5];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_single_deduction(&has_bits);
          single_deduction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleBypassCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.ObstacleBypassCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Polygon test_range = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::test_range(this), target, stream);
  }

  // optional string obstacle_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_obstacle_id().data(), static_cast<int>(this->_internal_obstacle_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.simulation.ObstacleBypassCondition.obstacle_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_obstacle_id(), target);
  }

  // optional double min_lateral_distance = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_min_lateral_distance(), target);
  }

  // optional double max_speed = 4 [default = 5];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_speed(), target);
  }

  // optional bool use_score = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_use_score(), target);
  }

  // optional double single_deduction = 6 [default = 5];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_single_deduction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.ObstacleBypassCondition)
  return target;
}

size_t ObstacleBypassCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.ObstacleBypassCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string obstacle_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_obstacle_id());
    }

    // optional .apollo.hdmap.Polygon test_range = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *test_range_);
    }

    // optional bool use_score = 5 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional double min_lateral_distance = 3 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double max_speed = 4 [default = 5];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double single_deduction = 6 [default = 5];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleBypassCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.ObstacleBypassCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleBypassCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstacleBypassCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.ObstacleBypassCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.ObstacleBypassCondition)
    MergeFrom(*source);
  }
}

void ObstacleBypassCondition::MergeFrom(const ObstacleBypassCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.ObstacleBypassCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_obstacle_id(from._internal_obstacle_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_test_range()->::apollo::hdmap::Polygon::MergeFrom(from._internal_test_range());
    }
    if (cached_has_bits & 0x00000004u) {
      use_score_ = from.use_score_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_lateral_distance_ = from.min_lateral_distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_speed_ = from.max_speed_;
    }
    if (cached_has_bits & 0x00000020u) {
      single_deduction_ = from.single_deduction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObstacleBypassCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.ObstacleBypassCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleBypassCondition::CopyFrom(const ObstacleBypassCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.ObstacleBypassCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleBypassCondition::IsInitialized() const {
  return true;
}

void ObstacleBypassCondition::InternalSwap(ObstacleBypassCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obstacle_id_.Swap(&other->obstacle_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObstacleBypassCondition, use_score_)
      + sizeof(ObstacleBypassCondition::use_score_)
      - PROTOBUF_FIELD_OFFSET(ObstacleBypassCondition, test_range_)>(
          reinterpret_cast<char*>(&test_range_),
          reinterpret_cast<char*>(&other->test_range_));
  swap(min_lateral_distance_, other->min_lateral_distance_);
  swap(max_speed_, other->max_speed_);
  swap(single_deduction_, other->single_deduction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleBypassCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AntiCheatingCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<AntiCheatingCondition>()._has_bits_);
  static void set_has_use_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AntiCheatingCondition::AntiCheatingCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.AntiCheatingCondition)
}
AntiCheatingCondition::AntiCheatingCondition(const AntiCheatingCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  use_score_ = from.use_score_;
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.AntiCheatingCondition)
}

void AntiCheatingCondition::SharedCtor() {
  use_score_ = false;
}

AntiCheatingCondition::~AntiCheatingCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.AntiCheatingCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AntiCheatingCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AntiCheatingCondition::ArenaDtor(void* object) {
  AntiCheatingCondition* _this = reinterpret_cast< AntiCheatingCondition* >(object);
  (void)_this;
}
void AntiCheatingCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AntiCheatingCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AntiCheatingCondition& AntiCheatingCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AntiCheatingCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void AntiCheatingCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.AntiCheatingCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  use_score_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntiCheatingCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool use_score = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_use_score(&has_bits);
          use_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AntiCheatingCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.AntiCheatingCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_score = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_use_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.AntiCheatingCondition)
  return target;
}

size_t AntiCheatingCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.AntiCheatingCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool use_score = 1 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AntiCheatingCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.AntiCheatingCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const AntiCheatingCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AntiCheatingCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.AntiCheatingCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.AntiCheatingCondition)
    MergeFrom(*source);
  }
}

void AntiCheatingCondition::MergeFrom(const AntiCheatingCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.AntiCheatingCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_use_score()) {
    _internal_set_use_score(from._internal_use_score());
  }
}

void AntiCheatingCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.AntiCheatingCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AntiCheatingCondition::CopyFrom(const AntiCheatingCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.AntiCheatingCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntiCheatingCondition::IsInitialized() const {
  return true;
}

void AntiCheatingCondition::InternalSwap(AntiCheatingCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(use_score_, other->use_score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AntiCheatingCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class KeyPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<KeyPoint>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

KeyPoint::KeyPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.KeyPoint)
}
KeyPoint::KeyPoint(const KeyPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&radius_) -
    reinterpret_cast<char*>(&x_)) + sizeof(radius_));
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.KeyPoint)
}

void KeyPoint::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  radius_ = 2;
}

KeyPoint::~KeyPoint() {
  // @@protoc_insertion_point(destructor:apollo.simulation.KeyPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KeyPoint::ArenaDtor(void* object) {
  KeyPoint* _this = reinterpret_cast< KeyPoint* >(object);
  (void)_this;
}
void KeyPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyPoint& KeyPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyPoint_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void KeyPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.KeyPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
    radius_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double z = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double radius = 4 [default = 2];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_radius(&has_bits);
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.KeyPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // optional double z = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // optional double radius = 4 [default = 2];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.KeyPoint)
  return target;
}

size_t KeyPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.KeyPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double z = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double radius = 4 [default = 2];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.KeyPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.KeyPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.KeyPoint)
    MergeFrom(*source);
  }
}

void KeyPoint::MergeFrom(const KeyPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.KeyPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      radius_ = from.radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KeyPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.KeyPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyPoint::CopyFrom(const KeyPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.KeyPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyPoint::IsInitialized() const {
  return true;
}

void KeyPoint::InternalSwap(KeyPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyPoint, z_)
      + sizeof(KeyPoint::z_)
      - PROTOBUF_FIELD_OFFSET(KeyPoint, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
  swap(radius_, other->radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class KeyPointCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<KeyPointCondition>()._has_bits_);
  static void set_has_use_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_in_order(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

KeyPointCondition::KeyPointCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  point_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.simulation.KeyPointCondition)
}
KeyPointCondition::KeyPointCondition(const KeyPointCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      point_(from.point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&use_score_, &from.use_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&radius_) -
    reinterpret_cast<char*>(&use_score_)) + sizeof(radius_));
  // @@protoc_insertion_point(copy_constructor:apollo.simulation.KeyPointCondition)
}

void KeyPointCondition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyPointCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  use_score_ = false;
  in_order_ = true;
  radius_ = 2;
}

KeyPointCondition::~KeyPointCondition() {
  // @@protoc_insertion_point(destructor:apollo.simulation.KeyPointCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyPointCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KeyPointCondition::ArenaDtor(void* object) {
  KeyPointCondition* _this = reinterpret_cast< KeyPointCondition* >(object);
  (void)_this;
}
void KeyPointCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyPointCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyPointCondition& KeyPointCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyPointCondition_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto.base);
  return *internal_default_instance();
}


void KeyPointCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.simulation.KeyPointCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    use_score_ = false;
    in_order_ = true;
    radius_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyPointCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool use_score = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_use_score(&has_bits);
          use_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool in_order = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_in_order(&has_bits);
          in_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double radius = 3 [default = 2];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_radius(&has_bits);
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.simulation.KeyPoint point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyPointCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.simulation.KeyPointCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_score = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_use_score(), target);
  }

  // optional bool in_order = 2 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_in_order(), target);
  }

  // optional double radius = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_radius(), target);
  }

  // repeated .apollo.simulation.KeyPoint point = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_point(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.simulation.KeyPointCondition)
  return target;
}

size_t KeyPointCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.simulation.KeyPointCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.simulation.KeyPoint point = 4;
  total_size += 1UL * this->_internal_point_size();
  for (const auto& msg : this->point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool use_score = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool in_order = 2 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional double radius = 3 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyPointCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.simulation.KeyPointCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyPointCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyPointCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.simulation.KeyPointCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.simulation.KeyPointCondition)
    MergeFrom(*source);
  }
}

void KeyPointCondition::MergeFrom(const KeyPointCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.simulation.KeyPointCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      use_score_ = from.use_score_;
    }
    if (cached_has_bits & 0x00000002u) {
      in_order_ = from.in_order_;
    }
    if (cached_has_bits & 0x00000004u) {
      radius_ = from.radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KeyPointCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.simulation.KeyPointCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyPointCondition::CopyFrom(const KeyPointCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.simulation.KeyPointCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyPointCondition::IsInitialized() const {
  return true;
}

void KeyPointCondition::InternalSwap(KeyPointCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  point_.InternalSwap(&other->point_);
  swap(use_score_, other->use_score_);
  swap(in_order_, other->in_order_);
  swap(radius_, other->radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyPointCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace simulation
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::simulation::Condition* Arena::CreateMaybeMessage< ::apollo::simulation::Condition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::Condition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::GradePlanning* Arena::CreateMaybeMessage< ::apollo::simulation::GradePlanning >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::GradePlanning >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::LogicalCondition* Arena::CreateMaybeMessage< ::apollo::simulation::LogicalCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::LogicalCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::SpeedCondition* Arena::CreateMaybeMessage< ::apollo::simulation::SpeedCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::SpeedCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::CentripetalAccelerationCondition* Arena::CreateMaybeMessage< ::apollo::simulation::CentripetalAccelerationCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::CentripetalAccelerationCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::AccelerationCondition* Arena::CreateMaybeMessage< ::apollo::simulation::AccelerationCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::AccelerationCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::JerkCondition* Arena::CreateMaybeMessage< ::apollo::simulation::JerkCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::JerkCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::SpinCondition* Arena::CreateMaybeMessage< ::apollo::simulation::SpinCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::SpinCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::ObjectOverlapCondition* Arena::CreateMaybeMessage< ::apollo::simulation::ObjectOverlapCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::ObjectOverlapCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::RegionOverlapCondition* Arena::CreateMaybeMessage< ::apollo::simulation::RegionOverlapCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::RegionOverlapCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::RegionOverlapLWCondition* Arena::CreateMaybeMessage< ::apollo::simulation::RegionOverlapLWCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::RegionOverlapLWCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::OnRoadCondition* Arena::CreateMaybeMessage< ::apollo::simulation::OnRoadCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::OnRoadCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::RunRedLightCondition* Arena::CreateMaybeMessage< ::apollo::simulation::RunRedLightCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::RunRedLightCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::RedLightStopCondition* Arena::CreateMaybeMessage< ::apollo::simulation::RedLightStopCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::RedLightStopCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::ChangeLaneAtJunctionCondition* Arena::CreateMaybeMessage< ::apollo::simulation::ChangeLaneAtJunctionCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::ChangeLaneAtJunctionCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::RoutingCondition* Arena::CreateMaybeMessage< ::apollo::simulation::RoutingCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::RoutingCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::CrosswalkYieldCondition* Arena::CreateMaybeMessage< ::apollo::simulation::CrosswalkYieldCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::CrosswalkYieldCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::CrosswalkStopCondition* Arena::CreateMaybeMessage< ::apollo::simulation::CrosswalkStopCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::CrosswalkStopCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::AbnormalStopCondition* Arena::CreateMaybeMessage< ::apollo::simulation::AbnormalStopCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::AbnormalStopCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::BrakeTapCondition* Arena::CreateMaybeMessage< ::apollo::simulation::BrakeTapCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::BrakeTapCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::RunStopSignCondition* Arena::CreateMaybeMessage< ::apollo::simulation::RunStopSignCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::RunStopSignCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::CheckpointCondition* Arena::CreateMaybeMessage< ::apollo::simulation::CheckpointCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::CheckpointCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::DistToEndCondition* Arena::CreateMaybeMessage< ::apollo::simulation::DistToEndCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::DistToEndCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::DistToLaneCenterCondition* Arena::CreateMaybeMessage< ::apollo::simulation::DistToLaneCenterCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::DistToLaneCenterCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::TimeLimitCondition* Arena::CreateMaybeMessage< ::apollo::simulation::TimeLimitCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::TimeLimitCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::SpeedbumpLimitCondition* Arena::CreateMaybeMessage< ::apollo::simulation::SpeedbumpLimitCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::SpeedbumpLimitCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::WorkingZoneAvoidLimitCondition* Arena::CreateMaybeMessage< ::apollo::simulation::WorkingZoneAvoidLimitCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::WorkingZoneAvoidLimitCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::LimitedTimeParkingCondition* Arena::CreateMaybeMessage< ::apollo::simulation::LimitedTimeParkingCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::LimitedTimeParkingCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::FollowAndBypassCondition* Arena::CreateMaybeMessage< ::apollo::simulation::FollowAndBypassCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::FollowAndBypassCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::ObstacleBypassCondition* Arena::CreateMaybeMessage< ::apollo::simulation::ObstacleBypassCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::ObstacleBypassCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::AntiCheatingCondition* Arena::CreateMaybeMessage< ::apollo::simulation::AntiCheatingCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::AntiCheatingCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::KeyPoint* Arena::CreateMaybeMessage< ::apollo::simulation::KeyPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::KeyPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::simulation::KeyPointCondition* Arena::CreateMaybeMessage< ::apollo::simulation::KeyPointCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::simulation::KeyPointCondition >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
