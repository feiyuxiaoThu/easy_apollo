// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common_msgs/simulation_msgs/grading_metric.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common_msgs/simulation_msgs/grading_condition.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto;
namespace apollo {
namespace simulation {
class GradingConfig;
class GradingConfigDefaultTypeInternal;
extern GradingConfigDefaultTypeInternal _GradingConfig_default_instance_;
class Metric;
class MetricDefaultTypeInternal;
extern MetricDefaultTypeInternal _Metric_default_instance_;
}  // namespace simulation
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::simulation::GradingConfig* Arena::CreateMaybeMessage<::apollo::simulation::GradingConfig>(Arena*);
template<> ::apollo::simulation::Metric* Arena::CreateMaybeMessage<::apollo::simulation::Metric>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace simulation {

// ===================================================================

class GradingConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.simulation.GradingConfig) */ {
 public:
  inline GradingConfig() : GradingConfig(nullptr) {}
  virtual ~GradingConfig();

  GradingConfig(const GradingConfig& from);
  GradingConfig(GradingConfig&& from) noexcept
    : GradingConfig() {
    *this = ::std::move(from);
  }

  inline GradingConfig& operator=(const GradingConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline GradingConfig& operator=(GradingConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GradingConfig& default_instance();

  static inline const GradingConfig* internal_default_instance() {
    return reinterpret_cast<const GradingConfig*>(
               &_GradingConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GradingConfig& a, GradingConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(GradingConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GradingConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GradingConfig* New() const final {
    return CreateMaybeMessage<GradingConfig>(nullptr);
  }

  GradingConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GradingConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GradingConfig& from);
  void MergeFrom(const GradingConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GradingConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.simulation.GradingConfig";
  }
  protected:
  explicit GradingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto);
    return ::descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricFieldNumber = 1,
    kComputeTimeMetricNameFieldNumber = 4,
    kUseScoreFieldNumber = 2,
    kUseTimeFieldNumber = 3,
    kComputeTimeAsFirstTrueFieldNumber = 5,
  };
  // repeated .apollo.simulation.Metric metric = 1;
  int metric_size() const;
  private:
  int _internal_metric_size() const;
  public:
  void clear_metric();
  ::apollo::simulation::Metric* mutable_metric(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::simulation::Metric >*
      mutable_metric();
  private:
  const ::apollo::simulation::Metric& _internal_metric(int index) const;
  ::apollo::simulation::Metric* _internal_add_metric();
  public:
  const ::apollo::simulation::Metric& metric(int index) const;
  ::apollo::simulation::Metric* add_metric();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::simulation::Metric >&
      metric() const;

  // optional string compute_time_metric_name = 4 [default = "ReachEnd"];
  bool has_compute_time_metric_name() const;
  private:
  bool _internal_has_compute_time_metric_name() const;
  public:
  void clear_compute_time_metric_name();
  const std::string& compute_time_metric_name() const;
  void set_compute_time_metric_name(const std::string& value);
  void set_compute_time_metric_name(std::string&& value);
  void set_compute_time_metric_name(const char* value);
  void set_compute_time_metric_name(const char* value, size_t size);
  std::string* mutable_compute_time_metric_name();
  std::string* release_compute_time_metric_name();
  void set_allocated_compute_time_metric_name(std::string* compute_time_metric_name);
  private:
  const std::string& _internal_compute_time_metric_name() const;
  void _internal_set_compute_time_metric_name(const std::string& value);
  std::string* _internal_mutable_compute_time_metric_name();
  public:

  // optional bool use_score = 2 [default = false];
  bool has_use_score() const;
  private:
  bool _internal_has_use_score() const;
  public:
  void clear_use_score();
  bool use_score() const;
  void set_use_score(bool value);
  private:
  bool _internal_use_score() const;
  void _internal_set_use_score(bool value);
  public:

  // optional bool use_time = 3 [default = false];
  bool has_use_time() const;
  private:
  bool _internal_has_use_time() const;
  public:
  void clear_use_time();
  bool use_time() const;
  void set_use_time(bool value);
  private:
  bool _internal_use_time() const;
  void _internal_set_use_time(bool value);
  public:

  // optional bool compute_time_as_first_true = 5 [default = true];
  bool has_compute_time_as_first_true() const;
  private:
  bool _internal_has_compute_time_as_first_true() const;
  public:
  void clear_compute_time_as_first_true();
  bool compute_time_as_first_true() const;
  void set_compute_time_as_first_true(bool value);
  private:
  bool _internal_compute_time_as_first_true() const;
  void _internal_set_compute_time_as_first_true(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.simulation.GradingConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::simulation::Metric > metric_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_compute_time_metric_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compute_time_metric_name_;
  bool use_score_;
  bool use_time_;
  bool compute_time_as_first_true_;
  friend struct ::TableStruct_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto;
};
// -------------------------------------------------------------------

class Metric PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.simulation.Metric) */ {
 public:
  inline Metric() : Metric(nullptr) {}
  virtual ~Metric();

  Metric(const Metric& from);
  Metric(Metric&& from) noexcept
    : Metric() {
    *this = ::std::move(from);
  }

  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metric& operator=(Metric&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Metric& default_instance();

  static inline const Metric* internal_default_instance() {
    return reinterpret_cast<const Metric*>(
               &_Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Metric& a, Metric& b) {
    a.Swap(&b);
  }
  inline void Swap(Metric* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Metric* New() const final {
    return CreateMaybeMessage<Metric>(nullptr);
  }

  Metric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Metric& from);
  void MergeFrom(const Metric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.simulation.Metric";
  }
  protected:
  explicit Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto);
    return ::descriptor_table_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kConditionFieldNumber = 3,
    kIsCriticalFieldNumber = 4,
    kRequireAllTimePassFieldNumber = 5,
    kOncePassStayPassFieldNumber = 6,
    kGetDeductionScoreFieldNumber = 7,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string description = 2;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional .apollo.simulation.Condition condition = 3;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::apollo::simulation::Condition& condition() const;
  ::apollo::simulation::Condition* release_condition();
  ::apollo::simulation::Condition* mutable_condition();
  void set_allocated_condition(::apollo::simulation::Condition* condition);
  private:
  const ::apollo::simulation::Condition& _internal_condition() const;
  ::apollo::simulation::Condition* _internal_mutable_condition();
  public:
  void unsafe_arena_set_allocated_condition(
      ::apollo::simulation::Condition* condition);
  ::apollo::simulation::Condition* unsafe_arena_release_condition();

  // optional bool is_critical = 4 [default = true];
  bool has_is_critical() const;
  private:
  bool _internal_has_is_critical() const;
  public:
  void clear_is_critical();
  bool is_critical() const;
  void set_is_critical(bool value);
  private:
  bool _internal_is_critical() const;
  void _internal_set_is_critical(bool value);
  public:

  // optional bool require_all_time_pass = 5 [default = true];
  bool has_require_all_time_pass() const;
  private:
  bool _internal_has_require_all_time_pass() const;
  public:
  void clear_require_all_time_pass();
  bool require_all_time_pass() const;
  void set_require_all_time_pass(bool value);
  private:
  bool _internal_require_all_time_pass() const;
  void _internal_set_require_all_time_pass(bool value);
  public:

  // optional bool once_pass_stay_pass = 6 [default = true];
  bool has_once_pass_stay_pass() const;
  private:
  bool _internal_has_once_pass_stay_pass() const;
  public:
  void clear_once_pass_stay_pass();
  bool once_pass_stay_pass() const;
  void set_once_pass_stay_pass(bool value);
  private:
  bool _internal_once_pass_stay_pass() const;
  void _internal_set_once_pass_stay_pass(bool value);
  public:

  // optional bool get_deduction_score = 7 [default = true];
  bool has_get_deduction_score() const;
  private:
  bool _internal_has_get_deduction_score() const;
  public:
  void clear_get_deduction_score();
  bool get_deduction_score() const;
  void set_get_deduction_score(bool value);
  private:
  bool _internal_get_deduction_score() const;
  void _internal_set_get_deduction_score(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.simulation.Metric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::apollo::simulation::Condition* condition_;
  bool is_critical_;
  bool require_all_time_pass_;
  bool once_pass_stay_pass_;
  bool get_deduction_score_;
  friend struct ::TableStruct_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GradingConfig

// repeated .apollo.simulation.Metric metric = 1;
inline int GradingConfig::_internal_metric_size() const {
  return metric_.size();
}
inline int GradingConfig::metric_size() const {
  return _internal_metric_size();
}
inline void GradingConfig::clear_metric() {
  metric_.Clear();
}
inline ::apollo::simulation::Metric* GradingConfig::mutable_metric(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.simulation.GradingConfig.metric)
  return metric_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::simulation::Metric >*
GradingConfig::mutable_metric() {
  // @@protoc_insertion_point(field_mutable_list:apollo.simulation.GradingConfig.metric)
  return &metric_;
}
inline const ::apollo::simulation::Metric& GradingConfig::_internal_metric(int index) const {
  return metric_.Get(index);
}
inline const ::apollo::simulation::Metric& GradingConfig::metric(int index) const {
  // @@protoc_insertion_point(field_get:apollo.simulation.GradingConfig.metric)
  return _internal_metric(index);
}
inline ::apollo::simulation::Metric* GradingConfig::_internal_add_metric() {
  return metric_.Add();
}
inline ::apollo::simulation::Metric* GradingConfig::add_metric() {
  // @@protoc_insertion_point(field_add:apollo.simulation.GradingConfig.metric)
  return _internal_add_metric();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::simulation::Metric >&
GradingConfig::metric() const {
  // @@protoc_insertion_point(field_list:apollo.simulation.GradingConfig.metric)
  return metric_;
}

// optional bool use_score = 2 [default = false];
inline bool GradingConfig::_internal_has_use_score() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GradingConfig::has_use_score() const {
  return _internal_has_use_score();
}
inline void GradingConfig::clear_use_score() {
  use_score_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool GradingConfig::_internal_use_score() const {
  return use_score_;
}
inline bool GradingConfig::use_score() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.GradingConfig.use_score)
  return _internal_use_score();
}
inline void GradingConfig::_internal_set_use_score(bool value) {
  _has_bits_[0] |= 0x00000002u;
  use_score_ = value;
}
inline void GradingConfig::set_use_score(bool value) {
  _internal_set_use_score(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.GradingConfig.use_score)
}

// optional bool use_time = 3 [default = false];
inline bool GradingConfig::_internal_has_use_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GradingConfig::has_use_time() const {
  return _internal_has_use_time();
}
inline void GradingConfig::clear_use_time() {
  use_time_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool GradingConfig::_internal_use_time() const {
  return use_time_;
}
inline bool GradingConfig::use_time() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.GradingConfig.use_time)
  return _internal_use_time();
}
inline void GradingConfig::_internal_set_use_time(bool value) {
  _has_bits_[0] |= 0x00000004u;
  use_time_ = value;
}
inline void GradingConfig::set_use_time(bool value) {
  _internal_set_use_time(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.GradingConfig.use_time)
}

// optional string compute_time_metric_name = 4 [default = "ReachEnd"];
inline bool GradingConfig::_internal_has_compute_time_metric_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GradingConfig::has_compute_time_metric_name() const {
  return _internal_has_compute_time_metric_name();
}
inline void GradingConfig::clear_compute_time_metric_name() {
  compute_time_metric_name_.ClearToDefault(::apollo::simulation::GradingConfig::_i_give_permission_to_break_this_code_default_compute_time_metric_name_, GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GradingConfig::compute_time_metric_name() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.GradingConfig.compute_time_metric_name)
  if (compute_time_metric_name_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_compute_time_metric_name_.get();
  return _internal_compute_time_metric_name();
}
inline void GradingConfig::set_compute_time_metric_name(const std::string& value) {
  _internal_set_compute_time_metric_name(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.GradingConfig.compute_time_metric_name)
}
inline std::string* GradingConfig::mutable_compute_time_metric_name() {
  // @@protoc_insertion_point(field_mutable:apollo.simulation.GradingConfig.compute_time_metric_name)
  return _internal_mutable_compute_time_metric_name();
}
inline const std::string& GradingConfig::_internal_compute_time_metric_name() const {
  return compute_time_metric_name_.Get();
}
inline void GradingConfig::_internal_set_compute_time_metric_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  compute_time_metric_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
}
inline void GradingConfig::set_compute_time_metric_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  compute_time_metric_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.simulation.GradingConfig.compute_time_metric_name)
}
inline void GradingConfig::set_compute_time_metric_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  compute_time_metric_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.simulation.GradingConfig.compute_time_metric_name)
}
inline void GradingConfig::set_compute_time_metric_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  compute_time_metric_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.simulation.GradingConfig.compute_time_metric_name)
}
inline std::string* GradingConfig::_internal_mutable_compute_time_metric_name() {
  _has_bits_[0] |= 0x00000001u;
  return compute_time_metric_name_.Mutable(::apollo::simulation::GradingConfig::_i_give_permission_to_break_this_code_default_compute_time_metric_name_, GetArena());
}
inline std::string* GradingConfig::release_compute_time_metric_name() {
  // @@protoc_insertion_point(field_release:apollo.simulation.GradingConfig.compute_time_metric_name)
  if (!_internal_has_compute_time_metric_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return compute_time_metric_name_.ReleaseNonDefault(nullptr, GetArena());
}
inline void GradingConfig::set_allocated_compute_time_metric_name(std::string* compute_time_metric_name) {
  if (compute_time_metric_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  compute_time_metric_name_.SetAllocated(nullptr, compute_time_metric_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.GradingConfig.compute_time_metric_name)
}

// optional bool compute_time_as_first_true = 5 [default = true];
inline bool GradingConfig::_internal_has_compute_time_as_first_true() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GradingConfig::has_compute_time_as_first_true() const {
  return _internal_has_compute_time_as_first_true();
}
inline void GradingConfig::clear_compute_time_as_first_true() {
  compute_time_as_first_true_ = true;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool GradingConfig::_internal_compute_time_as_first_true() const {
  return compute_time_as_first_true_;
}
inline bool GradingConfig::compute_time_as_first_true() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.GradingConfig.compute_time_as_first_true)
  return _internal_compute_time_as_first_true();
}
inline void GradingConfig::_internal_set_compute_time_as_first_true(bool value) {
  _has_bits_[0] |= 0x00000008u;
  compute_time_as_first_true_ = value;
}
inline void GradingConfig::set_compute_time_as_first_true(bool value) {
  _internal_set_compute_time_as_first_true(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.GradingConfig.compute_time_as_first_true)
}

// -------------------------------------------------------------------

// Metric

// optional string name = 1;
inline bool Metric::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Metric::has_name() const {
  return _internal_has_name();
}
inline void Metric::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Metric::name() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Metric.name)
  return _internal_name();
}
inline void Metric::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Metric.name)
}
inline std::string* Metric::mutable_name() {
  // @@protoc_insertion_point(field_mutable:apollo.simulation.Metric.name)
  return _internal_mutable_name();
}
inline const std::string& Metric::_internal_name() const {
  return name_.Get();
}
inline void Metric::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Metric::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.simulation.Metric.name)
}
inline void Metric::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.simulation.Metric.name)
}
inline void Metric::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.simulation.Metric.name)
}
inline std::string* Metric::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Metric::release_name() {
  // @@protoc_insertion_point(field_release:apollo.simulation.Metric.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Metric::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Metric.name)
}

// optional string description = 2;
inline bool Metric::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Metric::has_description() const {
  return _internal_has_description();
}
inline void Metric::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Metric::description() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Metric.description)
  return _internal_description();
}
inline void Metric::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Metric.description)
}
inline std::string* Metric::mutable_description() {
  // @@protoc_insertion_point(field_mutable:apollo.simulation.Metric.description)
  return _internal_mutable_description();
}
inline const std::string& Metric::_internal_description() const {
  return description_.Get();
}
inline void Metric::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Metric::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.simulation.Metric.description)
}
inline void Metric::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.simulation.Metric.description)
}
inline void Metric::set_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.simulation.Metric.description)
}
inline std::string* Metric::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Metric::release_description() {
  // @@protoc_insertion_point(field_release:apollo.simulation.Metric.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Metric::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Metric.description)
}

// optional .apollo.simulation.Condition condition = 3;
inline bool Metric::_internal_has_condition() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || condition_ != nullptr);
  return value;
}
inline bool Metric::has_condition() const {
  return _internal_has_condition();
}
inline const ::apollo::simulation::Condition& Metric::_internal_condition() const {
  const ::apollo::simulation::Condition* p = condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::simulation::Condition&>(
      ::apollo::simulation::_Condition_default_instance_);
}
inline const ::apollo::simulation::Condition& Metric::condition() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Metric.condition)
  return _internal_condition();
}
inline void Metric::unsafe_arena_set_allocated_condition(
    ::apollo::simulation::Condition* condition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_);
  }
  condition_ = condition;
  if (condition) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.simulation.Metric.condition)
}
inline ::apollo::simulation::Condition* Metric::release_condition() {
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::simulation::Condition* temp = condition_;
  condition_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::simulation::Condition* Metric::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_release:apollo.simulation.Metric.condition)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::simulation::Condition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::apollo::simulation::Condition* Metric::_internal_mutable_condition() {
  _has_bits_[0] |= 0x00000004u;
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::simulation::Condition>(GetArena());
    condition_ = p;
  }
  return condition_;
}
inline ::apollo::simulation::Condition* Metric::mutable_condition() {
  // @@protoc_insertion_point(field_mutable:apollo.simulation.Metric.condition)
  return _internal_mutable_condition();
}
inline void Metric::set_allocated_condition(::apollo::simulation::Condition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_);
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition)->GetArena();
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:apollo.simulation.Metric.condition)
}

// optional bool is_critical = 4 [default = true];
inline bool Metric::_internal_has_is_critical() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Metric::has_is_critical() const {
  return _internal_has_is_critical();
}
inline void Metric::clear_is_critical() {
  is_critical_ = true;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Metric::_internal_is_critical() const {
  return is_critical_;
}
inline bool Metric::is_critical() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Metric.is_critical)
  return _internal_is_critical();
}
inline void Metric::_internal_set_is_critical(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_critical_ = value;
}
inline void Metric::set_is_critical(bool value) {
  _internal_set_is_critical(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Metric.is_critical)
}

// optional bool require_all_time_pass = 5 [default = true];
inline bool Metric::_internal_has_require_all_time_pass() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Metric::has_require_all_time_pass() const {
  return _internal_has_require_all_time_pass();
}
inline void Metric::clear_require_all_time_pass() {
  require_all_time_pass_ = true;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Metric::_internal_require_all_time_pass() const {
  return require_all_time_pass_;
}
inline bool Metric::require_all_time_pass() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Metric.require_all_time_pass)
  return _internal_require_all_time_pass();
}
inline void Metric::_internal_set_require_all_time_pass(bool value) {
  _has_bits_[0] |= 0x00000010u;
  require_all_time_pass_ = value;
}
inline void Metric::set_require_all_time_pass(bool value) {
  _internal_set_require_all_time_pass(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Metric.require_all_time_pass)
}

// optional bool once_pass_stay_pass = 6 [default = true];
inline bool Metric::_internal_has_once_pass_stay_pass() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Metric::has_once_pass_stay_pass() const {
  return _internal_has_once_pass_stay_pass();
}
inline void Metric::clear_once_pass_stay_pass() {
  once_pass_stay_pass_ = true;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Metric::_internal_once_pass_stay_pass() const {
  return once_pass_stay_pass_;
}
inline bool Metric::once_pass_stay_pass() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Metric.once_pass_stay_pass)
  return _internal_once_pass_stay_pass();
}
inline void Metric::_internal_set_once_pass_stay_pass(bool value) {
  _has_bits_[0] |= 0x00000020u;
  once_pass_stay_pass_ = value;
}
inline void Metric::set_once_pass_stay_pass(bool value) {
  _internal_set_once_pass_stay_pass(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Metric.once_pass_stay_pass)
}

// optional bool get_deduction_score = 7 [default = true];
inline bool Metric::_internal_has_get_deduction_score() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Metric::has_get_deduction_score() const {
  return _internal_has_get_deduction_score();
}
inline void Metric::clear_get_deduction_score() {
  get_deduction_score_ = true;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Metric::_internal_get_deduction_score() const {
  return get_deduction_score_;
}
inline bool Metric::get_deduction_score() const {
  // @@protoc_insertion_point(field_get:apollo.simulation.Metric.get_deduction_score)
  return _internal_get_deduction_score();
}
inline void Metric::_internal_set_get_deduction_score(bool value) {
  _has_bits_[0] |= 0x00000040u;
  get_deduction_score_ = value;
}
inline void Metric::set_get_deduction_score(bool value) {
  _internal_set_get_deduction_score(value);
  // @@protoc_insertion_point(field_set:apollo.simulation.Metric.get_deduction_score)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace simulation
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fmetric_2eproto
